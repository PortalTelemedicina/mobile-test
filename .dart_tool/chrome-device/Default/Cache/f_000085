define(['dart_sdk', 'packages/xml/src/xml/utils/node_type.dart', 'packages/xml/src/xml_events/utils/list_converter.dart', 'packages/xml/src/xml/utils/simple_name.dart', 'packages/collection/src/equality.dart', 'packages/xml/src/xml/utils/attribute_type.dart', 'packages/xml/src/xml/entities/default_mapping.dart', 'packages/xml/src/xml_events/utils/conversion_sink.dart', 'packages/xml/src/xml/entities/entity_mapping.dart'], (function load__packages__xml__src__xml_events__events__text_dart(dart_sdk, packages__xml__src__xml__utils__node_type$46dart, packages__xml__src__xml_events__utils__list_converter$46dart, packages__xml__src__xml__utils__simple_name$46dart, packages__collection__src__equality$46dart, packages__xml__src__xml__utils__attribute_type$46dart, packages__xml__src__xml__entities__default_mapping$46dart, packages__xml__src__xml_events__utils__conversion_sink$46dart, packages__xml__src__xml__entities__entity_mapping$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _interceptors = dart_sdk._interceptors;
  const convert = dart_sdk.convert;
  const async = dart_sdk.async;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const node_type = packages__xml__src__xml__utils__node_type$46dart.src__xml__utils__node_type;
  const list_converter = packages__xml__src__xml_events__utils__list_converter$46dart.src__xml_events__utils__list_converter;
  const exceptions = packages__xml__src__xml__utils__simple_name$46dart.src__xml__utils__exceptions;
  const equality = packages__collection__src__equality$46dart.src__equality;
  const attribute_type = packages__xml__src__xml__utils__attribute_type$46dart.src__xml__utils__attribute_type;
  const default_mapping = packages__xml__src__xml__entities__default_mapping$46dart.src__xml__entities__default_mapping;
  const conversion_sink = packages__xml__src__xml_events__utils__conversion_sink$46dart.src__xml_events__utils__conversion_sink;
  const entity_mapping = packages__xml__src__xml__entities__entity_mapping$46dart.src__xml__entities__entity_mapping;
  var text$ = Object.create(dart.library);
  var processing = Object.create(dart.library);
  var end_element = Object.create(dart.library);
  var doctype = Object.create(dart.library);
  var with_parent = Object.create(dart.library);
  var parented = Object.create(dart.library);
  var start_element = Object.create(dart.library);
  var named = Object.create(dart.library);
  var event_attribute = Object.create(dart.library);
  var declaration = Object.create(dart.library);
  var comment = Object.create(dart.library);
  var visitor = Object.create(dart.library);
  var cdata = Object.create(dart.library);
  var event_encoder = Object.create(dart.library);
  var event = Object.create(dart.library);
  var $hashCode = dartx.hashCode;
  var $indexOf = dartx.indexOf;
  var $substring = dartx.substring;
  var $forEach = dartx.forEach;
  var $isNotEmpty = dartx.isNotEmpty;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    JSArrayOfXmlEvent: () => (T.JSArrayOfXmlEvent = dart.constFn(_interceptors.JSArray$(event.XmlEvent)))(),
    ListOfXmlEvent: () => (T.ListOfXmlEvent = dart.constFn(core.List$(event.XmlEvent)))(),
    SinkOfListOfXmlEvent: () => (T.SinkOfListOfXmlEvent = dart.constFn(core.Sink$(T.ListOfXmlEvent())))(),
    StreamOfListOfXmlEvent: () => (T.StreamOfListOfXmlEvent = dart.constFn(async.Stream$(T.ListOfXmlEvent())))(),
    VoidToStreamOfListOfXmlEvent: () => (T.VoidToStreamOfListOfXmlEvent = dart.constFn(dart.fnType(T.StreamOfListOfXmlEvent(), [])))(),
    DefaultEqualityOfNever: () => (T.DefaultEqualityOfNever = dart.constFn(equality.DefaultEquality$(dart.Never)))(),
    ConversionSinkOfString: () => (T.ConversionSinkOfString = dart.constFn(conversion_sink.ConversionSink$(core.String)))(),
    SinkOfString: () => (T.SinkOfString = dart.constFn(core.Sink$(core.String)))(),
    StreamOfString: () => (T.StreamOfString = dart.constFn(async.Stream$(core.String)))(),
    XmlEntityMappingN: () => (T.XmlEntityMappingN = dart.constFn(dart.nullable(entity_mapping.XmlEntityMapping)))(),
    __ToStreamOfString: () => (T.__ToStreamOfString = dart.constFn(dart.fnType(T.StreamOfString(), [], {entityMapping: T.XmlEntityMappingN()}, {})))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: with_parent.XmlWithParentEvents.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: T.DefaultEqualityOfNever().prototype
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: equality.ListEquality.prototype,
        [ListEquality__elementEquality]: C[2] || CT.C2
      });
    }
  }, false);
  var C = Array(3).fill(void 0);
  var I = [
    "package:xml/src/xml_events/utils/parented.dart",
    "package:xml/src/xml_events/event.dart",
    "package:xml/src/xml_events/events/text.dart",
    "package:xml/src/xml_events/events/processing.dart",
    "package:xml/src/xml_events/utils/named.dart",
    "package:xml/src/xml_events/events/end_element.dart",
    "package:xml/src/xml_events/events/doctype.dart",
    "package:xml/src/xml_events/streams/with_parent.dart",
    "package:xml/src/xml_events/visitor.dart",
    "package:xml/src/xml_events/events/start_element.dart",
    "package:xml/src/xml_events/utils/event_attribute.dart",
    "package:xml/src/xml_events/events/declaration.dart",
    "package:xml/src/xml_events/events/comment.dart",
    "package:xml/src/xml_events/events/cdata.dart",
    "package:xml/src/xml_events/converters/event_encoder.dart"
  ];
  var text$0 = dart.privateName(text$, "XmlTextEvent.text");
  var _parentEvent = dart.privateName(parented, "_parentEvent");
  parented.XmlParented = class XmlParented extends core.Object {};
  parented.XmlParented[dart.mixinOn] = Object => class XmlParented extends Object {
    get parentEvent() {
      return this[_parentEvent];
    }
    attachParentEvent(parentEvent) {
      if (this[_parentEvent] != null) {
        dart.throw(new core.StateError.new("Parent event already resolved."));
      }
      this[_parentEvent] = parentEvent;
    }
  };
  (parented.XmlParented[dart.mixinNew] = function() {
    this[_parentEvent] = null;
  }).prototype = parented.XmlParented.prototype;
  dart.addTypeTests(parented.XmlParented);
  dart.addTypeCaches(parented.XmlParented);
  parented.XmlParented[dart.implements] = () => [core.Object];
  dart.setMethodSignature(parented.XmlParented, () => ({
    __proto__: dart.getMethods(parented.XmlParented.__proto__),
    attachParentEvent: dart.fnType(dart.void, [dart.nullable(start_element.XmlStartElementEvent)])
  }));
  dart.setGetterSignature(parented.XmlParented, () => ({
    __proto__: dart.getGetters(parented.XmlParented.__proto__),
    parentEvent: dart.nullable(start_element.XmlStartElementEvent)
  }));
  dart.setLibraryUri(parented.XmlParented, I[0]);
  dart.setFieldSignature(parented.XmlParented, () => ({
    __proto__: dart.getFields(parented.XmlParented.__proto__),
    [_parentEvent]: dart.fieldType(dart.nullable(start_element.XmlStartElementEvent))
  }));
  const Object_XmlParented$36 = class Object_XmlParented extends core.Object {};
  (Object_XmlParented$36.new = function() {
    parented.XmlParented[dart.mixinNew].call(this);
  }).prototype = Object_XmlParented$36.prototype;
  dart.applyMixin(Object_XmlParented$36, parented.XmlParented);
  event.XmlEvent = class XmlEvent extends Object_XmlParented$36 {
    toString() {
      return new event_encoder.XmlEventEncoder.new().convert(T.JSArrayOfXmlEvent().of([this]));
    }
  };
  (event.XmlEvent.new = function() {
    event.XmlEvent.__proto__.new.call(this);
    ;
  }).prototype = event.XmlEvent.prototype;
  dart.addTypeTests(event.XmlEvent);
  dart.addTypeCaches(event.XmlEvent);
  dart.setLibraryUri(event.XmlEvent, I[1]);
  dart.defineExtensionMethods(event.XmlEvent, ['toString']);
  text$.XmlTextEvent = class XmlTextEvent extends event.XmlEvent {
    get text() {
      return this[text$0];
    }
    set text(value) {
      super.text = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.TEXT;
    }
    accept(visitor) {
      return visitor.visitTextEvent(this);
    }
    get hashCode() {
      return (this.nodeType[$hashCode] ^ this.text[$hashCode]) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return text$.XmlTextEvent.is(other) && other.text === this.text;
    }
  };
  (text$.XmlTextEvent.new = function(text) {
    this[text$0] = text;
    text$.XmlTextEvent.__proto__.new.call(this);
    ;
  }).prototype = text$.XmlTextEvent.prototype;
  dart.addTypeTests(text$.XmlTextEvent);
  dart.addTypeCaches(text$.XmlTextEvent);
  dart.setMethodSignature(text$.XmlTextEvent, () => ({
    __proto__: dart.getMethods(text$.XmlTextEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(text$.XmlTextEvent, () => ({
    __proto__: dart.getGetters(text$.XmlTextEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(text$.XmlTextEvent, I[2]);
  dart.setFieldSignature(text$.XmlTextEvent, () => ({
    __proto__: dart.getFields(text$.XmlTextEvent.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(text$.XmlTextEvent, ['_equals']);
  dart.defineExtensionAccessors(text$.XmlTextEvent, ['hashCode']);
  var target$ = dart.privateName(processing, "XmlProcessingEvent.target");
  var text$1 = dart.privateName(processing, "XmlProcessingEvent.text");
  processing.XmlProcessingEvent = class XmlProcessingEvent extends event.XmlEvent {
    get target() {
      return this[target$];
    }
    set target(value) {
      super.target = value;
    }
    get text() {
      return this[text$1];
    }
    set text(value) {
      super.text = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.PROCESSING;
    }
    accept(visitor) {
      return visitor.visitProcessingEvent(this);
    }
    get hashCode() {
      return (this.nodeType[$hashCode] ^ this.text[$hashCode] ^ this.target[$hashCode]) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return processing.XmlProcessingEvent.is(other) && other.target === this.target && other.text === this.text;
    }
  };
  (processing.XmlProcessingEvent.new = function(target, text) {
    this[target$] = target;
    this[text$1] = text;
    processing.XmlProcessingEvent.__proto__.new.call(this);
    ;
  }).prototype = processing.XmlProcessingEvent.prototype;
  dart.addTypeTests(processing.XmlProcessingEvent);
  dart.addTypeCaches(processing.XmlProcessingEvent);
  dart.setMethodSignature(processing.XmlProcessingEvent, () => ({
    __proto__: dart.getMethods(processing.XmlProcessingEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(processing.XmlProcessingEvent, () => ({
    __proto__: dart.getGetters(processing.XmlProcessingEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(processing.XmlProcessingEvent, I[3]);
  dart.setFieldSignature(processing.XmlProcessingEvent, () => ({
    __proto__: dart.getFields(processing.XmlProcessingEvent.__proto__),
    target: dart.finalFieldType(core.String),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(processing.XmlProcessingEvent, ['_equals']);
  dart.defineExtensionAccessors(processing.XmlProcessingEvent, ['hashCode']);
  var name$ = dart.privateName(end_element, "XmlEndElementEvent.name");
  named.XmlNamed = class XmlNamed extends core.Object {};
  named.XmlNamed[dart.mixinOn] = Object => class XmlNamed extends Object {
    get qualifiedName() {
      return this.name;
    }
    get namespacePrefix() {
      let index = this.name[$indexOf](":");
      return index > 0 ? this.name[$substring](0, index) : null;
    }
    get namespaceUri() {
      let index = this.name[$indexOf](":");
      let prefix = index < 0 ? null : "xmlns";
      let local = index < 0 ? "xmlns" : this.name[$substring](0, index);
      let start = start_element.XmlStartElementEvent.is(this) ? start_element.XmlStartElementEvent.as(this) : this.parentEvent;
      for (let event = start; event != null; event = event.parentEvent) {
        for (let attribute of event.attributes) {
          if (attribute.namespacePrefix == prefix && attribute.localName === local) {
            return attribute.value;
          }
        }
      }
      return null;
    }
    get localName() {
      let index = this.name[$indexOf](":");
      return index > 0 ? this.name[$substring](index + 1) : this.name;
    }
  };
  (named.XmlNamed[dart.mixinNew] = function() {
  }).prototype = named.XmlNamed.prototype;
  dart.addTypeTests(named.XmlNamed);
  dart.addTypeCaches(named.XmlNamed);
  named.XmlNamed[dart.implements] = () => [parented.XmlParented, core.Object];
  dart.setGetterSignature(named.XmlNamed, () => ({
    __proto__: dart.getGetters(named.XmlNamed.__proto__),
    qualifiedName: core.String,
    namespacePrefix: dart.nullable(core.String),
    namespaceUri: dart.nullable(core.String),
    localName: core.String
  }));
  dart.setLibraryUri(named.XmlNamed, I[4]);
  const XmlEvent_XmlNamed$36 = class XmlEvent_XmlNamed extends event.XmlEvent {};
  (XmlEvent_XmlNamed$36.new = function() {
    XmlEvent_XmlNamed$36.__proto__.new.call(this);
  }).prototype = XmlEvent_XmlNamed$36.prototype;
  dart.applyMixin(XmlEvent_XmlNamed$36, named.XmlNamed);
  end_element.XmlEndElementEvent = class XmlEndElementEvent extends XmlEvent_XmlNamed$36 {
    get name() {
      return this[name$];
    }
    set name(value) {
      super.name = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.ELEMENT;
    }
    accept(visitor) {
      return visitor.visitEndElementEvent(this);
    }
    get hashCode() {
      return (this.nodeType[$hashCode] ^ this.name[$hashCode]) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return end_element.XmlEndElementEvent.is(other) && other.name === this.name;
    }
  };
  (end_element.XmlEndElementEvent.new = function(name) {
    this[name$] = name;
    end_element.XmlEndElementEvent.__proto__.new.call(this);
    ;
  }).prototype = end_element.XmlEndElementEvent.prototype;
  dart.addTypeTests(end_element.XmlEndElementEvent);
  dart.addTypeCaches(end_element.XmlEndElementEvent);
  dart.setMethodSignature(end_element.XmlEndElementEvent, () => ({
    __proto__: dart.getMethods(end_element.XmlEndElementEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(end_element.XmlEndElementEvent, () => ({
    __proto__: dart.getGetters(end_element.XmlEndElementEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(end_element.XmlEndElementEvent, I[5]);
  dart.setFieldSignature(end_element.XmlEndElementEvent, () => ({
    __proto__: dart.getFields(end_element.XmlEndElementEvent.__proto__),
    name: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(end_element.XmlEndElementEvent, ['_equals']);
  dart.defineExtensionAccessors(end_element.XmlEndElementEvent, ['hashCode']);
  var text$2 = dart.privateName(doctype, "XmlDoctypeEvent.text");
  doctype.XmlDoctypeEvent = class XmlDoctypeEvent extends event.XmlEvent {
    get text() {
      return this[text$2];
    }
    set text(value) {
      super.text = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.DOCUMENT_TYPE;
    }
    accept(visitor) {
      return visitor.visitDoctypeEvent(this);
    }
    get hashCode() {
      return (this.nodeType[$hashCode] ^ this.text[$hashCode]) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return doctype.XmlDoctypeEvent.is(other) && other.text === this.text;
    }
  };
  (doctype.XmlDoctypeEvent.new = function(text) {
    this[text$2] = text;
    doctype.XmlDoctypeEvent.__proto__.new.call(this);
    ;
  }).prototype = doctype.XmlDoctypeEvent.prototype;
  dart.addTypeTests(doctype.XmlDoctypeEvent);
  dart.addTypeCaches(doctype.XmlDoctypeEvent);
  dart.setMethodSignature(doctype.XmlDoctypeEvent, () => ({
    __proto__: dart.getMethods(doctype.XmlDoctypeEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(doctype.XmlDoctypeEvent, () => ({
    __proto__: dart.getGetters(doctype.XmlDoctypeEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(doctype.XmlDoctypeEvent, I[6]);
  dart.setFieldSignature(doctype.XmlDoctypeEvent, () => ({
    __proto__: dart.getFields(doctype.XmlDoctypeEvent.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(doctype.XmlDoctypeEvent, ['_equals']);
  dart.defineExtensionAccessors(doctype.XmlDoctypeEvent, ['hashCode']);
  with_parent.XmlWithParentEvents = class XmlWithParentEvents extends list_converter.XmlListConverter$(event.XmlEvent, event.XmlEvent) {
    startChunkedConversion(sink) {
      T.SinkOfListOfXmlEvent().as(sink);
      return new with_parent._XmlWithParentEventsSink.new(sink);
    }
  };
  (with_parent.XmlWithParentEvents.new = function() {
    with_parent.XmlWithParentEvents.__proto__.new.call(this);
    ;
  }).prototype = with_parent.XmlWithParentEvents.prototype;
  dart.addTypeTests(with_parent.XmlWithParentEvents);
  dart.addTypeCaches(with_parent.XmlWithParentEvents);
  dart.setMethodSignature(with_parent.XmlWithParentEvents, () => ({
    __proto__: dart.getMethods(with_parent.XmlWithParentEvents.__proto__),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(core.List$(event.XmlEvent)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(with_parent.XmlWithParentEvents, I[7]);
  visitor.XmlEventVisitor = class XmlEventVisitor extends core.Object {};
  visitor.XmlEventVisitor[dart.mixinOn] = Object => class XmlEventVisitor extends Object {
    visit(event) {
      return event.accept(this);
    }
  };
  (visitor.XmlEventVisitor[dart.mixinNew] = function() {
  }).prototype = visitor.XmlEventVisitor.prototype;
  dart.addTypeTests(visitor.XmlEventVisitor);
  dart.addTypeCaches(visitor.XmlEventVisitor);
  visitor.XmlEventVisitor[dart.implements] = () => [core.Object];
  dart.setMethodSignature(visitor.XmlEventVisitor, () => ({
    __proto__: dart.getMethods(visitor.XmlEventVisitor.__proto__),
    visit: dart.fnType(dart.void, [event.XmlEvent])
  }));
  dart.setLibraryUri(visitor.XmlEventVisitor, I[8]);
  const ChunkedConversionSink_XmlEventVisitor$36 = class ChunkedConversionSink_XmlEventVisitor extends convert.ChunkedConversionSink$(core.List$(event.XmlEvent)) {};
  (ChunkedConversionSink_XmlEventVisitor$36.new = function() {
    ChunkedConversionSink_XmlEventVisitor$36.__proto__.new.call(this);
  }).prototype = ChunkedConversionSink_XmlEventVisitor$36.prototype;
  dart.applyMixin(ChunkedConversionSink_XmlEventVisitor$36, visitor.XmlEventVisitor);
  with_parent._XmlWithParentEventsSink = class _XmlWithParentEventsSink extends ChunkedConversionSink_XmlEventVisitor$36 {
    add(events) {
      T.ListOfXmlEvent().as(events);
      events[$forEach](dart.bind(this, 'visit'));
      this.sink.add(events);
    }
    close() {
      if (this.currentParent != null) {
        dart.throw(exceptions.XmlTagException.missingClosingTag(dart.nullCheck(this.currentParent).name));
      }
      this.sink.close();
    }
    visitCDATAEvent(event) {
      return event.attachParentEvent(this.currentParent);
    }
    visitCommentEvent(event) {
      return event.attachParentEvent(this.currentParent);
    }
    visitDeclarationEvent(event) {
      return event.attachParentEvent(this.currentParent);
    }
    visitDoctypeEvent(event) {
      return event.attachParentEvent(this.currentParent);
    }
    visitEndElementEvent(event) {
      if (this.currentParent == null) {
        dart.throw(exceptions.XmlTagException.unexpectedClosingTag(event.name));
      } else if (dart.nullCheck(this.currentParent).name !== event.name) {
        dart.throw(exceptions.XmlTagException.mismatchClosingTag(dart.nullCheck(this.currentParent).name, event.name));
      }
      event.attachParentEvent(this.currentParent);
      this.currentParent = dart.nullCheck(this.currentParent).parentEvent;
    }
    visitProcessingEvent(event) {
      return event.attachParentEvent(this.currentParent);
    }
    visitStartElementEvent(event) {
      event.attachParentEvent(this.currentParent);
      for (let attribute of event.attributes) {
        attribute.attachParentEvent(event);
      }
      if (!event.isSelfClosing) {
        this.currentParent = event;
      }
    }
    visitTextEvent(event) {
      return event.attachParentEvent(this.currentParent);
    }
  };
  (with_parent._XmlWithParentEventsSink.new = function(sink) {
    this.currentParent = null;
    this.sink = sink;
    with_parent._XmlWithParentEventsSink.__proto__.new.call(this);
    ;
  }).prototype = with_parent._XmlWithParentEventsSink.prototype;
  dart.addTypeTests(with_parent._XmlWithParentEventsSink);
  dart.addTypeCaches(with_parent._XmlWithParentEventsSink);
  dart.setMethodSignature(with_parent._XmlWithParentEventsSink, () => ({
    __proto__: dart.getMethods(with_parent._XmlWithParentEventsSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    visitCDATAEvent: dart.fnType(dart.void, [cdata.XmlCDATAEvent]),
    visitCommentEvent: dart.fnType(dart.void, [comment.XmlCommentEvent]),
    visitDeclarationEvent: dart.fnType(dart.void, [declaration.XmlDeclarationEvent]),
    visitDoctypeEvent: dart.fnType(dart.void, [doctype.XmlDoctypeEvent]),
    visitEndElementEvent: dart.fnType(dart.void, [end_element.XmlEndElementEvent]),
    visitProcessingEvent: dart.fnType(dart.void, [processing.XmlProcessingEvent]),
    visitStartElementEvent: dart.fnType(dart.void, [start_element.XmlStartElementEvent]),
    visitTextEvent: dart.fnType(dart.void, [text$.XmlTextEvent])
  }));
  dart.setLibraryUri(with_parent._XmlWithParentEventsSink, I[7]);
  dart.setFieldSignature(with_parent._XmlWithParentEventsSink, () => ({
    __proto__: dart.getFields(with_parent._XmlWithParentEventsSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.List$(event.XmlEvent))),
    currentParent: dart.fieldType(dart.nullable(start_element.XmlStartElementEvent))
  }));
  with_parent['XmlWithParentEventsExtension|withParentEvents'] = function XmlWithParentEventsExtension$124withParentEvents($this) {
    return $this.transform(T.ListOfXmlEvent(), C[0] || CT.C0);
  };
  with_parent['XmlWithParentEventsExtension|get#withParentEvents'] = function XmlWithParentEventsExtension$124get$35withParentEvents($this) {
    return dart.fn(() => with_parent['XmlWithParentEventsExtension|withParentEvents']($this), T.VoidToStreamOfListOfXmlEvent());
  };
  var name$0 = dart.privateName(start_element, "XmlStartElementEvent.name");
  var attributes$ = dart.privateName(start_element, "XmlStartElementEvent.attributes");
  var isSelfClosing$ = dart.privateName(start_element, "XmlStartElementEvent.isSelfClosing");
  var ListEquality__elementEquality = dart.privateName(equality, "ListEquality._elementEquality");
  const XmlEvent_XmlNamed$36$ = class XmlEvent_XmlNamed extends event.XmlEvent {};
  (XmlEvent_XmlNamed$36$.new = function() {
    XmlEvent_XmlNamed$36$.__proto__.new.call(this);
  }).prototype = XmlEvent_XmlNamed$36$.prototype;
  dart.applyMixin(XmlEvent_XmlNamed$36$, named.XmlNamed);
  start_element.XmlStartElementEvent = class XmlStartElementEvent extends XmlEvent_XmlNamed$36$ {
    get name() {
      return this[name$0];
    }
    set name(value) {
      super.name = value;
    }
    get attributes() {
      return this[attributes$];
    }
    set attributes(value) {
      super.attributes = value;
    }
    get isSelfClosing() {
      return this[isSelfClosing$];
    }
    set isSelfClosing(value) {
      super.isSelfClosing = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.ELEMENT;
    }
    accept(visitor) {
      return visitor.visitStartElementEvent(this);
    }
    get hashCode() {
      return (this.nodeType[$hashCode] ^ this.name[$hashCode] ^ this.isSelfClosing[$hashCode] ^ (C[1] || CT.C1).hash(this.attributes)) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return start_element.XmlStartElementEvent.is(other) && other.name === this.name && other.isSelfClosing === this.isSelfClosing && (C[1] || CT.C1).equals(other.attributes, this.attributes);
    }
  };
  (start_element.XmlStartElementEvent.new = function(name, attributes, isSelfClosing) {
    this[name$0] = name;
    this[attributes$] = attributes;
    this[isSelfClosing$] = isSelfClosing;
    start_element.XmlStartElementEvent.__proto__.new.call(this);
    ;
  }).prototype = start_element.XmlStartElementEvent.prototype;
  dart.addTypeTests(start_element.XmlStartElementEvent);
  dart.addTypeCaches(start_element.XmlStartElementEvent);
  dart.setMethodSignature(start_element.XmlStartElementEvent, () => ({
    __proto__: dart.getMethods(start_element.XmlStartElementEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(start_element.XmlStartElementEvent, () => ({
    __proto__: dart.getGetters(start_element.XmlStartElementEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(start_element.XmlStartElementEvent, I[9]);
  dart.setFieldSignature(start_element.XmlStartElementEvent, () => ({
    __proto__: dart.getFields(start_element.XmlStartElementEvent.__proto__),
    name: dart.finalFieldType(core.String),
    attributes: dart.finalFieldType(core.List$(event_attribute.XmlEventAttribute)),
    isSelfClosing: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(start_element.XmlStartElementEvent, ['_equals']);
  dart.defineExtensionAccessors(start_element.XmlStartElementEvent, ['hashCode']);
  var name$1 = dart.privateName(event_attribute, "XmlEventAttribute.name");
  var value$ = dart.privateName(event_attribute, "XmlEventAttribute.value");
  var attributeType$ = dart.privateName(event_attribute, "XmlEventAttribute.attributeType");
  const Object_XmlNamed$36 = class Object_XmlNamed extends core.Object {};
  (Object_XmlNamed$36.new = function() {
  }).prototype = Object_XmlNamed$36.prototype;
  dart.applyMixin(Object_XmlNamed$36, named.XmlNamed);
  const Object_XmlParented$36$ = class Object_XmlParented extends Object_XmlNamed$36 {};
  (Object_XmlParented$36$.new = function() {
    parented.XmlParented[dart.mixinNew].call(this);
  }).prototype = Object_XmlParented$36$.prototype;
  dart.applyMixin(Object_XmlParented$36$, parented.XmlParented);
  event_attribute.XmlEventAttribute = class XmlEventAttribute extends Object_XmlParented$36$ {
    get name() {
      return this[name$1];
    }
    set name(value) {
      super.name = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get attributeType() {
      return this[attributeType$];
    }
    set attributeType(value) {
      super.attributeType = value;
    }
    get hashCode() {
      return (this.name[$hashCode] ^ this.value[$hashCode]) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return event_attribute.XmlEventAttribute.is(other) && other.name === this.name && other.value === this.value && other.attributeType === this.attributeType;
    }
  };
  (event_attribute.XmlEventAttribute.new = function(name, value, attributeType) {
    this[name$1] = name;
    this[value$] = value;
    this[attributeType$] = attributeType;
    event_attribute.XmlEventAttribute.__proto__.new.call(this);
    ;
  }).prototype = event_attribute.XmlEventAttribute.prototype;
  dart.addTypeTests(event_attribute.XmlEventAttribute);
  dart.addTypeCaches(event_attribute.XmlEventAttribute);
  dart.setLibraryUri(event_attribute.XmlEventAttribute, I[10]);
  dart.setFieldSignature(event_attribute.XmlEventAttribute, () => ({
    __proto__: dart.getFields(event_attribute.XmlEventAttribute.__proto__),
    name: dart.finalFieldType(core.String),
    value: dart.finalFieldType(core.String),
    attributeType: dart.finalFieldType(attribute_type.XmlAttributeType)
  }));
  dart.defineExtensionMethods(event_attribute.XmlEventAttribute, ['_equals']);
  dart.defineExtensionAccessors(event_attribute.XmlEventAttribute, ['hashCode']);
  var attributes$0 = dart.privateName(declaration, "XmlDeclarationEvent.attributes");
  declaration.XmlDeclarationEvent = class XmlDeclarationEvent extends event.XmlEvent {
    get attributes() {
      return this[attributes$0];
    }
    set attributes(value) {
      super.attributes = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.DECLARATION;
    }
    accept(visitor) {
      return visitor.visitDeclarationEvent(this);
    }
    get hashCode() {
      return (this.nodeType[$hashCode] ^ (C[1] || CT.C1).hash(this.attributes)) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return declaration.XmlDeclarationEvent.is(other) && (C[1] || CT.C1).equals(other.attributes, this.attributes);
    }
  };
  (declaration.XmlDeclarationEvent.new = function(attributes) {
    this[attributes$0] = attributes;
    declaration.XmlDeclarationEvent.__proto__.new.call(this);
    ;
  }).prototype = declaration.XmlDeclarationEvent.prototype;
  dart.addTypeTests(declaration.XmlDeclarationEvent);
  dart.addTypeCaches(declaration.XmlDeclarationEvent);
  dart.setMethodSignature(declaration.XmlDeclarationEvent, () => ({
    __proto__: dart.getMethods(declaration.XmlDeclarationEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(declaration.XmlDeclarationEvent, () => ({
    __proto__: dart.getGetters(declaration.XmlDeclarationEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(declaration.XmlDeclarationEvent, I[11]);
  dart.setFieldSignature(declaration.XmlDeclarationEvent, () => ({
    __proto__: dart.getFields(declaration.XmlDeclarationEvent.__proto__),
    attributes: dart.finalFieldType(core.List$(event_attribute.XmlEventAttribute))
  }));
  dart.defineExtensionMethods(declaration.XmlDeclarationEvent, ['_equals']);
  dart.defineExtensionAccessors(declaration.XmlDeclarationEvent, ['hashCode']);
  var text$3 = dart.privateName(comment, "XmlCommentEvent.text");
  comment.XmlCommentEvent = class XmlCommentEvent extends event.XmlEvent {
    get text() {
      return this[text$3];
    }
    set text(value) {
      super.text = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.COMMENT;
    }
    accept(visitor) {
      return visitor.visitCommentEvent(this);
    }
    get hashCode() {
      return (this.nodeType[$hashCode] ^ this.text[$hashCode]) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return comment.XmlCommentEvent.is(other) && other.text === this.text;
    }
  };
  (comment.XmlCommentEvent.new = function(text) {
    this[text$3] = text;
    comment.XmlCommentEvent.__proto__.new.call(this);
    ;
  }).prototype = comment.XmlCommentEvent.prototype;
  dart.addTypeTests(comment.XmlCommentEvent);
  dart.addTypeCaches(comment.XmlCommentEvent);
  dart.setMethodSignature(comment.XmlCommentEvent, () => ({
    __proto__: dart.getMethods(comment.XmlCommentEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(comment.XmlCommentEvent, () => ({
    __proto__: dart.getGetters(comment.XmlCommentEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(comment.XmlCommentEvent, I[12]);
  dart.setFieldSignature(comment.XmlCommentEvent, () => ({
    __proto__: dart.getFields(comment.XmlCommentEvent.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(comment.XmlCommentEvent, ['_equals']);
  dart.defineExtensionAccessors(comment.XmlCommentEvent, ['hashCode']);
  var text$4 = dart.privateName(cdata, "XmlCDATAEvent.text");
  cdata.XmlCDATAEvent = class XmlCDATAEvent extends event.XmlEvent {
    get text() {
      return this[text$4];
    }
    set text(value) {
      super.text = value;
    }
    get nodeType() {
      return node_type.XmlNodeType.CDATA;
    }
    accept(visitor) {
      return visitor.visitCDATAEvent(this);
    }
    get hashCode() {
      return (this.nodeType[$hashCode] ^ this.text[$hashCode]) >>> 0;
    }
    _equals(other) {
      if (other == null) return false;
      return cdata.XmlCDATAEvent.is(other) && other.text === this.text;
    }
  };
  (cdata.XmlCDATAEvent.new = function(text) {
    this[text$4] = text;
    cdata.XmlCDATAEvent.__proto__.new.call(this);
    ;
  }).prototype = cdata.XmlCDATAEvent.prototype;
  dart.addTypeTests(cdata.XmlCDATAEvent);
  dart.addTypeCaches(cdata.XmlCDATAEvent);
  dart.setMethodSignature(cdata.XmlCDATAEvent, () => ({
    __proto__: dart.getMethods(cdata.XmlCDATAEvent.__proto__),
    accept: dart.fnType(dart.void, [visitor.XmlEventVisitor])
  }));
  dart.setGetterSignature(cdata.XmlCDATAEvent, () => ({
    __proto__: dart.getGetters(cdata.XmlCDATAEvent.__proto__),
    nodeType: node_type.XmlNodeType
  }));
  dart.setLibraryUri(cdata.XmlCDATAEvent, I[13]);
  dart.setFieldSignature(cdata.XmlCDATAEvent, () => ({
    __proto__: dart.getFields(cdata.XmlCDATAEvent.__proto__),
    text: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(cdata.XmlCDATAEvent, ['_equals']);
  dart.defineExtensionAccessors(cdata.XmlCDATAEvent, ['hashCode']);
  var entityMapping$ = dart.privateName(event_encoder, "XmlEventEncoder.entityMapping");
  event_encoder.XmlEventEncoder = class XmlEventEncoder extends convert.Converter$(core.List$(event.XmlEvent), core.String) {
    get entityMapping() {
      return this[entityMapping$];
    }
    set entityMapping(value) {
      super.entityMapping = value;
    }
    convert(input) {
      let t2;
      T.ListOfXmlEvent().as(input);
      let buffer = new core.StringBuffer.new();
      let sink = new (T.ConversionSinkOfString()).new(dart.bind(buffer, 'write'));
      t2 = this.startChunkedConversion(sink);
      (() => {
        t2.add(input);
        t2.close();
        return t2;
      })();
      return buffer.toString();
    }
    startChunkedConversion(sink) {
      T.SinkOfString().as(sink);
      return new event_encoder._XmlEventEncoderSink.new(sink, this.entityMapping);
    }
  };
  (event_encoder.XmlEventEncoder.new = function(opts) {
    let t2;
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    this[entityMapping$] = (t2 = entityMapping, t2 == null ? default_mapping.defaultEntityMapping : t2);
    event_encoder.XmlEventEncoder.__proto__.new.call(this);
    ;
  }).prototype = event_encoder.XmlEventEncoder.prototype;
  dart.addTypeTests(event_encoder.XmlEventEncoder);
  dart.addTypeCaches(event_encoder.XmlEventEncoder);
  dart.setMethodSignature(event_encoder.XmlEventEncoder, () => ({
    __proto__: dart.getMethods(event_encoder.XmlEventEncoder.__proto__),
    convert: dart.fnType(core.String, [dart.nullable(core.Object)]),
    startChunkedConversion: dart.fnType(convert.ChunkedConversionSink$(core.List$(event.XmlEvent)), [dart.nullable(core.Object)])
  }));
  dart.setLibraryUri(event_encoder.XmlEventEncoder, I[14]);
  dart.setFieldSignature(event_encoder.XmlEventEncoder, () => ({
    __proto__: dart.getFields(event_encoder.XmlEventEncoder.__proto__),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping)
  }));
  const ChunkedConversionSink_XmlEventVisitor$36$ = class ChunkedConversionSink_XmlEventVisitor extends convert.ChunkedConversionSink$(core.List$(event.XmlEvent)) {};
  (ChunkedConversionSink_XmlEventVisitor$36$.new = function() {
    ChunkedConversionSink_XmlEventVisitor$36$.__proto__.new.call(this);
  }).prototype = ChunkedConversionSink_XmlEventVisitor$36$.prototype;
  dart.applyMixin(ChunkedConversionSink_XmlEventVisitor$36$, visitor.XmlEventVisitor);
  event_encoder._XmlEventEncoderSink = class _XmlEventEncoderSink extends ChunkedConversionSink_XmlEventVisitor$36$ {
    add(chunk) {
      T.ListOfXmlEvent().as(chunk);
      return chunk[$forEach](dart.bind(this, 'visit'));
    }
    close() {
      return this.sink.close();
    }
    visitCDATAEvent(event) {
      this.sink.add("<![CDATA[");
      this.sink.add(event.text);
      this.sink.add("]]>");
    }
    visitCommentEvent(event) {
      this.sink.add("<!--");
      this.sink.add(event.text);
      this.sink.add("-->");
    }
    visitDeclarationEvent(event) {
      this.sink.add("<?xml");
      this.addAttributes(event.attributes);
      this.sink.add("?>");
    }
    visitDoctypeEvent(event) {
      this.sink.add("<!DOCTYPE");
      this.sink.add(" ");
      this.sink.add(event.text);
      this.sink.add(">");
    }
    visitEndElementEvent(event) {
      this.sink.add("</");
      this.sink.add(event.name);
      this.sink.add(">");
    }
    visitProcessingEvent(event) {
      this.sink.add("<?");
      this.sink.add(event.target);
      if (event.text[$isNotEmpty]) {
        this.sink.add(" ");
        this.sink.add(event.text);
      }
      this.sink.add("?>");
    }
    visitStartElementEvent(event) {
      this.sink.add("<");
      this.sink.add(event.name);
      this.addAttributes(event.attributes);
      if (event.isSelfClosing) {
        this.sink.add("/>");
      } else {
        this.sink.add(">");
      }
    }
    visitTextEvent(event) {
      this.sink.add(this.entityMapping.encodeText(event.text));
    }
    addAttributes(attributes) {
      for (let attribute of attributes) {
        this.sink.add(" ");
        this.sink.add(attribute.name);
        this.sink.add("=");
        this.sink.add(this.entityMapping.encodeAttributeValueWithQuotes(attribute.value, attribute.attributeType));
      }
    }
  };
  (event_encoder._XmlEventEncoderSink.new = function(sink, entityMapping) {
    this.sink = sink;
    this.entityMapping = entityMapping;
    event_encoder._XmlEventEncoderSink.__proto__.new.call(this);
    ;
  }).prototype = event_encoder._XmlEventEncoderSink.prototype;
  dart.addTypeTests(event_encoder._XmlEventEncoderSink);
  dart.addTypeCaches(event_encoder._XmlEventEncoderSink);
  dart.setMethodSignature(event_encoder._XmlEventEncoderSink, () => ({
    __proto__: dart.getMethods(event_encoder._XmlEventEncoderSink.__proto__),
    add: dart.fnType(dart.void, [dart.nullable(core.Object)]),
    close: dart.fnType(dart.void, []),
    visitCDATAEvent: dart.fnType(dart.void, [cdata.XmlCDATAEvent]),
    visitCommentEvent: dart.fnType(dart.void, [comment.XmlCommentEvent]),
    visitDeclarationEvent: dart.fnType(dart.void, [declaration.XmlDeclarationEvent]),
    visitDoctypeEvent: dart.fnType(dart.void, [doctype.XmlDoctypeEvent]),
    visitEndElementEvent: dart.fnType(dart.void, [end_element.XmlEndElementEvent]),
    visitProcessingEvent: dart.fnType(dart.void, [processing.XmlProcessingEvent]),
    visitStartElementEvent: dart.fnType(dart.void, [start_element.XmlStartElementEvent]),
    visitTextEvent: dart.fnType(dart.void, [text$.XmlTextEvent]),
    addAttributes: dart.fnType(dart.void, [core.List$(event_attribute.XmlEventAttribute)])
  }));
  dart.setLibraryUri(event_encoder._XmlEventEncoderSink, I[14]);
  dart.setFieldSignature(event_encoder._XmlEventEncoderSink, () => ({
    __proto__: dart.getFields(event_encoder._XmlEventEncoderSink.__proto__),
    sink: dart.finalFieldType(core.Sink$(core.String)),
    entityMapping: dart.finalFieldType(entity_mapping.XmlEntityMapping)
  }));
  event_encoder['XmlEventEncoderExtension|toXmlString'] = function XmlEventEncoderExtension$124toXmlString($this, opts) {
    let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
    return $this.transform(core.String, new event_encoder.XmlEventEncoder.new({entityMapping: entityMapping}));
  };
  event_encoder['XmlEventEncoderExtension|get#toXmlString'] = function XmlEventEncoderExtension$124get$35toXmlString($this) {
    return dart.fn(opts => {
      let entityMapping = opts && 'entityMapping' in opts ? opts.entityMapping : null;
      return event_encoder['XmlEventEncoderExtension|toXmlString']($this, {entityMapping: entityMapping});
    }, T.__ToStreamOfString());
  };
  dart.trackLibraries("packages/xml/src/xml_events/events/text.dart", {
    "package:xml/src/xml_events/events/text.dart": text$,
    "package:xml/src/xml_events/events/processing.dart": processing,
    "package:xml/src/xml_events/events/end_element.dart": end_element,
    "package:xml/src/xml_events/events/doctype.dart": doctype,
    "package:xml/src/xml_events/streams/with_parent.dart": with_parent,
    "package:xml/src/xml_events/utils/parented.dart": parented,
    "package:xml/src/xml_events/events/start_element.dart": start_element,
    "package:xml/src/xml_events/utils/named.dart": named,
    "package:xml/src/xml_events/utils/event_attribute.dart": event_attribute,
    "package:xml/src/xml_events/events/declaration.dart": declaration,
    "package:xml/src/xml_events/events/comment.dart": comment,
    "package:xml/src/xml_events/visitor.dart": visitor,
    "package:xml/src/xml_events/events/cdata.dart": cdata,
    "package:xml/src/xml_events/converters/event_encoder.dart": event_encoder,
    "package:xml/src/xml_events/event.dart": event
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["../utils/parented.dart","../event.dart","text.dart","processing.dart","../utils/named.dart","end_element.dart","doctype.dart","../streams/with_parent.dart","../visitor.dart","start_element.dart","../utils/event_attribute.dart","declaration.dart","comment.dart","cdata.dart","../converters/event_encoder.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../packages/xml/src/xml_events/events/text.dart.lib.js"}');
  // Exports:
  return {
    src__xml_events__events__text: text$,
    src__xml_events__events__processing: processing,
    src__xml_events__events__end_element: end_element,
    src__xml_events__events__doctype: doctype,
    src__xml_events__streams__with_parent: with_parent,
    src__xml_events__utils__parented: parented,
    src__xml_events__events__start_element: start_element,
    src__xml_events__utils__named: named,
    src__xml_events__utils__event_attribute: event_attribute,
    src__xml_events__events__declaration: declaration,
    src__xml_events__events__comment: comment,
    src__xml_events__visitor: visitor,
    src__xml_events__events__cdata: cdata,
    src__xml_events__converters__event_encoder: event_encoder,
    src__xml_events__event: event
  };
}));

//# sourceMappingURL=text.dart.lib.js.map
