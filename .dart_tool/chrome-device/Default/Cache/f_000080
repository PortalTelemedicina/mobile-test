define(['dart_sdk', 'packages/flutter/src/material/icon_button.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/painting/strut_style.dart', 'packages/flutter/src/painting/edge_insets.dart', 'packages/flutter/src/painting/borders.dart', 'packages/flutter/src/painting/circle_border.dart', 'packages/flutter/src/material/material_state.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/animation/curves.dart', 'packages/flutter/src/painting/stadium_border.dart', 'packages/flutter/src/rendering/proxy_box.dart', 'packages/flutter/src/widgets/icon_theme.dart', 'packages/flutter/src/foundation/change_notifier.dart', 'packages/flutter/src/painting/shape_decoration.dart', 'packages/flutter/src/rendering/paragraph.dart', 'packages/flutter/src/widgets/animated_switcher.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/gestures/tap.dart', 'packages/flutter/src/painting/matrix_utils.dart', 'packages/flutter/src/foundation/debug.dart', 'packages/flutter/src/rendering/layout_helper.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/painting/border_radius.dart', 'packages/flutter/src/widgets/icon.dart', 'packages/flutter/src/widgets/icon_data.dart'], (function load__packages__flutter__src__material__chip_dart(dart_sdk, packages__flutter__src__material__icon_button$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__painting__strut_style$46dart, packages__flutter__src__painting__edge_insets$46dart, packages__flutter__src__painting__borders$46dart, packages__flutter__src__painting__circle_border$46dart, packages__flutter__src__material__material_state$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__animation__curves$46dart, packages__flutter__src__painting__stadium_border$46dart, packages__flutter__src__rendering__proxy_box$46dart, packages__flutter__src__widgets__icon_theme$46dart, packages__flutter__src__foundation__change_notifier$46dart, packages__flutter__src__painting__shape_decoration$46dart, packages__flutter__src__rendering__paragraph$46dart, packages__flutter__src__widgets__animated_switcher$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__gestures__tap$46dart, packages__flutter__src__painting__matrix_utils$46dart, packages__flutter__src__foundation__debug$46dart, packages__flutter__src__rendering__layout_helper$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__painting__border_radius$46dart, packages__flutter__src__widgets__icon$46dart, packages__flutter__src__widgets__icon_data$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const collection = dart_sdk.collection;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const _js_helper = dart_sdk._js_helper;
  const math = dart_sdk.math;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const debug = packages__flutter__src__material__icon_button$46dart.src__material__debug;
  const theme_data = packages__flutter__src__material__icon_button$46dart.src__material__theme_data;
  const chip_theme = packages__flutter__src__material__icon_button$46dart.src__material__chip_theme;
  const tooltip$ = packages__flutter__src__material__icon_button$46dart.src__material__tooltip;
  const material_localizations = packages__flutter__src__material__icon_button$46dart.src__material__material_localizations;
  const feedback = packages__flutter__src__material__icon_button$46dart.src__material__feedback;
  const theme$ = packages__flutter__src__material__icon_button$46dart.src__material__theme;
  const material = packages__flutter__src__material__icon_button$46dart.src__material__material;
  const ink_well = packages__flutter__src__material__icon_button$46dart.src__material__ink_well;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const focus_manager = packages__flutter__src__widgets__widget_span$46dart.src__widgets__focus_manager;
  const basic = packages__flutter__src__widgets__widget_span$46dart.src__widgets__basic;
  const gesture_detector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__gesture_detector;
  const debug$ = packages__flutter__src__widgets__widget_span$46dart.src__widgets__debug;
  const media_query = packages__flutter__src__widgets__widget_span$46dart.src__widgets__media_query;
  const transitions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__transitions;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const text = packages__flutter__src__widgets__widget_span$46dart.src__widgets__text;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const edge_insets = packages__flutter__src__painting__edge_insets$46dart.src__painting__edge_insets;
  const borders = packages__flutter__src__painting__borders$46dart.src__painting__borders;
  const circle_border = packages__flutter__src__painting__circle_border$46dart.src__painting__circle_border;
  const material_state = packages__flutter__src__material__material_state$46dart.src__material__material_state;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const stadium_border = packages__flutter__src__painting__stadium_border$46dart.src__painting__stadium_border;
  const proxy_box = packages__flutter__src__rendering__proxy_box$46dart.src__rendering__proxy_box;
  const icon_theme = packages__flutter__src__widgets__icon_theme$46dart.src__widgets__icon_theme;
  const change_notifier = packages__flutter__src__foundation__change_notifier$46dart.src__foundation__change_notifier;
  const shape_decoration = packages__flutter__src__painting__shape_decoration$46dart.src__painting__shape_decoration;
  const paragraph = packages__flutter__src__rendering__paragraph$46dart.src__rendering__paragraph;
  const animated_switcher = packages__flutter__src__widgets__animated_switcher$46dart.src__widgets__animated_switcher;
  const box$ = packages__flutter__src__rendering__layer$46dart.src__rendering__box;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const layer = packages__flutter__src__rendering__layer$46dart.src__rendering__layer;
  const tap = packages__flutter__src__gestures__tap$46dart.src__gestures__tap;
  const matrix_utils = packages__flutter__src__painting__matrix_utils$46dart.src__painting__matrix_utils;
  const diagnostics = packages__flutter__src__foundation__debug$46dart.src__foundation__diagnostics;
  const layout_helper = packages__flutter__src__rendering__layout_helper$46dart.src__rendering__layout_helper;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const border_radius = packages__flutter__src__painting__border_radius$46dart.src__painting__border_radius;
  const icon = packages__flutter__src__widgets__icon$46dart.src__widgets__icon;
  const icon_data = packages__flutter__src__widgets__icon_data$46dart.src__widgets__icon_data;
  var chip$ = Object.create(dart.library);
  var $clamp = dartx.clamp;
  var $values = dartx.values;
  var $forEach = dartx.forEach;
  var $containsValue = dartx.containsValue;
  var $containsKey = dartx.containsKey;
  var $remove = dartx.remove;
  var $_get = dartx._get;
  var $_set = dartx._set;
  var $keys = dartx.keys;
  var $contains = dartx.contains;
  var $runtimeType = dartx.runtimeType;
  var $add = dartx.add;
  var $isFinite = dartx.isFinite;
  dart._checkModuleNullSafetyMode(true);
  var T = {
    LinkedHashSetOfMaterialState: () => (T.LinkedHashSetOfMaterialState = dart.constFn(collection.LinkedHashSet$(material_state.MaterialState)))(),
    StateOfStatefulWidget: () => (T.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T.StateOfStatefulWidget())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    BorderSideN: () => (T.BorderSideN = dart.constFn(dart.nullable(borders.BorderSide)))(),
    OutlinedBorderN: () => (T.OutlinedBorderN = dart.constFn(dart.nullable(borders.OutlinedBorder)))(),
    ColorN: () => (T.ColorN = dart.constFn(dart.nullable(ui.Color)))(),
    JSArrayOfListenable: () => (T.JSArrayOfListenable = dart.constFn(_interceptors.JSArray$(change_notifier.Listenable)))(),
    WidgetN: () => (T.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToContainer: () => (T.BuildContextAndWidgetNToContainer = dart.constFn(dart.fnType(container.Container, [framework.BuildContext, T.WidgetN()])))(),
    OffsetN: () => (T.OffsetN = dart.constFn(dart.nullable(ui.Offset)))(),
    BoxHitTestResultAndOffsetNTobool: () => (T.BoxHitTestResultAndOffsetNTobool = dart.constFn(dart.fnType(core.bool, [box$.BoxHitTestResult, T.OffsetN()])))(),
    LinkedMapOf_ChipSlot$Element: () => (T.LinkedMapOf_ChipSlot$Element = dart.constFn(_js_helper.LinkedMap$(chip$._ChipSlot, framework.Element)))(),
    RenderBoxN: () => (T.RenderBoxN = dart.constFn(dart.nullable(box$.RenderBox)))(),
    LinkedMapOf_ChipSlot$RenderBox: () => (T.LinkedMapOf_ChipSlot$RenderBox = dart.constFn(_js_helper.LinkedMap$(chip$._ChipSlot, box$.RenderBox)))(),
    SyncIterableOfRenderBox: () => (T.SyncIterableOfRenderBox = dart.constFn(_js_helper.SyncIterable$(box$.RenderBox)))(),
    JSArrayOfDiagnosticsNode: () => (T.JSArrayOfDiagnosticsNode = dart.constFn(_interceptors.JSArray$(diagnostics.DiagnosticsNode)))(),
    RenderBoxNAndStringTovoid: () => (T.RenderBoxNAndStringTovoid = dart.constFn(dart.fnType(dart.void, [T.RenderBoxN(), core.String])))(),
    RenderBoxAndBoxConstraintsToSize: () => (T.RenderBoxAndBoxConstraintsToSize = dart.constFn(dart.fnType(ui.Size, [box$.RenderBox, box$.BoxConstraints])))(),
    SizeAnddoubleToOffset: () => (T.SizeAnddoubleToOffset = dart.constFn(dart.fnType(ui.Offset, [ui.Size, core.double])))(),
    PaintingContextAndOffsetTovoid: () => (T.PaintingContextAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [object.PaintingContext, ui.Offset])))(),
    VoidTobool: () => (T.VoidTobool = dart.constFn(dart.fnType(core.bool, [])))()
  };
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: ui.Clip.prototype,
        [_name]: "Clip.none",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatar",
        [_Location_column]: 7,
        [_Location_line]: 669,
        [_Location_file]: null
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 7,
        [_Location_line]: 670,
        [_Location_file]: null
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelStyle",
        [_Location_column]: 7,
        [_Location_line]: 671,
        [_Location_file]: null
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelPadding",
        [_Location_column]: 7,
        [_Location_line]: 672,
        [_Location_file]: null
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "deleteIcon",
        [_Location_column]: 7,
        [_Location_line]: 673,
        [_Location_file]: null
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onDeleted",
        [_Location_column]: 7,
        [_Location_line]: 674,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "deleteIconColor",
        [_Location_column]: 7,
        [_Location_line]: 675,
        [_Location_file]: null
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "useDeleteButtonTooltip",
        [_Location_column]: 7,
        [_Location_line]: 676,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "deleteButtonTooltipMessage",
        [_Location_column]: 7,
        [_Location_line]: 677,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tapEnabled",
        [_Location_column]: 7,
        [_Location_line]: 678,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "side",
        [_Location_column]: 7,
        [_Location_line]: 679,
        [_Location_file]: null
      });
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shape",
        [_Location_column]: 7,
        [_Location_line]: 680,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipBehavior",
        [_Location_column]: 7,
        [_Location_line]: 681,
        [_Location_file]: null
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 682,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 683,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 7,
        [_Location_line]: 684,
        [_Location_file]: null
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 7,
        [_Location_line]: 685,
        [_Location_file]: null
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visualDensity",
        [_Location_column]: 7,
        [_Location_line]: 686,
        [_Location_file]: null
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "materialTapTargetSize",
        [_Location_column]: 7,
        [_Location_line]: 687,
        [_Location_file]: null
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 7,
        [_Location_line]: 688,
        [_Location_file]: null
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shadowColor",
        [_Location_column]: 7,
        [_Location_line]: 689,
        [_Location_file]: null
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isEnabled",
        [_Location_column]: 7,
        [_Location_line]: 690,
        [_Location_file]: null
      });
    },
    get C2() {
      return C[2] = dart.constList([C[3] || CT.C3, C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13, C[14] || CT.C14, C[15] || CT.C15, C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18, C[19] || CT.C19, C[20] || CT.C20, C[21] || CT.C21, C[22] || CT.C22, C[23] || CT.C23, C[24] || CT.C24], widget_inspector._Location);
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[2] || CT.C2,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 668,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: borders.BorderStyle.prototype,
        [_name$]: "BorderStyle.none",
        index: 0
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: borders.BorderSide.prototype,
        [BorderSide_style]: C[27] || CT.C27,
        [BorderSide_width]: 0,
        [BorderSide_color]: C[28] || CT.C28
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: circle_border.CircleBorder.prototype,
        [OutlinedBorder_side]: C[26] || CT.C26
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatar",
        [_Location_column]: 7,
        [_Location_line]: 870,
        [_Location_file]: null
      });
    },
    get C32() {
      return C[32] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 7,
        [_Location_line]: 871,
        [_Location_file]: null
      });
    },
    get C33() {
      return C[33] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelStyle",
        [_Location_column]: 7,
        [_Location_line]: 872,
        [_Location_file]: null
      });
    },
    get C34() {
      return C[34] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelPadding",
        [_Location_column]: 7,
        [_Location_line]: 873,
        [_Location_file]: null
      });
    },
    get C35() {
      return C[35] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "deleteIcon",
        [_Location_column]: 7,
        [_Location_line]: 874,
        [_Location_file]: null
      });
    },
    get C36() {
      return C[36] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onDeleted",
        [_Location_column]: 7,
        [_Location_line]: 875,
        [_Location_file]: null
      });
    },
    get C37() {
      return C[37] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "deleteIconColor",
        [_Location_column]: 7,
        [_Location_line]: 876,
        [_Location_file]: null
      });
    },
    get C38() {
      return C[38] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "useDeleteButtonTooltip",
        [_Location_column]: 7,
        [_Location_line]: 877,
        [_Location_file]: null
      });
    },
    get C39() {
      return C[39] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "deleteButtonTooltipMessage",
        [_Location_column]: 7,
        [_Location_line]: 878,
        [_Location_file]: null
      });
    },
    get C40() {
      return C[40] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelected",
        [_Location_column]: 7,
        [_Location_line]: 879,
        [_Location_file]: null
      });
    },
    get C41() {
      return C[41] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 7,
        [_Location_line]: 880,
        [_Location_file]: null
      });
    },
    get C42() {
      return C[42] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "pressElevation",
        [_Location_column]: 7,
        [_Location_line]: 881,
        [_Location_file]: null
      });
    },
    get C43() {
      return C[43] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selected",
        [_Location_column]: 7,
        [_Location_line]: 882,
        [_Location_file]: null
      });
    },
    get C44() {
      return C[44] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tapEnabled",
        [_Location_column]: 7,
        [_Location_line]: 883,
        [_Location_file]: null
      });
    },
    get C45() {
      return C[45] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "disabledColor",
        [_Location_column]: 7,
        [_Location_line]: 884,
        [_Location_file]: null
      });
    },
    get C46() {
      return C[46] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedColor",
        [_Location_column]: 7,
        [_Location_line]: 885,
        [_Location_file]: null
      });
    },
    get C47() {
      return C[47] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltip",
        [_Location_column]: 7,
        [_Location_line]: 886,
        [_Location_file]: null
      });
    },
    get C48() {
      return C[48] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "side",
        [_Location_column]: 7,
        [_Location_line]: 887,
        [_Location_file]: null
      });
    },
    get C49() {
      return C[49] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shape",
        [_Location_column]: 7,
        [_Location_line]: 888,
        [_Location_file]: null
      });
    },
    get C50() {
      return C[50] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipBehavior",
        [_Location_column]: 7,
        [_Location_line]: 889,
        [_Location_file]: null
      });
    },
    get C51() {
      return C[51] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 890,
        [_Location_file]: null
      });
    },
    get C52() {
      return C[52] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 891,
        [_Location_file]: null
      });
    },
    get C53() {
      return C[53] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 7,
        [_Location_line]: 892,
        [_Location_file]: null
      });
    },
    get C54() {
      return C[54] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 7,
        [_Location_line]: 893,
        [_Location_file]: null
      });
    },
    get C55() {
      return C[55] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visualDensity",
        [_Location_column]: 7,
        [_Location_line]: 894,
        [_Location_file]: null
      });
    },
    get C56() {
      return C[56] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "materialTapTargetSize",
        [_Location_column]: 7,
        [_Location_line]: 895,
        [_Location_file]: null
      });
    },
    get C57() {
      return C[57] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 7,
        [_Location_line]: 896,
        [_Location_file]: null
      });
    },
    get C58() {
      return C[58] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shadowColor",
        [_Location_column]: 7,
        [_Location_line]: 897,
        [_Location_file]: null
      });
    },
    get C59() {
      return C[59] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedShadowColor",
        [_Location_column]: 7,
        [_Location_line]: 898,
        [_Location_file]: null
      });
    },
    get C60() {
      return C[60] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showCheckmark",
        [_Location_column]: 7,
        [_Location_line]: 899,
        [_Location_file]: null
      });
    },
    get C61() {
      return C[61] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "checkmarkColor",
        [_Location_column]: 7,
        [_Location_line]: 900,
        [_Location_file]: null
      });
    },
    get C62() {
      return C[62] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isEnabled",
        [_Location_column]: 7,
        [_Location_line]: 901,
        [_Location_file]: null
      });
    },
    get C63() {
      return C[63] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatarBorder",
        [_Location_column]: 7,
        [_Location_line]: 902,
        [_Location_file]: null
      });
    },
    get C30() {
      return C[30] = dart.constList([C[31] || CT.C31, C[32] || CT.C32, C[33] || CT.C33, C[34] || CT.C34, C[35] || CT.C35, C[36] || CT.C36, C[37] || CT.C37, C[38] || CT.C38, C[39] || CT.C39, C[40] || CT.C40, C[41] || CT.C41, C[42] || CT.C42, C[43] || CT.C43, C[44] || CT.C44, C[45] || CT.C45, C[46] || CT.C46, C[47] || CT.C47, C[48] || CT.C48, C[49] || CT.C49, C[50] || CT.C50, C[51] || CT.C51, C[52] || CT.C52, C[53] || CT.C53, C[54] || CT.C54, C[55] || CT.C55, C[56] || CT.C56, C[57] || CT.C57, C[58] || CT.C58, C[59] || CT.C59, C[60] || CT.C60, C[61] || CT.C61, C[62] || CT.C62, C[63] || CT.C63], widget_inspector._Location);
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[30] || CT.C30,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 869,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C66() {
      return C[66] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatar",
        [_Location_column]: 7,
        [_Location_line]: 1061,
        [_Location_file]: null
      });
    },
    get C67() {
      return C[67] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 7,
        [_Location_line]: 1062,
        [_Location_file]: null
      });
    },
    get C68() {
      return C[68] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelStyle",
        [_Location_column]: 7,
        [_Location_line]: 1063,
        [_Location_file]: null
      });
    },
    get C69() {
      return C[69] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelPadding",
        [_Location_column]: 7,
        [_Location_line]: 1064,
        [_Location_file]: null
      });
    },
    get C70() {
      return C[70] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelected",
        [_Location_column]: 7,
        [_Location_line]: 1065,
        [_Location_file]: null
      });
    },
    get C71() {
      return C[71] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "pressElevation",
        [_Location_column]: 7,
        [_Location_line]: 1066,
        [_Location_file]: null
      });
    },
    get C72() {
      return C[72] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selected",
        [_Location_column]: 7,
        [_Location_line]: 1067,
        [_Location_file]: null
      });
    },
    get C73() {
      return C[73] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showCheckmark",
        [_Location_column]: 7,
        [_Location_line]: 1068,
        [_Location_file]: null
      });
    },
    get C74() {
      return C[74] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onDeleted",
        [_Location_column]: 7,
        [_Location_line]: 1069,
        [_Location_file]: null
      });
    },
    get C75() {
      return C[75] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltip",
        [_Location_column]: 7,
        [_Location_line]: 1070,
        [_Location_file]: null
      });
    },
    get C76() {
      return C[76] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "side",
        [_Location_column]: 7,
        [_Location_line]: 1071,
        [_Location_file]: null
      });
    },
    get C77() {
      return C[77] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shape",
        [_Location_column]: 7,
        [_Location_line]: 1072,
        [_Location_file]: null
      });
    },
    get C78() {
      return C[78] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipBehavior",
        [_Location_column]: 7,
        [_Location_line]: 1073,
        [_Location_file]: null
      });
    },
    get C79() {
      return C[79] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 1074,
        [_Location_file]: null
      });
    },
    get C80() {
      return C[80] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 1075,
        [_Location_file]: null
      });
    },
    get C81() {
      return C[81] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "disabledColor",
        [_Location_column]: 7,
        [_Location_line]: 1076,
        [_Location_file]: null
      });
    },
    get C82() {
      return C[82] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedColor",
        [_Location_column]: 7,
        [_Location_line]: 1077,
        [_Location_file]: null
      });
    },
    get C83() {
      return C[83] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 7,
        [_Location_line]: 1078,
        [_Location_file]: null
      });
    },
    get C84() {
      return C[84] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 7,
        [_Location_line]: 1079,
        [_Location_file]: null
      });
    },
    get C85() {
      return C[85] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visualDensity",
        [_Location_column]: 7,
        [_Location_line]: 1080,
        [_Location_file]: null
      });
    },
    get C86() {
      return C[86] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isEnabled",
        [_Location_column]: 7,
        [_Location_line]: 1081,
        [_Location_file]: null
      });
    },
    get C87() {
      return C[87] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "materialTapTargetSize",
        [_Location_column]: 7,
        [_Location_line]: 1082,
        [_Location_file]: null
      });
    },
    get C88() {
      return C[88] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 7,
        [_Location_line]: 1083,
        [_Location_file]: null
      });
    },
    get C89() {
      return C[89] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shadowColor",
        [_Location_column]: 7,
        [_Location_line]: 1084,
        [_Location_file]: null
      });
    },
    get C90() {
      return C[90] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedShadowColor",
        [_Location_column]: 7,
        [_Location_line]: 1085,
        [_Location_file]: null
      });
    },
    get C91() {
      return C[91] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatarBorder",
        [_Location_column]: 7,
        [_Location_line]: 1086,
        [_Location_file]: null
      });
    },
    get C65() {
      return C[65] = dart.constList([C[66] || CT.C66, C[67] || CT.C67, C[68] || CT.C68, C[69] || CT.C69, C[70] || CT.C70, C[71] || CT.C71, C[72] || CT.C72, C[73] || CT.C73, C[74] || CT.C74, C[75] || CT.C75, C[76] || CT.C76, C[77] || CT.C77, C[78] || CT.C78, C[79] || CT.C79, C[80] || CT.C80, C[81] || CT.C81, C[82] || CT.C82, C[83] || CT.C83, C[84] || CT.C84, C[85] || CT.C85, C[86] || CT.C86, C[87] || CT.C87, C[88] || CT.C88, C[89] || CT.C89, C[90] || CT.C90, C[91] || CT.C91], widget_inspector._Location);
    },
    get C64() {
      return C[64] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[65] || CT.C65,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1060,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C94() {
      return C[94] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatar",
        [_Location_column]: 7,
        [_Location_line]: 1283,
        [_Location_file]: null
      });
    },
    get C95() {
      return C[95] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 7,
        [_Location_line]: 1284,
        [_Location_file]: null
      });
    },
    get C96() {
      return C[96] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelStyle",
        [_Location_column]: 7,
        [_Location_line]: 1285,
        [_Location_file]: null
      });
    },
    get C97() {
      return C[97] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelPadding",
        [_Location_column]: 7,
        [_Location_line]: 1286,
        [_Location_file]: null
      });
    },
    get C98() {
      return C[98] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onSelected",
        [_Location_column]: 7,
        [_Location_line]: 1287,
        [_Location_file]: null
      });
    },
    get C99() {
      return C[99] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "pressElevation",
        [_Location_column]: 7,
        [_Location_line]: 1288,
        [_Location_file]: null
      });
    },
    get C100() {
      return C[100] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selected",
        [_Location_column]: 7,
        [_Location_line]: 1289,
        [_Location_file]: null
      });
    },
    get C101() {
      return C[101] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltip",
        [_Location_column]: 7,
        [_Location_line]: 1290,
        [_Location_file]: null
      });
    },
    get C102() {
      return C[102] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "side",
        [_Location_column]: 7,
        [_Location_line]: 1291,
        [_Location_file]: null
      });
    },
    get C103() {
      return C[103] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shape",
        [_Location_column]: 7,
        [_Location_line]: 1292,
        [_Location_file]: null
      });
    },
    get C104() {
      return C[104] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipBehavior",
        [_Location_column]: 7,
        [_Location_line]: 1293,
        [_Location_file]: null
      });
    },
    get C105() {
      return C[105] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 1294,
        [_Location_file]: null
      });
    },
    get C106() {
      return C[106] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 1295,
        [_Location_file]: null
      });
    },
    get C107() {
      return C[107] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 7,
        [_Location_line]: 1296,
        [_Location_file]: null
      });
    },
    get C108() {
      return C[108] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "disabledColor",
        [_Location_column]: 7,
        [_Location_line]: 1297,
        [_Location_file]: null
      });
    },
    get C109() {
      return C[109] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedColor",
        [_Location_column]: 7,
        [_Location_line]: 1298,
        [_Location_file]: null
      });
    },
    get C110() {
      return C[110] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 7,
        [_Location_line]: 1299,
        [_Location_file]: null
      });
    },
    get C111() {
      return C[111] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visualDensity",
        [_Location_column]: 7,
        [_Location_line]: 1300,
        [_Location_file]: null
      });
    },
    get C112() {
      return C[112] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isEnabled",
        [_Location_column]: 7,
        [_Location_line]: 1301,
        [_Location_file]: null
      });
    },
    get C113() {
      return C[113] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "materialTapTargetSize",
        [_Location_column]: 7,
        [_Location_line]: 1302,
        [_Location_file]: null
      });
    },
    get C114() {
      return C[114] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 7,
        [_Location_line]: 1303,
        [_Location_file]: null
      });
    },
    get C115() {
      return C[115] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shadowColor",
        [_Location_column]: 7,
        [_Location_line]: 1304,
        [_Location_file]: null
      });
    },
    get C116() {
      return C[116] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selectedShadowColor",
        [_Location_column]: 7,
        [_Location_line]: 1305,
        [_Location_file]: null
      });
    },
    get C117() {
      return C[117] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "showCheckmark",
        [_Location_column]: 7,
        [_Location_line]: 1306,
        [_Location_file]: null
      });
    },
    get C118() {
      return C[118] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "checkmarkColor",
        [_Location_column]: 7,
        [_Location_line]: 1307,
        [_Location_file]: null
      });
    },
    get C119() {
      return C[119] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatarBorder",
        [_Location_column]: 7,
        [_Location_line]: 1308,
        [_Location_file]: null
      });
    },
    get C93() {
      return C[93] = dart.constList([C[94] || CT.C94, C[95] || CT.C95, C[96] || CT.C96, C[97] || CT.C97, C[98] || CT.C98, C[99] || CT.C99, C[100] || CT.C100, C[101] || CT.C101, C[102] || CT.C102, C[103] || CT.C103, C[104] || CT.C104, C[105] || CT.C105, C[106] || CT.C106, C[107] || CT.C107, C[108] || CT.C108, C[109] || CT.C109, C[110] || CT.C110, C[111] || CT.C111, C[112] || CT.C112, C[113] || CT.C113, C[114] || CT.C114, C[115] || CT.C115, C[116] || CT.C116, C[117] || CT.C117, C[118] || CT.C118, C[119] || CT.C119], widget_inspector._Location);
    },
    get C92() {
      return C[92] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[93] || CT.C93,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1282,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C122() {
      return C[122] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatar",
        [_Location_column]: 7,
        [_Location_line]: 1439,
        [_Location_file]: null
      });
    },
    get C123() {
      return C[123] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "label",
        [_Location_column]: 7,
        [_Location_line]: 1440,
        [_Location_file]: null
      });
    },
    get C124() {
      return C[124] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onPressed",
        [_Location_column]: 7,
        [_Location_line]: 1441,
        [_Location_file]: null
      });
    },
    get C125() {
      return C[125] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "pressElevation",
        [_Location_column]: 7,
        [_Location_line]: 1442,
        [_Location_file]: null
      });
    },
    get C126() {
      return C[126] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltip",
        [_Location_column]: 7,
        [_Location_line]: 1443,
        [_Location_file]: null
      });
    },
    get C127() {
      return C[127] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelStyle",
        [_Location_column]: 7,
        [_Location_line]: 1444,
        [_Location_file]: null
      });
    },
    get C128() {
      return C[128] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "backgroundColor",
        [_Location_column]: 7,
        [_Location_line]: 1445,
        [_Location_file]: null
      });
    },
    get C129() {
      return C[129] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "side",
        [_Location_column]: 7,
        [_Location_line]: 1446,
        [_Location_file]: null
      });
    },
    get C130() {
      return C[130] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shape",
        [_Location_column]: 7,
        [_Location_line]: 1447,
        [_Location_file]: null
      });
    },
    get C131() {
      return C[131] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipBehavior",
        [_Location_column]: 7,
        [_Location_line]: 1448,
        [_Location_file]: null
      });
    },
    get C132() {
      return C[132] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 7,
        [_Location_line]: 1449,
        [_Location_file]: null
      });
    },
    get C133() {
      return C[133] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 7,
        [_Location_line]: 1450,
        [_Location_file]: null
      });
    },
    get C134() {
      return C[134] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "padding",
        [_Location_column]: 7,
        [_Location_line]: 1451,
        [_Location_file]: null
      });
    },
    get C135() {
      return C[135] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "visualDensity",
        [_Location_column]: 7,
        [_Location_line]: 1452,
        [_Location_file]: null
      });
    },
    get C136() {
      return C[136] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "labelPadding",
        [_Location_column]: 7,
        [_Location_line]: 1453,
        [_Location_file]: null
      });
    },
    get C137() {
      return C[137] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isEnabled",
        [_Location_column]: 7,
        [_Location_line]: 1454,
        [_Location_file]: null
      });
    },
    get C138() {
      return C[138] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "materialTapTargetSize",
        [_Location_column]: 7,
        [_Location_line]: 1455,
        [_Location_file]: null
      });
    },
    get C139() {
      return C[139] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 7,
        [_Location_line]: 1456,
        [_Location_file]: null
      });
    },
    get C140() {
      return C[140] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shadowColor",
        [_Location_column]: 7,
        [_Location_line]: 1457,
        [_Location_file]: null
      });
    },
    get C121() {
      return C[121] = dart.constList([C[122] || CT.C122, C[123] || CT.C123, C[124] || CT.C124, C[125] || CT.C125, C[126] || CT.C126, C[127] || CT.C127, C[128] || CT.C128, C[129] || CT.C129, C[130] || CT.C130, C[131] || CT.C131, C[132] || CT.C132, C[133] || CT.C133, C[134] || CT.C134, C[135] || CT.C135, C[136] || CT.C136, C[137] || CT.C137, C[138] || CT.C138, C[139] || CT.C139, C[140] || CT.C140], widget_inspector._Location);
    },
    get C120() {
      return C[120] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[121] || CT.C121,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1438,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C141() {
      return C[141] = dart.const({
        __proto__: stadium_border.StadiumBorder.prototype,
        [OutlinedBorder_side]: C[26] || CT.C26
      });
    },
    get C144() {
      return C[144] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "message",
        [_Location_column]: 7,
        [_Location_line]: 1862,
        [_Location_file]: null
      });
    },
    get C145() {
      return C[145] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1863,
        [_Location_file]: null
      });
    },
    get C143() {
      return C[143] = dart.constList([C[144] || CT.C144, C[145] || CT.C145], widget_inspector._Location);
    },
    get C142() {
      return C[142] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[143] || CT.C143,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1861,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C148() {
      return C[148] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "data",
        [_Location_column]: 13,
        [_Location_line]: 1892,
        [_Location_file]: null
      });
    },
    get C149() {
      return C[149] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 13,
        [_Location_line]: 1895,
        [_Location_file]: null
      });
    },
    get C147() {
      return C[147] = dart.constList([C[148] || CT.C148, C[149] || CT.C149], widget_inspector._Location);
    },
    get C146() {
      return C[146] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[147] || CT.C147,
        [_Location_name]: null,
        [_Location_column]: 18,
        [_Location_line]: 1891,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C152() {
      return C[152] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "key",
        [_Location_column]: 11,
        [_Location_line]: 1883,
        [_Location_file]: null
      });
    },
    get C153() {
      return C[153] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "behavior",
        [_Location_column]: 11,
        [_Location_line]: 1884,
        [_Location_file]: null
      });
    },
    get C154() {
      return C[154] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 11,
        [_Location_line]: 1885,
        [_Location_file]: null
      });
    },
    get C155() {
      return C[155] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 1891,
        [_Location_file]: null
      });
    },
    get C151() {
      return C[151] = dart.constList([C[152] || CT.C152, C[153] || CT.C153, C[154] || CT.C154, C[155] || CT.C155], widget_inspector._Location);
    },
    get C150() {
      return C[150] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[151] || CT.C151,
        [_Location_name]: null,
        [_Location_column]: 9,
        [_Location_line]: 1882,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C158() {
      return C[158] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "container",
        [_Location_column]: 7,
        [_Location_line]: 1877,
        [_Location_file]: null
      });
    },
    get C159() {
      return C[159] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "button",
        [_Location_column]: 7,
        [_Location_line]: 1878,
        [_Location_file]: null
      });
    },
    get C160() {
      return C[160] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1879,
        [_Location_file]: null
      });
    },
    get C157() {
      return C[157] = dart.constList([C[158] || CT.C158, C[159] || CT.C159, C[160] || CT.C160], widget_inspector._Location);
    },
    get C156() {
      return C[156] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[157] || CT.C157,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 1876,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C161() {
      return C[161] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 8,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 8
      });
    },
    get C162() {
      return C[162] = dart.const({
        __proto__: edge_insets.EdgeInsets.prototype,
        [EdgeInsets_bottom]: 0,
        [EdgeInsets_right]: 4,
        [EdgeInsets_top]: 0,
        [EdgeInsets_left]: 4
      });
    },
    get C165() {
      return C[165] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "decoration",
        [_Location_column]: 15,
        [_Location_line]: 1964,
        [_Location_file]: null
      });
    },
    get C166() {
      return C[166] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 15,
        [_Location_line]: 1968,
        [_Location_file]: null
      });
    },
    get C164() {
      return C[164] = dart.constList([C[165] || CT.C165, C[166] || CT.C166], widget_inspector._Location);
    },
    get C163() {
      return C[163] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[164] || CT.C164,
        [_Location_name]: null,
        [_Location_column]: 20,
        [_Location_line]: 1963,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C169() {
      return C[169] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "overflow",
        [_Location_column]: 19,
        [_Location_line]: 1977,
        [_Location_file]: null
      });
    },
    get C170() {
      return C[170] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "textAlign",
        [_Location_column]: 19,
        [_Location_line]: 1978,
        [_Location_file]: null
      });
    },
    get C171() {
      return C[171] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "maxLines",
        [_Location_column]: 19,
        [_Location_line]: 1979,
        [_Location_file]: null
      });
    },
    get C172() {
      return C[172] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "softWrap",
        [_Location_column]: 19,
        [_Location_line]: 1980,
        [_Location_file]: null
      });
    },
    get C173() {
      return C[173] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "style",
        [_Location_column]: 19,
        [_Location_line]: 1981,
        [_Location_file]: null
      });
    },
    get C174() {
      return C[174] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 19,
        [_Location_line]: 1982,
        [_Location_file]: null
      });
    },
    get C168() {
      return C[168] = dart.constList([C[169] || CT.C169, C[170] || CT.C170, C[171] || CT.C171, C[172] || CT.C172, C[173] || CT.C173, C[174] || CT.C174], widget_inspector._Location);
    },
    get C167() {
      return C[167] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[168] || CT.C168,
        [_Location_name]: null,
        [_Location_column]: 24,
        [_Location_line]: 1976,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C177() {
      return C[177] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 19,
        [_Location_line]: 1985,
        [_Location_file]: null
      });
    },
    get C178() {
      return C[178] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "duration",
        [_Location_column]: 19,
        [_Location_line]: 1986,
        [_Location_file]: null
      });
    },
    get C179() {
      return C[179] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "switchInCurve",
        [_Location_column]: 19,
        [_Location_line]: 1987,
        [_Location_file]: null
      });
    },
    get C176() {
      return C[176] = dart.constList([C[177] || CT.C177, C[178] || CT.C178, C[179] || CT.C179], widget_inspector._Location);
    },
    get C175() {
      return C[175] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[176] || CT.C176,
        [_Location_name]: null,
        [_Location_column]: 25,
        [_Location_line]: 1984,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C182() {
      return C[182] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 19,
        [_Location_line]: 1990,
        [_Location_file]: null
      });
    },
    get C183() {
      return C[183] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "duration",
        [_Location_column]: 19,
        [_Location_line]: 1991,
        [_Location_file]: null
      });
    },
    get C184() {
      return C[184] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "switchInCurve",
        [_Location_column]: 19,
        [_Location_line]: 1992,
        [_Location_file]: null
      });
    },
    get C181() {
      return C[181] = dart.constList([C[182] || CT.C182, C[183] || CT.C183, C[184] || CT.C184], widget_inspector._Location);
    },
    get C180() {
      return C[180] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[181] || CT.C181,
        [_Location_name]: null,
        [_Location_column]: 29,
        [_Location_line]: 1989,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C187() {
      return C[187] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "theme",
        [_Location_column]: 15,
        [_Location_line]: 1975,
        [_Location_file]: null
      });
    },
    get C188() {
      return C[188] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "value",
        [_Location_column]: 15,
        [_Location_line]: 2003,
        [_Location_file]: null
      });
    },
    get C189() {
      return C[189] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "checkmarkAnimation",
        [_Location_column]: 15,
        [_Location_line]: 2004,
        [_Location_file]: null
      });
    },
    get C190() {
      return C[190] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enableAnimation",
        [_Location_column]: 15,
        [_Location_line]: 2005,
        [_Location_file]: null
      });
    },
    get C191() {
      return C[191] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatarDrawerAnimation",
        [_Location_column]: 15,
        [_Location_line]: 2006,
        [_Location_file]: null
      });
    },
    get C192() {
      return C[192] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "deleteDrawerAnimation",
        [_Location_column]: 15,
        [_Location_line]: 2007,
        [_Location_file]: null
      });
    },
    get C193() {
      return C[193] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "isEnabled",
        [_Location_column]: 15,
        [_Location_line]: 2008,
        [_Location_file]: null
      });
    },
    get C194() {
      return C[194] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "avatarBorder",
        [_Location_column]: 15,
        [_Location_line]: 2009,
        [_Location_file]: null
      });
    },
    get C186() {
      return C[186] = dart.constList([C[187] || CT.C187, C[188] || CT.C188, C[189] || CT.C189, C[190] || CT.C190, C[191] || CT.C191, C[192] || CT.C192, C[193] || CT.C193, C[194] || CT.C194], widget_inspector._Location);
    },
    get C185() {
      return C[185] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[186] || CT.C186,
        [_Location_name]: null,
        [_Location_column]: 13,
        [_Location_line]: 1974,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C197() {
      return C[197] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animation",
        [_Location_column]: 11,
        [_Location_line]: 1961,
        [_Location_file]: null
      });
    },
    get C198() {
      return C[198] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 11,
        [_Location_line]: 1962,
        [_Location_file]: null
      });
    },
    get C199() {
      return C[199] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 11,
        [_Location_line]: 1971,
        [_Location_file]: null
      });
    },
    get C196() {
      return C[196] = dart.constList([C[197] || CT.C197, C[198] || CT.C198, C[199] || CT.C199], widget_inspector._Location);
    },
    get C195() {
      return C[195] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[196] || CT.C196,
        [_Location_name]: null,
        [_Location_column]: 16,
        [_Location_line]: 1960,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C202() {
      return C[202] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onFocusChange",
        [_Location_column]: 9,
        [_Location_line]: 1946,
        [_Location_file]: null
      });
    },
    get C203() {
      return C[203] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "focusNode",
        [_Location_column]: 9,
        [_Location_line]: 1947,
        [_Location_file]: null
      });
    },
    get C204() {
      return C[204] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "autofocus",
        [_Location_column]: 9,
        [_Location_line]: 1948,
        [_Location_file]: null
      });
    },
    get C205() {
      return C[205] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "canRequestFocus",
        [_Location_column]: 9,
        [_Location_line]: 1949,
        [_Location_file]: null
      });
    },
    get C206() {
      return C[206] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTap",
        [_Location_column]: 9,
        [_Location_line]: 1950,
        [_Location_file]: null
      });
    },
    get C207() {
      return C[207] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapDown",
        [_Location_column]: 9,
        [_Location_line]: 1951,
        [_Location_file]: null
      });
    },
    get C208() {
      return C[208] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onTapCancel",
        [_Location_column]: 9,
        [_Location_line]: 1952,
        [_Location_file]: null
      });
    },
    get C209() {
      return C[209] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "onHover",
        [_Location_column]: 9,
        [_Location_line]: 1953,
        [_Location_file]: null
      });
    },
    get C210() {
      return C[210] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "splashFactory",
        [_Location_column]: 9,
        [_Location_line]: 1954,
        [_Location_file]: null
      });
    },
    get C211() {
      return C[211] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "customBorder",
        [_Location_column]: 9,
        [_Location_line]: 1959,
        [_Location_file]: null
      });
    },
    get C212() {
      return C[212] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 1960,
        [_Location_file]: null
      });
    },
    get C201() {
      return C[201] = dart.constList([C[202] || CT.C202, C[203] || CT.C203, C[204] || CT.C204, C[205] || CT.C205, C[206] || CT.C206, C[207] || CT.C207, C[208] || CT.C208, C[209] || CT.C209, C[210] || CT.C210, C[211] || CT.C211, C[212] || CT.C212], widget_inspector._Location);
    },
    get C200() {
      return C[200] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[201] || CT.C201,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 1945,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C215() {
      return C[215] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "elevation",
        [_Location_column]: 7,
        [_Location_line]: 1940,
        [_Location_file]: null
      });
    },
    get C216() {
      return C[216] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shadowColor",
        [_Location_column]: 7,
        [_Location_line]: 1941,
        [_Location_file]: null
      });
    },
    get C217() {
      return C[217] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animationDuration",
        [_Location_column]: 7,
        [_Location_line]: 1942,
        [_Location_file]: null
      });
    },
    get C218() {
      return C[218] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "shape",
        [_Location_column]: 7,
        [_Location_line]: 1943,
        [_Location_file]: null
      });
    },
    get C219() {
      return C[219] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "clipBehavior",
        [_Location_column]: 7,
        [_Location_line]: 1944,
        [_Location_file]: null
      });
    },
    get C220() {
      return C[220] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 1945,
        [_Location_file]: null
      });
    },
    get C214() {
      return C[214] = dart.constList([C[215] || CT.C215, C[216] || CT.C216, C[217] || CT.C217, C[218] || CT.C218, C[219] || CT.C219, C[220] || CT.C220], widget_inspector._Location);
    },
    get C213() {
      return C[213] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[214] || CT.C214,
        [_Location_name]: null,
        [_Location_column]: 21,
        [_Location_line]: 1939,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C221() {
      return C[221] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_name$0]: "MaterialTapTargetSize.padded",
        index: 0
      });
    },
    get C222() {
      return C[222] = dart.const({
        __proto__: box$.BoxConstraints.prototype,
        [BoxConstraints_maxHeight]: 1 / 0,
        [BoxConstraints_minHeight]: 0,
        [BoxConstraints_maxWidth]: 1 / 0,
        [BoxConstraints_minWidth]: 0
      });
    },
    get C223() {
      return C[223] = dart.const({
        __proto__: theme_data.MaterialTapTargetSize.prototype,
        [_name$0]: "MaterialTapTargetSize.shrinkWrap",
        index: 1
      });
    },
    get C226() {
      return C[226] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 9,
        [_Location_line]: 2031,
        [_Location_file]: null
      });
    },
    get C227() {
      return C[227] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "widthFactor",
        [_Location_column]: 9,
        [_Location_line]: 2032,
        [_Location_file]: null
      });
    },
    get C228() {
      return C[228] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "heightFactor",
        [_Location_column]: 9,
        [_Location_line]: 2033,
        [_Location_file]: null
      });
    },
    get C225() {
      return C[225] = dart.constList([C[226] || CT.C226, C[227] || CT.C227, C[228] || CT.C228], widget_inspector._Location);
    },
    get C224() {
      return C[224] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[225] || CT.C225,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 2030,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C231() {
      return C[231] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "constraints",
        [_Location_column]: 7,
        [_Location_line]: 2029,
        [_Location_file]: null
      });
    },
    get C232() {
      return C[232] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 2030,
        [_Location_file]: null
      });
    },
    get C230() {
      return C[230] = dart.constList([C[231] || CT.C231, C[232] || CT.C232], widget_inspector._Location);
    },
    get C229() {
      return C[229] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[230] || CT.C230,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 2028,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C235() {
      return C[235] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "button",
        [_Location_column]: 7,
        [_Location_line]: 2037,
        [_Location_file]: null
      });
    },
    get C236() {
      return C[236] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "container",
        [_Location_column]: 7,
        [_Location_line]: 2038,
        [_Location_file]: null
      });
    },
    get C237() {
      return C[237] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "selected",
        [_Location_column]: 7,
        [_Location_line]: 2039,
        [_Location_file]: null
      });
    },
    get C238() {
      return C[238] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "enabled",
        [_Location_column]: 7,
        [_Location_line]: 2040,
        [_Location_file]: null
      });
    },
    get C239() {
      return C[239] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 2041,
        [_Location_file]: null
      });
    },
    get C234() {
      return C[234] = dart.constList([C[235] || CT.C235, C[236] || CT.C236, C[237] || CT.C237, C[238] || CT.C238, C[239] || CT.C239], widget_inspector._Location);
    },
    get C233() {
      return C[233] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[234] || CT.C234,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 2036,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C240() {
      return C[240] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 75000
      });
    },
    get C241() {
      return C[241] = dart.const({
        __proto__: chip$._ChipSlot.prototype,
        [_name$1]: "_ChipSlot.label",
        index: 0
      });
    },
    get C242() {
      return C[242] = dart.const({
        __proto__: chip$._ChipSlot.prototype,
        [_name$1]: "_ChipSlot.avatar",
        index: 1
      });
    },
    get C243() {
      return C[243] = dart.const({
        __proto__: chip$._ChipSlot.prototype,
        [_name$1]: "_ChipSlot.deleteIcon",
        index: 2
      });
    },
    get C244() {
      return C[244] = dart.constList([C[241] || CT.C241, C[242] || CT.C242, C[243] || CT.C243], chip$._ChipSlot);
    },
    get C245() {
      return C[245] = dart.fn(layout_helper.ChildLayoutHelper.layoutChild, T.RenderBoxAndBoxConstraintsToSize());
    },
    get C246() {
      return C[246] = dart.fn(layout_helper.ChildLayoutHelper.dryLayoutChild, T.RenderBoxAndBoxConstraintsToSize());
    },
    get C247() {
      return C[247] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.rtl",
        index: 0
      });
    },
    get C248() {
      return C[248] = dart.const({
        __proto__: ui.TextDirection.prototype,
        [_name]: "TextDirection.ltr",
        index: 1
      });
    },
    get C249() {
      return C[249] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.light",
        index: 1
      });
    },
    get C250() {
      return C[250] = dart.const({
        __proto__: ui.Brightness.prototype,
        [_name]: "Brightness.dark",
        index: 0
      });
    },
    get C251() {
      return C[251] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4286578688.0
      });
    },
    get C252() {
      return C[252] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278222848.0
      });
    },
    get C253() {
      return C[253] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 195000
      });
    },
    get C254() {
      return C[254] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 150000
      });
    },
    get C255() {
      return C[255] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 50000
      });
    },
    get C256() {
      return C[256] = dart.const({
        __proto__: core.Duration.prototype,
        [Duration__duration]: 100000
      });
    },
    get C257() {
      return C[257] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 1612257561
      });
    },
    get C261() {
      return C[261] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "icon",
        [_Location_column]: 45,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C262() {
      return C[262] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "size",
        [_Location_column]: 53,
        [_Location_line]: 40,
        [_Location_file]: null
      });
    },
    get C260() {
      return C[260] = dart.constList([C[261] || CT.C261, C[262] || CT.C262], widget_inspector._Location);
    },
    get C259() {
      return C[259] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[260] || CT.C260,
        [_Location_name]: null,
        [_Location_column]: 34,
        [_Location_line]: 40,
        [_Location_file]: "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
      });
    },
    get C263() {
      return C[263] = dart.const({
        __proto__: icon_data.IconData.prototype,
        [IconData_matchTextDirection]: false,
        [IconData_fontPackage]: null,
        [IconData_fontFamily]: "MaterialIcons",
        [IconData_codePoint]: 57657
      });
    },
    get C258() {
      return C[258] = dart.const({
        __proto__: icon.Icon.prototype,
        [Widget__location]: C[259] || CT.C259,
        [Widget_key]: null,
        [Icon_textDirection]: null,
        [Icon_semanticLabel]: null,
        [Icon_color]: null,
        [Icon_size]: 18,
        [Icon_icon]: C[263] || CT.C263
      });
    }
  }, false);
  var C = Array(264).fill(void 0);
  var I = [
    "package:flutter/src/material/chip.dart",
    "file:///C:/flutter/packages/flutter/lib/src/material/chip.dart"
  ];
  chip$.ChipAttributes = class ChipAttributes extends core.Object {};
  (chip$.ChipAttributes.__ = function() {
    ;
  }).prototype = chip$.ChipAttributes.prototype;
  dart.addTypeTests(chip$.ChipAttributes);
  dart.addTypeCaches(chip$.ChipAttributes);
  dart.setLibraryUri(chip$.ChipAttributes, I[0]);
  chip$.DeletableChipAttributes = class DeletableChipAttributes extends core.Object {};
  (chip$.DeletableChipAttributes.__ = function() {
    ;
  }).prototype = chip$.DeletableChipAttributes.prototype;
  dart.addTypeTests(chip$.DeletableChipAttributes);
  dart.addTypeCaches(chip$.DeletableChipAttributes);
  dart.setLibraryUri(chip$.DeletableChipAttributes, I[0]);
  chip$.CheckmarkableChipAttributes = class CheckmarkableChipAttributes extends core.Object {};
  (chip$.CheckmarkableChipAttributes.__ = function() {
    ;
  }).prototype = chip$.CheckmarkableChipAttributes.prototype;
  dart.addTypeTests(chip$.CheckmarkableChipAttributes);
  dart.addTypeCaches(chip$.CheckmarkableChipAttributes);
  dart.setLibraryUri(chip$.CheckmarkableChipAttributes, I[0]);
  chip$.SelectableChipAttributes = class SelectableChipAttributes extends core.Object {};
  (chip$.SelectableChipAttributes.__ = function() {
    ;
  }).prototype = chip$.SelectableChipAttributes.prototype;
  dart.addTypeTests(chip$.SelectableChipAttributes);
  dart.addTypeCaches(chip$.SelectableChipAttributes);
  dart.setLibraryUri(chip$.SelectableChipAttributes, I[0]);
  chip$.DisabledChipAttributes = class DisabledChipAttributes extends core.Object {};
  (chip$.DisabledChipAttributes.__ = function() {
    ;
  }).prototype = chip$.DisabledChipAttributes.prototype;
  dart.addTypeTests(chip$.DisabledChipAttributes);
  dart.addTypeCaches(chip$.DisabledChipAttributes);
  dart.setLibraryUri(chip$.DisabledChipAttributes, I[0]);
  chip$.TappableChipAttributes = class TappableChipAttributes extends core.Object {};
  (chip$.TappableChipAttributes.__ = function() {
    ;
  }).prototype = chip$.TappableChipAttributes.prototype;
  dart.addTypeTests(chip$.TappableChipAttributes);
  dart.addTypeCaches(chip$.TappableChipAttributes);
  dart.setLibraryUri(chip$.TappableChipAttributes, I[0]);
  var avatar$ = dart.privateName(chip$, "Chip.avatar");
  var label$ = dart.privateName(chip$, "Chip.label");
  var labelStyle$ = dart.privateName(chip$, "Chip.labelStyle");
  var labelPadding$ = dart.privateName(chip$, "Chip.labelPadding");
  var side$ = dart.privateName(chip$, "Chip.side");
  var shape$ = dart.privateName(chip$, "Chip.shape");
  var clipBehavior$ = dart.privateName(chip$, "Chip.clipBehavior");
  var focusNode$ = dart.privateName(chip$, "Chip.focusNode");
  var autofocus$ = dart.privateName(chip$, "Chip.autofocus");
  var backgroundColor$ = dart.privateName(chip$, "Chip.backgroundColor");
  var padding$ = dart.privateName(chip$, "Chip.padding");
  var visualDensity$ = dart.privateName(chip$, "Chip.visualDensity");
  var deleteIcon$ = dart.privateName(chip$, "Chip.deleteIcon");
  var onDeleted$ = dart.privateName(chip$, "Chip.onDeleted");
  var deleteIconColor$ = dart.privateName(chip$, "Chip.deleteIconColor");
  var useDeleteButtonTooltip$ = dart.privateName(chip$, "Chip.useDeleteButtonTooltip");
  var deleteButtonTooltipMessage$ = dart.privateName(chip$, "Chip.deleteButtonTooltipMessage");
  var materialTapTargetSize$ = dart.privateName(chip$, "Chip.materialTapTargetSize");
  var elevation$ = dart.privateName(chip$, "Chip.elevation");
  var shadowColor$ = dart.privateName(chip$, "Chip.shadowColor");
  var _name = dart.privateName(ui, "_name");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  chip$.Chip = class Chip extends framework.StatelessWidget {
    get avatar() {
      return this[avatar$];
    }
    set avatar(value) {
      super.avatar = value;
    }
    get label() {
      return this[label$];
    }
    set label(value) {
      super.label = value;
    }
    get labelStyle() {
      return this[labelStyle$];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    get labelPadding() {
      return this[labelPadding$];
    }
    set labelPadding(value) {
      super.labelPadding = value;
    }
    get side() {
      return this[side$];
    }
    set side(value) {
      super.side = value;
    }
    get shape() {
      return this[shape$];
    }
    set shape(value) {
      super.shape = value;
    }
    get clipBehavior() {
      return this[clipBehavior$];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get focusNode() {
      return this[focusNode$];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get autofocus() {
      return this[autofocus$];
    }
    set autofocus(value) {
      super.autofocus = value;
    }
    get backgroundColor() {
      return this[backgroundColor$];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get padding() {
      return this[padding$];
    }
    set padding(value) {
      super.padding = value;
    }
    get visualDensity() {
      return this[visualDensity$];
    }
    set visualDensity(value) {
      super.visualDensity = value;
    }
    get deleteIcon() {
      return this[deleteIcon$];
    }
    set deleteIcon(value) {
      super.deleteIcon = value;
    }
    get onDeleted() {
      return this[onDeleted$];
    }
    set onDeleted(value) {
      super.onDeleted = value;
    }
    get deleteIconColor() {
      return this[deleteIconColor$];
    }
    set deleteIconColor(value) {
      super.deleteIconColor = value;
    }
    get useDeleteButtonTooltip() {
      return this[useDeleteButtonTooltip$];
    }
    set useDeleteButtonTooltip(value) {
      super.useDeleteButtonTooltip = value;
    }
    get deleteButtonTooltipMessage() {
      return this[deleteButtonTooltipMessage$];
    }
    set deleteButtonTooltipMessage(value) {
      super.deleteButtonTooltipMessage = value;
    }
    get materialTapTargetSize() {
      return this[materialTapTargetSize$];
    }
    set materialTapTargetSize(value) {
      super.materialTapTargetSize = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get shadowColor() {
      return this[shadowColor$];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    build(context) {
      if (!debug.debugCheckHasMaterial(context)) dart.assertFailed(null, I[1], 667, 12, "debugCheckHasMaterial(context)");
      return new chip$.RawChip.new({avatar: this.avatar, label: this.label, labelStyle: this.labelStyle, labelPadding: this.labelPadding, deleteIcon: this.deleteIcon, onDeleted: this.onDeleted, deleteIconColor: this.deleteIconColor, useDeleteButtonTooltip: this.useDeleteButtonTooltip, deleteButtonTooltipMessage: this.deleteButtonTooltipMessage, tapEnabled: false, side: this.side, shape: this.shape, clipBehavior: this.clipBehavior, focusNode: this.focusNode, autofocus: this.autofocus, backgroundColor: this.backgroundColor, padding: this.padding, visualDensity: this.visualDensity, materialTapTargetSize: this.materialTapTargetSize, elevation: this.elevation, shadowColor: this.shadowColor, isEnabled: true, $creationLocationd_0dea112b090073317d4: C[1] || CT.C1});
    }
  };
  (chip$.Chip.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let avatar = opts && 'avatar' in opts ? opts.avatar : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
    let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
    let deleteIcon = opts && 'deleteIcon' in opts ? opts.deleteIcon : null;
    let onDeleted = opts && 'onDeleted' in opts ? opts.onDeleted : null;
    let deleteIconColor = opts && 'deleteIconColor' in opts ? opts.deleteIconColor : null;
    let useDeleteButtonTooltip = opts && 'useDeleteButtonTooltip' in opts ? opts.useDeleteButtonTooltip : true;
    let deleteButtonTooltipMessage = opts && 'deleteButtonTooltipMessage' in opts ? opts.deleteButtonTooltipMessage : null;
    let side = opts && 'side' in opts ? opts.side : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
    let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[avatar$] = avatar;
    this[label$] = label;
    this[labelStyle$] = labelStyle;
    this[labelPadding$] = labelPadding;
    this[deleteIcon$] = deleteIcon;
    this[onDeleted$] = onDeleted;
    this[deleteIconColor$] = deleteIconColor;
    this[useDeleteButtonTooltip$] = useDeleteButtonTooltip;
    this[deleteButtonTooltipMessage$] = deleteButtonTooltipMessage;
    this[side$] = side;
    this[shape$] = shape;
    this[clipBehavior$] = clipBehavior;
    this[focusNode$] = focusNode;
    this[autofocus$] = autofocus;
    this[backgroundColor$] = backgroundColor;
    this[padding$] = padding;
    this[visualDensity$] = visualDensity;
    this[materialTapTargetSize$] = materialTapTargetSize;
    this[elevation$] = elevation;
    this[shadowColor$] = shadowColor;
    if (!(label !== null)) dart.assertFailed(null, I[1], 617, 15, "label != null");
    if (!(autofocus !== null)) dart.assertFailed(null, I[1], 618, 15, "autofocus != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 619, 15, "clipBehavior != null");
    if (!(elevation == null || dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, I[1], 620, 15, "elevation == null || elevation >= 0.0");
    if (!(useDeleteButtonTooltip !== null)) dart.assertFailed(null, I[1], 621, 15, "useDeleteButtonTooltip != null");
    chip$.Chip.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = chip$.Chip.prototype;
  dart.addTypeTests(chip$.Chip);
  dart.addTypeCaches(chip$.Chip);
  chip$.Chip[dart.implements] = () => [chip$.ChipAttributes, chip$.DeletableChipAttributes];
  dart.setMethodSignature(chip$.Chip, () => ({
    __proto__: dart.getMethods(chip$.Chip.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(chip$.Chip, I[0]);
  dart.setFieldSignature(chip$.Chip, () => ({
    __proto__: dart.getFields(chip$.Chip.__proto__),
    avatar: dart.finalFieldType(dart.nullable(framework.Widget)),
    label: dart.finalFieldType(framework.Widget),
    labelStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    labelPadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    side: dart.finalFieldType(dart.nullable(borders.BorderSide)),
    shape: dart.finalFieldType(dart.nullable(borders.OutlinedBorder)),
    clipBehavior: dart.finalFieldType(ui.Clip),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    autofocus: dart.finalFieldType(core.bool),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    visualDensity: dart.finalFieldType(dart.nullable(theme_data.VisualDensity)),
    deleteIcon: dart.finalFieldType(dart.nullable(framework.Widget)),
    onDeleted: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    deleteIconColor: dart.finalFieldType(dart.nullable(ui.Color)),
    useDeleteButtonTooltip: dart.finalFieldType(core.bool),
    deleteButtonTooltipMessage: dart.finalFieldType(dart.nullable(core.String)),
    materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
    elevation: dart.finalFieldType(dart.nullable(core.double)),
    shadowColor: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  var avatar$0 = dart.privateName(chip$, "InputChip.avatar");
  var label$0 = dart.privateName(chip$, "InputChip.label");
  var labelStyle$0 = dart.privateName(chip$, "InputChip.labelStyle");
  var labelPadding$0 = dart.privateName(chip$, "InputChip.labelPadding");
  var selected$ = dart.privateName(chip$, "InputChip.selected");
  var isEnabled$ = dart.privateName(chip$, "InputChip.isEnabled");
  var onSelected$ = dart.privateName(chip$, "InputChip.onSelected");
  var deleteIcon$0 = dart.privateName(chip$, "InputChip.deleteIcon");
  var onDeleted$0 = dart.privateName(chip$, "InputChip.onDeleted");
  var deleteIconColor$0 = dart.privateName(chip$, "InputChip.deleteIconColor");
  var useDeleteButtonTooltip$0 = dart.privateName(chip$, "InputChip.useDeleteButtonTooltip");
  var deleteButtonTooltipMessage$0 = dart.privateName(chip$, "InputChip.deleteButtonTooltipMessage");
  var onPressed$ = dart.privateName(chip$, "InputChip.onPressed");
  var pressElevation$ = dart.privateName(chip$, "InputChip.pressElevation");
  var disabledColor$ = dart.privateName(chip$, "InputChip.disabledColor");
  var selectedColor$ = dart.privateName(chip$, "InputChip.selectedColor");
  var tooltip$0 = dart.privateName(chip$, "InputChip.tooltip");
  var side$0 = dart.privateName(chip$, "InputChip.side");
  var shape$0 = dart.privateName(chip$, "InputChip.shape");
  var clipBehavior$0 = dart.privateName(chip$, "InputChip.clipBehavior");
  var focusNode$0 = dart.privateName(chip$, "InputChip.focusNode");
  var autofocus$0 = dart.privateName(chip$, "InputChip.autofocus");
  var backgroundColor$0 = dart.privateName(chip$, "InputChip.backgroundColor");
  var padding$0 = dart.privateName(chip$, "InputChip.padding");
  var visualDensity$0 = dart.privateName(chip$, "InputChip.visualDensity");
  var materialTapTargetSize$0 = dart.privateName(chip$, "InputChip.materialTapTargetSize");
  var elevation$0 = dart.privateName(chip$, "InputChip.elevation");
  var shadowColor$0 = dart.privateName(chip$, "InputChip.shadowColor");
  var selectedShadowColor$ = dart.privateName(chip$, "InputChip.selectedShadowColor");
  var showCheckmark$ = dart.privateName(chip$, "InputChip.showCheckmark");
  var checkmarkColor$ = dart.privateName(chip$, "InputChip.checkmarkColor");
  var avatarBorder$ = dart.privateName(chip$, "InputChip.avatarBorder");
  var _name$ = dart.privateName(borders, "_name");
  var BorderSide_style = dart.privateName(borders, "BorderSide.style");
  var BorderSide_width = dart.privateName(borders, "BorderSide.width");
  var Color_value = dart.privateName(ui, "Color.value");
  var BorderSide_color = dart.privateName(borders, "BorderSide.color");
  var OutlinedBorder_side = dart.privateName(borders, "OutlinedBorder.side");
  chip$.InputChip = class InputChip extends framework.StatelessWidget {
    get avatar() {
      return this[avatar$0];
    }
    set avatar(value) {
      super.avatar = value;
    }
    get label() {
      return this[label$0];
    }
    set label(value) {
      super.label = value;
    }
    get labelStyle() {
      return this[labelStyle$0];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    get labelPadding() {
      return this[labelPadding$0];
    }
    set labelPadding(value) {
      super.labelPadding = value;
    }
    get selected() {
      return this[selected$];
    }
    set selected(value) {
      super.selected = value;
    }
    get isEnabled() {
      return this[isEnabled$];
    }
    set isEnabled(value) {
      super.isEnabled = value;
    }
    get onSelected() {
      return this[onSelected$];
    }
    set onSelected(value) {
      super.onSelected = value;
    }
    get deleteIcon() {
      return this[deleteIcon$0];
    }
    set deleteIcon(value) {
      super.deleteIcon = value;
    }
    get onDeleted() {
      return this[onDeleted$0];
    }
    set onDeleted(value) {
      super.onDeleted = value;
    }
    get deleteIconColor() {
      return this[deleteIconColor$0];
    }
    set deleteIconColor(value) {
      super.deleteIconColor = value;
    }
    get useDeleteButtonTooltip() {
      return this[useDeleteButtonTooltip$0];
    }
    set useDeleteButtonTooltip(value) {
      super.useDeleteButtonTooltip = value;
    }
    get deleteButtonTooltipMessage() {
      return this[deleteButtonTooltipMessage$0];
    }
    set deleteButtonTooltipMessage(value) {
      super.deleteButtonTooltipMessage = value;
    }
    get onPressed() {
      return this[onPressed$];
    }
    set onPressed(value) {
      super.onPressed = value;
    }
    get pressElevation() {
      return this[pressElevation$];
    }
    set pressElevation(value) {
      super.pressElevation = value;
    }
    get disabledColor() {
      return this[disabledColor$];
    }
    set disabledColor(value) {
      super.disabledColor = value;
    }
    get selectedColor() {
      return this[selectedColor$];
    }
    set selectedColor(value) {
      super.selectedColor = value;
    }
    get tooltip() {
      return this[tooltip$0];
    }
    set tooltip(value) {
      super.tooltip = value;
    }
    get side() {
      return this[side$0];
    }
    set side(value) {
      super.side = value;
    }
    get shape() {
      return this[shape$0];
    }
    set shape(value) {
      super.shape = value;
    }
    get clipBehavior() {
      return this[clipBehavior$0];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get focusNode() {
      return this[focusNode$0];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get autofocus() {
      return this[autofocus$0];
    }
    set autofocus(value) {
      super.autofocus = value;
    }
    get backgroundColor() {
      return this[backgroundColor$0];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get padding() {
      return this[padding$0];
    }
    set padding(value) {
      super.padding = value;
    }
    get visualDensity() {
      return this[visualDensity$0];
    }
    set visualDensity(value) {
      super.visualDensity = value;
    }
    get materialTapTargetSize() {
      return this[materialTapTargetSize$0];
    }
    set materialTapTargetSize(value) {
      super.materialTapTargetSize = value;
    }
    get elevation() {
      return this[elevation$0];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get shadowColor() {
      return this[shadowColor$0];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get selectedShadowColor() {
      return this[selectedShadowColor$];
    }
    set selectedShadowColor(value) {
      super.selectedShadowColor = value;
    }
    get showCheckmark() {
      return this[showCheckmark$];
    }
    set showCheckmark(value) {
      super.showCheckmark = value;
    }
    get checkmarkColor() {
      return this[checkmarkColor$];
    }
    set checkmarkColor(value) {
      super.checkmarkColor = value;
    }
    get avatarBorder() {
      return this[avatarBorder$];
    }
    set avatarBorder(value) {
      super.avatarBorder = value;
    }
    build(context) {
      if (!debug.debugCheckHasMaterial(context)) dart.assertFailed(null, I[1], 868, 12, "debugCheckHasMaterial(context)");
      return new chip$.RawChip.new({avatar: this.avatar, label: this.label, labelStyle: this.labelStyle, labelPadding: this.labelPadding, deleteIcon: this.deleteIcon, onDeleted: this.onDeleted, deleteIconColor: this.deleteIconColor, useDeleteButtonTooltip: this.useDeleteButtonTooltip, deleteButtonTooltipMessage: this.deleteButtonTooltipMessage, onSelected: this.onSelected, onPressed: this.onPressed, pressElevation: this.pressElevation, selected: this.selected, tapEnabled: true, disabledColor: this.disabledColor, selectedColor: this.selectedColor, tooltip: this.tooltip, side: this.side, shape: this.shape, clipBehavior: this.clipBehavior, focusNode: this.focusNode, autofocus: this.autofocus, backgroundColor: this.backgroundColor, padding: this.padding, visualDensity: this.visualDensity, materialTapTargetSize: this.materialTapTargetSize, elevation: this.elevation, shadowColor: this.shadowColor, selectedShadowColor: this.selectedShadowColor, showCheckmark: this.showCheckmark, checkmarkColor: this.checkmarkColor, isEnabled: this.isEnabled && (this.onSelected != null || this.onDeleted != null || this.onPressed != null), avatarBorder: this.avatarBorder, $creationLocationd_0dea112b090073317d4: C[29] || CT.C29});
    }
  };
  (chip$.InputChip.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let avatar = opts && 'avatar' in opts ? opts.avatar : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
    let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
    let selected = opts && 'selected' in opts ? opts.selected : false;
    let isEnabled = opts && 'isEnabled' in opts ? opts.isEnabled : true;
    let onSelected = opts && 'onSelected' in opts ? opts.onSelected : null;
    let deleteIcon = opts && 'deleteIcon' in opts ? opts.deleteIcon : null;
    let onDeleted = opts && 'onDeleted' in opts ? opts.onDeleted : null;
    let deleteIconColor = opts && 'deleteIconColor' in opts ? opts.deleteIconColor : null;
    let useDeleteButtonTooltip = opts && 'useDeleteButtonTooltip' in opts ? opts.useDeleteButtonTooltip : true;
    let deleteButtonTooltipMessage = opts && 'deleteButtonTooltipMessage' in opts ? opts.deleteButtonTooltipMessage : null;
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let pressElevation = opts && 'pressElevation' in opts ? opts.pressElevation : null;
    let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
    let selectedColor = opts && 'selectedColor' in opts ? opts.selectedColor : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let side = opts && 'side' in opts ? opts.side : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
    let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    let selectedShadowColor = opts && 'selectedShadowColor' in opts ? opts.selectedShadowColor : null;
    let showCheckmark = opts && 'showCheckmark' in opts ? opts.showCheckmark : null;
    let checkmarkColor = opts && 'checkmarkColor' in opts ? opts.checkmarkColor : null;
    let avatarBorder = opts && 'avatarBorder' in opts ? opts.avatarBorder : C[25] || CT.C25;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[avatar$0] = avatar;
    this[label$0] = label;
    this[labelStyle$0] = labelStyle;
    this[labelPadding$0] = labelPadding;
    this[selected$] = selected;
    this[isEnabled$] = isEnabled;
    this[onSelected$] = onSelected;
    this[deleteIcon$0] = deleteIcon;
    this[onDeleted$0] = onDeleted;
    this[deleteIconColor$0] = deleteIconColor;
    this[useDeleteButtonTooltip$0] = useDeleteButtonTooltip;
    this[deleteButtonTooltipMessage$0] = deleteButtonTooltipMessage;
    this[onPressed$] = onPressed;
    this[pressElevation$] = pressElevation;
    this[disabledColor$] = disabledColor;
    this[selectedColor$] = selectedColor;
    this[tooltip$0] = tooltip;
    this[side$0] = side;
    this[shape$0] = shape;
    this[clipBehavior$0] = clipBehavior;
    this[focusNode$0] = focusNode;
    this[autofocus$0] = autofocus;
    this[backgroundColor$0] = backgroundColor;
    this[padding$0] = padding;
    this[visualDensity$0] = visualDensity;
    this[materialTapTargetSize$0] = materialTapTargetSize;
    this[elevation$0] = elevation;
    this[shadowColor$0] = shadowColor;
    this[selectedShadowColor$] = selectedShadowColor;
    this[showCheckmark$] = showCheckmark;
    this[checkmarkColor$] = checkmarkColor;
    this[avatarBorder$] = avatarBorder;
    if (!(selected !== null)) dart.assertFailed(null, I[1], 791, 15, "selected != null");
    if (!(isEnabled !== null)) dart.assertFailed(null, I[1], 792, 15, "isEnabled != null");
    if (!(label !== null)) dart.assertFailed(null, I[1], 793, 15, "label != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 794, 15, "clipBehavior != null");
    if (!(autofocus !== null)) dart.assertFailed(null, I[1], 795, 15, "autofocus != null");
    if (!(pressElevation == null || dart.notNull(pressElevation) >= 0.0)) dart.assertFailed(null, I[1], 796, 15, "pressElevation == null || pressElevation >= 0.0");
    if (!(elevation == null || dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, I[1], 797, 15, "elevation == null || elevation >= 0.0");
    if (!(useDeleteButtonTooltip !== null)) dart.assertFailed(null, I[1], 798, 15, "useDeleteButtonTooltip != null");
    chip$.InputChip.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = chip$.InputChip.prototype;
  dart.addTypeTests(chip$.InputChip);
  dart.addTypeCaches(chip$.InputChip);
  chip$.InputChip[dart.implements] = () => [chip$.ChipAttributes, chip$.DeletableChipAttributes, chip$.SelectableChipAttributes, chip$.CheckmarkableChipAttributes, chip$.DisabledChipAttributes, chip$.TappableChipAttributes];
  dart.setMethodSignature(chip$.InputChip, () => ({
    __proto__: dart.getMethods(chip$.InputChip.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(chip$.InputChip, I[0]);
  dart.setFieldSignature(chip$.InputChip, () => ({
    __proto__: dart.getFields(chip$.InputChip.__proto__),
    avatar: dart.finalFieldType(dart.nullable(framework.Widget)),
    label: dart.finalFieldType(framework.Widget),
    labelStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    labelPadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    selected: dart.finalFieldType(core.bool),
    isEnabled: dart.finalFieldType(core.bool),
    onSelected: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    deleteIcon: dart.finalFieldType(dart.nullable(framework.Widget)),
    onDeleted: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    deleteIconColor: dart.finalFieldType(dart.nullable(ui.Color)),
    useDeleteButtonTooltip: dart.finalFieldType(core.bool),
    deleteButtonTooltipMessage: dart.finalFieldType(dart.nullable(core.String)),
    onPressed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    pressElevation: dart.finalFieldType(dart.nullable(core.double)),
    disabledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedColor: dart.finalFieldType(dart.nullable(ui.Color)),
    tooltip: dart.finalFieldType(dart.nullable(core.String)),
    side: dart.finalFieldType(dart.nullable(borders.BorderSide)),
    shape: dart.finalFieldType(dart.nullable(borders.OutlinedBorder)),
    clipBehavior: dart.finalFieldType(ui.Clip),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    autofocus: dart.finalFieldType(core.bool),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    visualDensity: dart.finalFieldType(dart.nullable(theme_data.VisualDensity)),
    materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
    elevation: dart.finalFieldType(dart.nullable(core.double)),
    shadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedShadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    showCheckmark: dart.finalFieldType(dart.nullable(core.bool)),
    checkmarkColor: dart.finalFieldType(dart.nullable(ui.Color)),
    avatarBorder: dart.finalFieldType(borders.ShapeBorder)
  }));
  var avatar$1 = dart.privateName(chip$, "ChoiceChip.avatar");
  var label$1 = dart.privateName(chip$, "ChoiceChip.label");
  var labelStyle$1 = dart.privateName(chip$, "ChoiceChip.labelStyle");
  var labelPadding$1 = dart.privateName(chip$, "ChoiceChip.labelPadding");
  var onSelected$0 = dart.privateName(chip$, "ChoiceChip.onSelected");
  var pressElevation$0 = dart.privateName(chip$, "ChoiceChip.pressElevation");
  var selected$0 = dart.privateName(chip$, "ChoiceChip.selected");
  var disabledColor$0 = dart.privateName(chip$, "ChoiceChip.disabledColor");
  var selectedColor$0 = dart.privateName(chip$, "ChoiceChip.selectedColor");
  var tooltip$1 = dart.privateName(chip$, "ChoiceChip.tooltip");
  var side$1 = dart.privateName(chip$, "ChoiceChip.side");
  var shape$1 = dart.privateName(chip$, "ChoiceChip.shape");
  var clipBehavior$1 = dart.privateName(chip$, "ChoiceChip.clipBehavior");
  var focusNode$1 = dart.privateName(chip$, "ChoiceChip.focusNode");
  var autofocus$1 = dart.privateName(chip$, "ChoiceChip.autofocus");
  var backgroundColor$1 = dart.privateName(chip$, "ChoiceChip.backgroundColor");
  var padding$1 = dart.privateName(chip$, "ChoiceChip.padding");
  var visualDensity$1 = dart.privateName(chip$, "ChoiceChip.visualDensity");
  var materialTapTargetSize$1 = dart.privateName(chip$, "ChoiceChip.materialTapTargetSize");
  var elevation$1 = dart.privateName(chip$, "ChoiceChip.elevation");
  var shadowColor$1 = dart.privateName(chip$, "ChoiceChip.shadowColor");
  var selectedShadowColor$0 = dart.privateName(chip$, "ChoiceChip.selectedShadowColor");
  var avatarBorder$0 = dart.privateName(chip$, "ChoiceChip.avatarBorder");
  chip$.ChoiceChip = class ChoiceChip extends framework.StatelessWidget {
    get avatar() {
      return this[avatar$1];
    }
    set avatar(value) {
      super.avatar = value;
    }
    get label() {
      return this[label$1];
    }
    set label(value) {
      super.label = value;
    }
    get labelStyle() {
      return this[labelStyle$1];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    get labelPadding() {
      return this[labelPadding$1];
    }
    set labelPadding(value) {
      super.labelPadding = value;
    }
    get onSelected() {
      return this[onSelected$0];
    }
    set onSelected(value) {
      super.onSelected = value;
    }
    get pressElevation() {
      return this[pressElevation$0];
    }
    set pressElevation(value) {
      super.pressElevation = value;
    }
    get selected() {
      return this[selected$0];
    }
    set selected(value) {
      super.selected = value;
    }
    get disabledColor() {
      return this[disabledColor$0];
    }
    set disabledColor(value) {
      super.disabledColor = value;
    }
    get selectedColor() {
      return this[selectedColor$0];
    }
    set selectedColor(value) {
      super.selectedColor = value;
    }
    get tooltip() {
      return this[tooltip$1];
    }
    set tooltip(value) {
      super.tooltip = value;
    }
    get side() {
      return this[side$1];
    }
    set side(value) {
      super.side = value;
    }
    get shape() {
      return this[shape$1];
    }
    set shape(value) {
      super.shape = value;
    }
    get clipBehavior() {
      return this[clipBehavior$1];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get focusNode() {
      return this[focusNode$1];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get autofocus() {
      return this[autofocus$1];
    }
    set autofocus(value) {
      super.autofocus = value;
    }
    get backgroundColor() {
      return this[backgroundColor$1];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get padding() {
      return this[padding$1];
    }
    set padding(value) {
      super.padding = value;
    }
    get visualDensity() {
      return this[visualDensity$1];
    }
    set visualDensity(value) {
      super.visualDensity = value;
    }
    get materialTapTargetSize() {
      return this[materialTapTargetSize$1];
    }
    set materialTapTargetSize(value) {
      super.materialTapTargetSize = value;
    }
    get elevation() {
      return this[elevation$1];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get shadowColor() {
      return this[shadowColor$1];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get selectedShadowColor() {
      return this[selectedShadowColor$0];
    }
    set selectedShadowColor(value) {
      super.selectedShadowColor = value;
    }
    get avatarBorder() {
      return this[avatarBorder$0];
    }
    set avatarBorder(value) {
      super.avatarBorder = value;
    }
    get isEnabled() {
      return this.onSelected != null;
    }
    build(context) {
      let t0, t0$;
      if (!debug.debugCheckHasMaterial(context)) dart.assertFailed(null, I[1], 1058, 12, "debugCheckHasMaterial(context)");
      let chipTheme = chip_theme.ChipTheme.of(context);
      return new chip$.RawChip.new({avatar: this.avatar, label: this.label, labelStyle: (t0 = this.labelStyle, t0 == null ? this.selected ? chipTheme.secondaryLabelStyle : null : t0), labelPadding: this.labelPadding, onSelected: this.onSelected, pressElevation: this.pressElevation, selected: this.selected, showCheckmark: false, onDeleted: null, tooltip: this.tooltip, side: this.side, shape: this.shape, clipBehavior: this.clipBehavior, focusNode: this.focusNode, autofocus: this.autofocus, disabledColor: this.disabledColor, selectedColor: (t0$ = this.selectedColor, t0$ == null ? chipTheme.secondarySelectedColor : t0$), backgroundColor: this.backgroundColor, padding: this.padding, visualDensity: this.visualDensity, isEnabled: this.isEnabled, materialTapTargetSize: this.materialTapTargetSize, elevation: this.elevation, shadowColor: this.shadowColor, selectedShadowColor: this.selectedShadowColor, avatarBorder: this.avatarBorder, $creationLocationd_0dea112b090073317d4: C[64] || CT.C64});
    }
  };
  (chip$.ChoiceChip.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let avatar = opts && 'avatar' in opts ? opts.avatar : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
    let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
    let onSelected = opts && 'onSelected' in opts ? opts.onSelected : null;
    let pressElevation = opts && 'pressElevation' in opts ? opts.pressElevation : null;
    let selected = opts && 'selected' in opts ? opts.selected : null;
    let selectedColor = opts && 'selectedColor' in opts ? opts.selectedColor : null;
    let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let side = opts && 'side' in opts ? opts.side : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
    let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    let selectedShadowColor = opts && 'selectedShadowColor' in opts ? opts.selectedShadowColor : null;
    let avatarBorder = opts && 'avatarBorder' in opts ? opts.avatarBorder : C[25] || CT.C25;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[avatar$1] = avatar;
    this[label$1] = label;
    this[labelStyle$1] = labelStyle;
    this[labelPadding$1] = labelPadding;
    this[onSelected$0] = onSelected;
    this[pressElevation$0] = pressElevation;
    this[selected$0] = selected;
    this[selectedColor$0] = selectedColor;
    this[disabledColor$0] = disabledColor;
    this[tooltip$1] = tooltip;
    this[side$1] = side;
    this[shape$1] = shape;
    this[clipBehavior$1] = clipBehavior;
    this[focusNode$1] = focusNode;
    this[autofocus$1] = autofocus;
    this[backgroundColor$1] = backgroundColor;
    this[padding$1] = padding;
    this[visualDensity$1] = visualDensity;
    this[materialTapTargetSize$1] = materialTapTargetSize;
    this[elevation$1] = elevation;
    this[shadowColor$1] = shadowColor;
    this[selectedShadowColor$0] = selectedShadowColor;
    this[avatarBorder$0] = avatarBorder;
    if (!(selected !== null)) dart.assertFailed(null, I[1], 998, 15, "selected != null");
    if (!(label !== null)) dart.assertFailed(null, I[1], 999, 15, "label != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 1000, 15, "clipBehavior != null");
    if (!(autofocus !== null)) dart.assertFailed(null, I[1], 1001, 15, "autofocus != null");
    if (!(pressElevation == null || dart.notNull(pressElevation) >= 0.0)) dart.assertFailed(null, I[1], 1002, 15, "pressElevation == null || pressElevation >= 0.0");
    if (!(elevation == null || dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, I[1], 1003, 15, "elevation == null || elevation >= 0.0");
    chip$.ChoiceChip.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = chip$.ChoiceChip.prototype;
  dart.addTypeTests(chip$.ChoiceChip);
  dart.addTypeCaches(chip$.ChoiceChip);
  chip$.ChoiceChip[dart.implements] = () => [chip$.ChipAttributes, chip$.SelectableChipAttributes, chip$.DisabledChipAttributes];
  dart.setMethodSignature(chip$.ChoiceChip, () => ({
    __proto__: dart.getMethods(chip$.ChoiceChip.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(chip$.ChoiceChip, () => ({
    __proto__: dart.getGetters(chip$.ChoiceChip.__proto__),
    isEnabled: core.bool
  }));
  dart.setLibraryUri(chip$.ChoiceChip, I[0]);
  dart.setFieldSignature(chip$.ChoiceChip, () => ({
    __proto__: dart.getFields(chip$.ChoiceChip.__proto__),
    avatar: dart.finalFieldType(dart.nullable(framework.Widget)),
    label: dart.finalFieldType(framework.Widget),
    labelStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    labelPadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    onSelected: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    pressElevation: dart.finalFieldType(dart.nullable(core.double)),
    selected: dart.finalFieldType(core.bool),
    disabledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedColor: dart.finalFieldType(dart.nullable(ui.Color)),
    tooltip: dart.finalFieldType(dart.nullable(core.String)),
    side: dart.finalFieldType(dart.nullable(borders.BorderSide)),
    shape: dart.finalFieldType(dart.nullable(borders.OutlinedBorder)),
    clipBehavior: dart.finalFieldType(ui.Clip),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    autofocus: dart.finalFieldType(core.bool),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    visualDensity: dart.finalFieldType(dart.nullable(theme_data.VisualDensity)),
    materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
    elevation: dart.finalFieldType(dart.nullable(core.double)),
    shadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedShadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    avatarBorder: dart.finalFieldType(borders.ShapeBorder)
  }));
  var avatar$2 = dart.privateName(chip$, "FilterChip.avatar");
  var label$2 = dart.privateName(chip$, "FilterChip.label");
  var labelStyle$2 = dart.privateName(chip$, "FilterChip.labelStyle");
  var labelPadding$2 = dart.privateName(chip$, "FilterChip.labelPadding");
  var selected$1 = dart.privateName(chip$, "FilterChip.selected");
  var onSelected$1 = dart.privateName(chip$, "FilterChip.onSelected");
  var pressElevation$1 = dart.privateName(chip$, "FilterChip.pressElevation");
  var disabledColor$1 = dart.privateName(chip$, "FilterChip.disabledColor");
  var selectedColor$1 = dart.privateName(chip$, "FilterChip.selectedColor");
  var tooltip$2 = dart.privateName(chip$, "FilterChip.tooltip");
  var side$2 = dart.privateName(chip$, "FilterChip.side");
  var shape$2 = dart.privateName(chip$, "FilterChip.shape");
  var clipBehavior$2 = dart.privateName(chip$, "FilterChip.clipBehavior");
  var focusNode$2 = dart.privateName(chip$, "FilterChip.focusNode");
  var autofocus$2 = dart.privateName(chip$, "FilterChip.autofocus");
  var backgroundColor$2 = dart.privateName(chip$, "FilterChip.backgroundColor");
  var padding$2 = dart.privateName(chip$, "FilterChip.padding");
  var visualDensity$2 = dart.privateName(chip$, "FilterChip.visualDensity");
  var materialTapTargetSize$2 = dart.privateName(chip$, "FilterChip.materialTapTargetSize");
  var elevation$2 = dart.privateName(chip$, "FilterChip.elevation");
  var shadowColor$2 = dart.privateName(chip$, "FilterChip.shadowColor");
  var selectedShadowColor$1 = dart.privateName(chip$, "FilterChip.selectedShadowColor");
  var showCheckmark$0 = dart.privateName(chip$, "FilterChip.showCheckmark");
  var checkmarkColor$0 = dart.privateName(chip$, "FilterChip.checkmarkColor");
  var avatarBorder$1 = dart.privateName(chip$, "FilterChip.avatarBorder");
  chip$.FilterChip = class FilterChip extends framework.StatelessWidget {
    get avatar() {
      return this[avatar$2];
    }
    set avatar(value) {
      super.avatar = value;
    }
    get label() {
      return this[label$2];
    }
    set label(value) {
      super.label = value;
    }
    get labelStyle() {
      return this[labelStyle$2];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    get labelPadding() {
      return this[labelPadding$2];
    }
    set labelPadding(value) {
      super.labelPadding = value;
    }
    get selected() {
      return this[selected$1];
    }
    set selected(value) {
      super.selected = value;
    }
    get onSelected() {
      return this[onSelected$1];
    }
    set onSelected(value) {
      super.onSelected = value;
    }
    get pressElevation() {
      return this[pressElevation$1];
    }
    set pressElevation(value) {
      super.pressElevation = value;
    }
    get disabledColor() {
      return this[disabledColor$1];
    }
    set disabledColor(value) {
      super.disabledColor = value;
    }
    get selectedColor() {
      return this[selectedColor$1];
    }
    set selectedColor(value) {
      super.selectedColor = value;
    }
    get tooltip() {
      return this[tooltip$2];
    }
    set tooltip(value) {
      super.tooltip = value;
    }
    get side() {
      return this[side$2];
    }
    set side(value) {
      super.side = value;
    }
    get shape() {
      return this[shape$2];
    }
    set shape(value) {
      super.shape = value;
    }
    get clipBehavior() {
      return this[clipBehavior$2];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get focusNode() {
      return this[focusNode$2];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get autofocus() {
      return this[autofocus$2];
    }
    set autofocus(value) {
      super.autofocus = value;
    }
    get backgroundColor() {
      return this[backgroundColor$2];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get padding() {
      return this[padding$2];
    }
    set padding(value) {
      super.padding = value;
    }
    get visualDensity() {
      return this[visualDensity$2];
    }
    set visualDensity(value) {
      super.visualDensity = value;
    }
    get materialTapTargetSize() {
      return this[materialTapTargetSize$2];
    }
    set materialTapTargetSize(value) {
      super.materialTapTargetSize = value;
    }
    get elevation() {
      return this[elevation$2];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get shadowColor() {
      return this[shadowColor$2];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get selectedShadowColor() {
      return this[selectedShadowColor$1];
    }
    set selectedShadowColor(value) {
      super.selectedShadowColor = value;
    }
    get showCheckmark() {
      return this[showCheckmark$0];
    }
    set showCheckmark(value) {
      super.showCheckmark = value;
    }
    get checkmarkColor() {
      return this[checkmarkColor$0];
    }
    set checkmarkColor(value) {
      super.checkmarkColor = value;
    }
    get avatarBorder() {
      return this[avatarBorder$1];
    }
    set avatarBorder(value) {
      super.avatarBorder = value;
    }
    get isEnabled() {
      return this.onSelected != null;
    }
    build(context) {
      if (!debug.debugCheckHasMaterial(context)) dart.assertFailed(null, I[1], 1281, 12, "debugCheckHasMaterial(context)");
      return new chip$.RawChip.new({avatar: this.avatar, label: this.label, labelStyle: this.labelStyle, labelPadding: this.labelPadding, onSelected: this.onSelected, pressElevation: this.pressElevation, selected: this.selected, tooltip: this.tooltip, side: this.side, shape: this.shape, clipBehavior: this.clipBehavior, focusNode: this.focusNode, autofocus: this.autofocus, backgroundColor: this.backgroundColor, disabledColor: this.disabledColor, selectedColor: this.selectedColor, padding: this.padding, visualDensity: this.visualDensity, isEnabled: this.isEnabled, materialTapTargetSize: this.materialTapTargetSize, elevation: this.elevation, shadowColor: this.shadowColor, selectedShadowColor: this.selectedShadowColor, showCheckmark: this.showCheckmark, checkmarkColor: this.checkmarkColor, avatarBorder: this.avatarBorder, $creationLocationd_0dea112b090073317d4: C[92] || CT.C92});
    }
  };
  (chip$.FilterChip.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let avatar = opts && 'avatar' in opts ? opts.avatar : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
    let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
    let selected = opts && 'selected' in opts ? opts.selected : false;
    let onSelected = opts && 'onSelected' in opts ? opts.onSelected : null;
    let pressElevation = opts && 'pressElevation' in opts ? opts.pressElevation : null;
    let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
    let selectedColor = opts && 'selectedColor' in opts ? opts.selectedColor : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let side = opts && 'side' in opts ? opts.side : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
    let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    let selectedShadowColor = opts && 'selectedShadowColor' in opts ? opts.selectedShadowColor : null;
    let showCheckmark = opts && 'showCheckmark' in opts ? opts.showCheckmark : null;
    let checkmarkColor = opts && 'checkmarkColor' in opts ? opts.checkmarkColor : null;
    let avatarBorder = opts && 'avatarBorder' in opts ? opts.avatarBorder : C[25] || CT.C25;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[avatar$2] = avatar;
    this[label$2] = label;
    this[labelStyle$2] = labelStyle;
    this[labelPadding$2] = labelPadding;
    this[selected$1] = selected;
    this[onSelected$1] = onSelected;
    this[pressElevation$1] = pressElevation;
    this[disabledColor$1] = disabledColor;
    this[selectedColor$1] = selectedColor;
    this[tooltip$2] = tooltip;
    this[side$2] = side;
    this[shape$2] = shape;
    this[clipBehavior$2] = clipBehavior;
    this[focusNode$2] = focusNode;
    this[autofocus$2] = autofocus;
    this[backgroundColor$2] = backgroundColor;
    this[padding$2] = padding;
    this[visualDensity$2] = visualDensity;
    this[materialTapTargetSize$2] = materialTapTargetSize;
    this[elevation$2] = elevation;
    this[shadowColor$2] = shadowColor;
    this[selectedShadowColor$1] = selectedShadowColor;
    this[showCheckmark$0] = showCheckmark;
    this[checkmarkColor$0] = checkmarkColor;
    this[avatarBorder$1] = avatarBorder;
    if (!(selected !== null)) dart.assertFailed(null, I[1], 1217, 15, "selected != null");
    if (!(label !== null)) dart.assertFailed(null, I[1], 1218, 15, "label != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 1219, 15, "clipBehavior != null");
    if (!(autofocus !== null)) dart.assertFailed(null, I[1], 1220, 15, "autofocus != null");
    if (!(pressElevation == null || dart.notNull(pressElevation) >= 0.0)) dart.assertFailed(null, I[1], 1221, 15, "pressElevation == null || pressElevation >= 0.0");
    if (!(elevation == null || dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, I[1], 1222, 15, "elevation == null || elevation >= 0.0");
    chip$.FilterChip.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = chip$.FilterChip.prototype;
  dart.addTypeTests(chip$.FilterChip);
  dart.addTypeCaches(chip$.FilterChip);
  chip$.FilterChip[dart.implements] = () => [chip$.ChipAttributes, chip$.SelectableChipAttributes, chip$.CheckmarkableChipAttributes, chip$.DisabledChipAttributes];
  dart.setMethodSignature(chip$.FilterChip, () => ({
    __proto__: dart.getMethods(chip$.FilterChip.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(chip$.FilterChip, () => ({
    __proto__: dart.getGetters(chip$.FilterChip.__proto__),
    isEnabled: core.bool
  }));
  dart.setLibraryUri(chip$.FilterChip, I[0]);
  dart.setFieldSignature(chip$.FilterChip, () => ({
    __proto__: dart.getFields(chip$.FilterChip.__proto__),
    avatar: dart.finalFieldType(dart.nullable(framework.Widget)),
    label: dart.finalFieldType(framework.Widget),
    labelStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    labelPadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    selected: dart.finalFieldType(core.bool),
    onSelected: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    pressElevation: dart.finalFieldType(dart.nullable(core.double)),
    disabledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedColor: dart.finalFieldType(dart.nullable(ui.Color)),
    tooltip: dart.finalFieldType(dart.nullable(core.String)),
    side: dart.finalFieldType(dart.nullable(borders.BorderSide)),
    shape: dart.finalFieldType(dart.nullable(borders.OutlinedBorder)),
    clipBehavior: dart.finalFieldType(ui.Clip),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    autofocus: dart.finalFieldType(core.bool),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    visualDensity: dart.finalFieldType(dart.nullable(theme_data.VisualDensity)),
    materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
    elevation: dart.finalFieldType(dart.nullable(core.double)),
    shadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedShadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    showCheckmark: dart.finalFieldType(dart.nullable(core.bool)),
    checkmarkColor: dart.finalFieldType(dart.nullable(ui.Color)),
    avatarBorder: dart.finalFieldType(borders.ShapeBorder)
  }));
  var avatar$3 = dart.privateName(chip$, "ActionChip.avatar");
  var label$3 = dart.privateName(chip$, "ActionChip.label");
  var labelStyle$3 = dart.privateName(chip$, "ActionChip.labelStyle");
  var labelPadding$3 = dart.privateName(chip$, "ActionChip.labelPadding");
  var onPressed$0 = dart.privateName(chip$, "ActionChip.onPressed");
  var pressElevation$2 = dart.privateName(chip$, "ActionChip.pressElevation");
  var tooltip$3 = dart.privateName(chip$, "ActionChip.tooltip");
  var side$3 = dart.privateName(chip$, "ActionChip.side");
  var shape$3 = dart.privateName(chip$, "ActionChip.shape");
  var clipBehavior$3 = dart.privateName(chip$, "ActionChip.clipBehavior");
  var focusNode$3 = dart.privateName(chip$, "ActionChip.focusNode");
  var autofocus$3 = dart.privateName(chip$, "ActionChip.autofocus");
  var backgroundColor$3 = dart.privateName(chip$, "ActionChip.backgroundColor");
  var padding$3 = dart.privateName(chip$, "ActionChip.padding");
  var visualDensity$3 = dart.privateName(chip$, "ActionChip.visualDensity");
  var materialTapTargetSize$3 = dart.privateName(chip$, "ActionChip.materialTapTargetSize");
  var elevation$3 = dart.privateName(chip$, "ActionChip.elevation");
  var shadowColor$3 = dart.privateName(chip$, "ActionChip.shadowColor");
  chip$.ActionChip = class ActionChip extends framework.StatelessWidget {
    get avatar() {
      return this[avatar$3];
    }
    set avatar(value) {
      super.avatar = value;
    }
    get label() {
      return this[label$3];
    }
    set label(value) {
      super.label = value;
    }
    get labelStyle() {
      return this[labelStyle$3];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    get labelPadding() {
      return this[labelPadding$3];
    }
    set labelPadding(value) {
      super.labelPadding = value;
    }
    get onPressed() {
      return this[onPressed$0];
    }
    set onPressed(value) {
      super.onPressed = value;
    }
    get pressElevation() {
      return this[pressElevation$2];
    }
    set pressElevation(value) {
      super.pressElevation = value;
    }
    get tooltip() {
      return this[tooltip$3];
    }
    set tooltip(value) {
      super.tooltip = value;
    }
    get side() {
      return this[side$3];
    }
    set side(value) {
      super.side = value;
    }
    get shape() {
      return this[shape$3];
    }
    set shape(value) {
      super.shape = value;
    }
    get clipBehavior() {
      return this[clipBehavior$3];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get focusNode() {
      return this[focusNode$3];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get autofocus() {
      return this[autofocus$3];
    }
    set autofocus(value) {
      super.autofocus = value;
    }
    get backgroundColor() {
      return this[backgroundColor$3];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get padding() {
      return this[padding$3];
    }
    set padding(value) {
      super.padding = value;
    }
    get visualDensity() {
      return this[visualDensity$3];
    }
    set visualDensity(value) {
      super.visualDensity = value;
    }
    get materialTapTargetSize() {
      return this[materialTapTargetSize$3];
    }
    set materialTapTargetSize(value) {
      super.materialTapTargetSize = value;
    }
    get elevation() {
      return this[elevation$3];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get shadowColor() {
      return this[shadowColor$3];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    build(context) {
      if (!debug.debugCheckHasMaterial(context)) dart.assertFailed(null, I[1], 1437, 12, "debugCheckHasMaterial(context)");
      return new chip$.RawChip.new({avatar: this.avatar, label: this.label, onPressed: this.onPressed, pressElevation: this.pressElevation, tooltip: this.tooltip, labelStyle: this.labelStyle, backgroundColor: this.backgroundColor, side: this.side, shape: this.shape, clipBehavior: this.clipBehavior, focusNode: this.focusNode, autofocus: this.autofocus, padding: this.padding, visualDensity: this.visualDensity, labelPadding: this.labelPadding, isEnabled: true, materialTapTargetSize: this.materialTapTargetSize, elevation: this.elevation, shadowColor: this.shadowColor, $creationLocationd_0dea112b090073317d4: C[120] || CT.C120});
    }
  };
  (chip$.ActionChip.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let avatar = opts && 'avatar' in opts ? opts.avatar : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
    let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let pressElevation = opts && 'pressElevation' in opts ? opts.pressElevation : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let side = opts && 'side' in opts ? opts.side : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
    let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[avatar$3] = avatar;
    this[label$3] = label;
    this[labelStyle$3] = labelStyle;
    this[labelPadding$3] = labelPadding;
    this[onPressed$0] = onPressed;
    this[pressElevation$2] = pressElevation;
    this[tooltip$3] = tooltip;
    this[side$3] = side;
    this[shape$3] = shape;
    this[clipBehavior$3] = clipBehavior;
    this[focusNode$3] = focusNode;
    this[autofocus$3] = autofocus;
    this[backgroundColor$3] = backgroundColor;
    this[padding$3] = padding;
    this[visualDensity$3] = visualDensity;
    this[materialTapTargetSize$3] = materialTapTargetSize;
    this[elevation$3] = elevation;
    this[shadowColor$3] = shadowColor;
    if (!(label !== null)) dart.assertFailed(null, I[1], 1386, 15, "label != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 1387, 15, "clipBehavior != null");
    if (!(autofocus !== null)) dart.assertFailed(null, I[1], 1388, 15, "autofocus != null");
    if (!(onPressed !== null)) dart.assertFailed("Rather than disabling an ActionChip by setting onPressed to null, " + "remove it from the interface entirely.", I[1], 1390, 10, "onPressed != null");
    if (!(pressElevation == null || dart.notNull(pressElevation) >= 0.0)) dart.assertFailed(null, I[1], 1394, 15, "pressElevation == null || pressElevation >= 0.0");
    if (!(elevation == null || dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, I[1], 1395, 15, "elevation == null || elevation >= 0.0");
    chip$.ActionChip.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = chip$.ActionChip.prototype;
  dart.addTypeTests(chip$.ActionChip);
  dart.addTypeCaches(chip$.ActionChip);
  chip$.ActionChip[dart.implements] = () => [chip$.ChipAttributes, chip$.TappableChipAttributes];
  dart.setMethodSignature(chip$.ActionChip, () => ({
    __proto__: dart.getMethods(chip$.ActionChip.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setLibraryUri(chip$.ActionChip, I[0]);
  dart.setFieldSignature(chip$.ActionChip, () => ({
    __proto__: dart.getFields(chip$.ActionChip.__proto__),
    avatar: dart.finalFieldType(dart.nullable(framework.Widget)),
    label: dart.finalFieldType(framework.Widget),
    labelStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    labelPadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    onPressed: dart.finalFieldType(dart.fnType(dart.void, [])),
    pressElevation: dart.finalFieldType(dart.nullable(core.double)),
    tooltip: dart.finalFieldType(dart.nullable(core.String)),
    side: dart.finalFieldType(dart.nullable(borders.BorderSide)),
    shape: dart.finalFieldType(dart.nullable(borders.OutlinedBorder)),
    clipBehavior: dart.finalFieldType(ui.Clip),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    autofocus: dart.finalFieldType(core.bool),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    visualDensity: dart.finalFieldType(dart.nullable(theme_data.VisualDensity)),
    materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
    elevation: dart.finalFieldType(dart.nullable(core.double)),
    shadowColor: dart.finalFieldType(dart.nullable(ui.Color))
  }));
  var avatar$4 = dart.privateName(chip$, "RawChip.avatar");
  var label$4 = dart.privateName(chip$, "RawChip.label");
  var labelStyle$4 = dart.privateName(chip$, "RawChip.labelStyle");
  var labelPadding$4 = dart.privateName(chip$, "RawChip.labelPadding");
  var deleteIcon$1 = dart.privateName(chip$, "RawChip.deleteIcon");
  var onDeleted$1 = dart.privateName(chip$, "RawChip.onDeleted");
  var deleteIconColor$1 = dart.privateName(chip$, "RawChip.deleteIconColor");
  var useDeleteButtonTooltip$1 = dart.privateName(chip$, "RawChip.useDeleteButtonTooltip");
  var deleteButtonTooltipMessage$1 = dart.privateName(chip$, "RawChip.deleteButtonTooltipMessage");
  var onSelected$2 = dart.privateName(chip$, "RawChip.onSelected");
  var onPressed$1 = dart.privateName(chip$, "RawChip.onPressed");
  var pressElevation$3 = dart.privateName(chip$, "RawChip.pressElevation");
  var selected$2 = dart.privateName(chip$, "RawChip.selected");
  var isEnabled$0 = dart.privateName(chip$, "RawChip.isEnabled");
  var disabledColor$2 = dart.privateName(chip$, "RawChip.disabledColor");
  var selectedColor$2 = dart.privateName(chip$, "RawChip.selectedColor");
  var tooltip$4 = dart.privateName(chip$, "RawChip.tooltip");
  var side$4 = dart.privateName(chip$, "RawChip.side");
  var shape$4 = dart.privateName(chip$, "RawChip.shape");
  var clipBehavior$4 = dart.privateName(chip$, "RawChip.clipBehavior");
  var focusNode$4 = dart.privateName(chip$, "RawChip.focusNode");
  var autofocus$4 = dart.privateName(chip$, "RawChip.autofocus");
  var backgroundColor$4 = dart.privateName(chip$, "RawChip.backgroundColor");
  var padding$4 = dart.privateName(chip$, "RawChip.padding");
  var visualDensity$4 = dart.privateName(chip$, "RawChip.visualDensity");
  var materialTapTargetSize$4 = dart.privateName(chip$, "RawChip.materialTapTargetSize");
  var elevation$4 = dart.privateName(chip$, "RawChip.elevation");
  var shadowColor$4 = dart.privateName(chip$, "RawChip.shadowColor");
  var selectedShadowColor$2 = dart.privateName(chip$, "RawChip.selectedShadowColor");
  var showCheckmark$1 = dart.privateName(chip$, "RawChip.showCheckmark");
  var checkmarkColor$1 = dart.privateName(chip$, "RawChip.checkmarkColor");
  var avatarBorder$2 = dart.privateName(chip$, "RawChip.avatarBorder");
  var tapEnabled$ = dart.privateName(chip$, "RawChip.tapEnabled");
  chip$.RawChip = class RawChip extends framework.StatefulWidget {
    get avatar() {
      return this[avatar$4];
    }
    set avatar(value) {
      super.avatar = value;
    }
    get label() {
      return this[label$4];
    }
    set label(value) {
      super.label = value;
    }
    get labelStyle() {
      return this[labelStyle$4];
    }
    set labelStyle(value) {
      super.labelStyle = value;
    }
    get labelPadding() {
      return this[labelPadding$4];
    }
    set labelPadding(value) {
      super.labelPadding = value;
    }
    get deleteIcon() {
      return this[deleteIcon$1];
    }
    set deleteIcon(value) {
      super.deleteIcon = value;
    }
    get onDeleted() {
      return this[onDeleted$1];
    }
    set onDeleted(value) {
      super.onDeleted = value;
    }
    get deleteIconColor() {
      return this[deleteIconColor$1];
    }
    set deleteIconColor(value) {
      super.deleteIconColor = value;
    }
    get useDeleteButtonTooltip() {
      return this[useDeleteButtonTooltip$1];
    }
    set useDeleteButtonTooltip(value) {
      super.useDeleteButtonTooltip = value;
    }
    get deleteButtonTooltipMessage() {
      return this[deleteButtonTooltipMessage$1];
    }
    set deleteButtonTooltipMessage(value) {
      super.deleteButtonTooltipMessage = value;
    }
    get onSelected() {
      return this[onSelected$2];
    }
    set onSelected(value) {
      super.onSelected = value;
    }
    get onPressed() {
      return this[onPressed$1];
    }
    set onPressed(value) {
      super.onPressed = value;
    }
    get pressElevation() {
      return this[pressElevation$3];
    }
    set pressElevation(value) {
      super.pressElevation = value;
    }
    get selected() {
      return this[selected$2];
    }
    set selected(value) {
      super.selected = value;
    }
    get isEnabled() {
      return this[isEnabled$0];
    }
    set isEnabled(value) {
      super.isEnabled = value;
    }
    get disabledColor() {
      return this[disabledColor$2];
    }
    set disabledColor(value) {
      super.disabledColor = value;
    }
    get selectedColor() {
      return this[selectedColor$2];
    }
    set selectedColor(value) {
      super.selectedColor = value;
    }
    get tooltip() {
      return this[tooltip$4];
    }
    set tooltip(value) {
      super.tooltip = value;
    }
    get side() {
      return this[side$4];
    }
    set side(value) {
      super.side = value;
    }
    get shape() {
      return this[shape$4];
    }
    set shape(value) {
      super.shape = value;
    }
    get clipBehavior() {
      return this[clipBehavior$4];
    }
    set clipBehavior(value) {
      super.clipBehavior = value;
    }
    get focusNode() {
      return this[focusNode$4];
    }
    set focusNode(value) {
      super.focusNode = value;
    }
    get autofocus() {
      return this[autofocus$4];
    }
    set autofocus(value) {
      super.autofocus = value;
    }
    get backgroundColor() {
      return this[backgroundColor$4];
    }
    set backgroundColor(value) {
      super.backgroundColor = value;
    }
    get padding() {
      return this[padding$4];
    }
    set padding(value) {
      super.padding = value;
    }
    get visualDensity() {
      return this[visualDensity$4];
    }
    set visualDensity(value) {
      super.visualDensity = value;
    }
    get materialTapTargetSize() {
      return this[materialTapTargetSize$4];
    }
    set materialTapTargetSize(value) {
      super.materialTapTargetSize = value;
    }
    get elevation() {
      return this[elevation$4];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get shadowColor() {
      return this[shadowColor$4];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get selectedShadowColor() {
      return this[selectedShadowColor$2];
    }
    set selectedShadowColor(value) {
      super.selectedShadowColor = value;
    }
    get showCheckmark() {
      return this[showCheckmark$1];
    }
    set showCheckmark(value) {
      super.showCheckmark = value;
    }
    get checkmarkColor() {
      return this[checkmarkColor$1];
    }
    set checkmarkColor(value) {
      super.checkmarkColor = value;
    }
    get avatarBorder() {
      return this[avatarBorder$2];
    }
    set avatarBorder(value) {
      super.avatarBorder = value;
    }
    get tapEnabled() {
      return this[tapEnabled$];
    }
    set tapEnabled(value) {
      super.tapEnabled = value;
    }
    createState() {
      return new chip$._RawChipState.new();
    }
  };
  (chip$.RawChip.new = function(opts) {
    let t0;
    let key = opts && 'key' in opts ? opts.key : null;
    let avatar = opts && 'avatar' in opts ? opts.avatar : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let labelStyle = opts && 'labelStyle' in opts ? opts.labelStyle : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
    let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
    let deleteIcon = opts && 'deleteIcon' in opts ? opts.deleteIcon : null;
    let onDeleted = opts && 'onDeleted' in opts ? opts.onDeleted : null;
    let deleteIconColor = opts && 'deleteIconColor' in opts ? opts.deleteIconColor : null;
    let useDeleteButtonTooltip = opts && 'useDeleteButtonTooltip' in opts ? opts.useDeleteButtonTooltip : true;
    let deleteButtonTooltipMessage = opts && 'deleteButtonTooltipMessage' in opts ? opts.deleteButtonTooltipMessage : null;
    let onPressed = opts && 'onPressed' in opts ? opts.onPressed : null;
    let onSelected = opts && 'onSelected' in opts ? opts.onSelected : null;
    let pressElevation = opts && 'pressElevation' in opts ? opts.pressElevation : null;
    let tapEnabled = opts && 'tapEnabled' in opts ? opts.tapEnabled : true;
    let selected = opts && 'selected' in opts ? opts.selected : false;
    let isEnabled = opts && 'isEnabled' in opts ? opts.isEnabled : true;
    let disabledColor = opts && 'disabledColor' in opts ? opts.disabledColor : null;
    let selectedColor = opts && 'selectedColor' in opts ? opts.selectedColor : null;
    let tooltip = opts && 'tooltip' in opts ? opts.tooltip : null;
    let side = opts && 'side' in opts ? opts.side : null;
    let shape = opts && 'shape' in opts ? opts.shape : null;
    let clipBehavior = opts && 'clipBehavior' in opts ? opts.clipBehavior : C[0] || CT.C0;
    let focusNode = opts && 'focusNode' in opts ? opts.focusNode : null;
    let autofocus = opts && 'autofocus' in opts ? opts.autofocus : false;
    let backgroundColor = opts && 'backgroundColor' in opts ? opts.backgroundColor : null;
    let materialTapTargetSize = opts && 'materialTapTargetSize' in opts ? opts.materialTapTargetSize : null;
    let elevation = opts && 'elevation' in opts ? opts.elevation : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    let selectedShadowColor = opts && 'selectedShadowColor' in opts ? opts.selectedShadowColor : null;
    let showCheckmark = opts && 'showCheckmark' in opts ? opts.showCheckmark : true;
    let checkmarkColor = opts && 'checkmarkColor' in opts ? opts.checkmarkColor : null;
    let avatarBorder = opts && 'avatarBorder' in opts ? opts.avatarBorder : C[25] || CT.C25;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[avatar$4] = avatar;
    this[label$4] = label;
    this[labelStyle$4] = labelStyle;
    this[padding$4] = padding;
    this[visualDensity$4] = visualDensity;
    this[labelPadding$4] = labelPadding;
    this[onDeleted$1] = onDeleted;
    this[deleteIconColor$1] = deleteIconColor;
    this[useDeleteButtonTooltip$1] = useDeleteButtonTooltip;
    this[deleteButtonTooltipMessage$1] = deleteButtonTooltipMessage;
    this[onPressed$1] = onPressed;
    this[onSelected$2] = onSelected;
    this[pressElevation$3] = pressElevation;
    this[tapEnabled$] = tapEnabled;
    this[selected$2] = selected;
    this[isEnabled$0] = isEnabled;
    this[disabledColor$2] = disabledColor;
    this[selectedColor$2] = selectedColor;
    this[tooltip$4] = tooltip;
    this[side$4] = side;
    this[shape$4] = shape;
    this[clipBehavior$4] = clipBehavior;
    this[focusNode$4] = focusNode;
    this[autofocus$4] = autofocus;
    this[backgroundColor$4] = backgroundColor;
    this[materialTapTargetSize$4] = materialTapTargetSize;
    this[elevation$4] = elevation;
    this[shadowColor$4] = shadowColor;
    this[selectedShadowColor$2] = selectedShadowColor;
    this[showCheckmark$1] = showCheckmark;
    this[checkmarkColor$1] = checkmarkColor;
    this[avatarBorder$2] = avatarBorder;
    if (!(label !== null)) dart.assertFailed(null, I[1], 1544, 15, "label != null");
    if (!(isEnabled !== null)) dart.assertFailed(null, I[1], 1545, 15, "isEnabled != null");
    if (!(selected !== null)) dart.assertFailed(null, I[1], 1546, 15, "selected != null");
    if (!(clipBehavior !== null)) dart.assertFailed(null, I[1], 1547, 15, "clipBehavior != null");
    if (!(autofocus !== null)) dart.assertFailed(null, I[1], 1548, 15, "autofocus != null");
    if (!(pressElevation == null || dart.notNull(pressElevation) >= 0.0)) dart.assertFailed(null, I[1], 1549, 15, "pressElevation == null || pressElevation >= 0.0");
    if (!(elevation == null || dart.notNull(elevation) >= 0.0)) dart.assertFailed(null, I[1], 1550, 15, "elevation == null || elevation >= 0.0");
    if (!(useDeleteButtonTooltip !== null)) dart.assertFailed(null, I[1], 1551, 15, "useDeleteButtonTooltip != null");
    this[deleteIcon$1] = (t0 = deleteIcon, t0 == null ? chip$._kDefaultDeleteIcon : t0);
    chip$.RawChip.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = chip$.RawChip.prototype;
  dart.addTypeTests(chip$.RawChip);
  dart.addTypeCaches(chip$.RawChip);
  chip$.RawChip[dart.implements] = () => [chip$.ChipAttributes, chip$.DeletableChipAttributes, chip$.SelectableChipAttributes, chip$.CheckmarkableChipAttributes, chip$.DisabledChipAttributes, chip$.TappableChipAttributes];
  dart.setMethodSignature(chip$.RawChip, () => ({
    __proto__: dart.getMethods(chip$.RawChip.__proto__),
    createState: dart.fnType(chip$._RawChipState, [])
  }));
  dart.setLibraryUri(chip$.RawChip, I[0]);
  dart.setFieldSignature(chip$.RawChip, () => ({
    __proto__: dart.getFields(chip$.RawChip.__proto__),
    avatar: dart.finalFieldType(dart.nullable(framework.Widget)),
    label: dart.finalFieldType(framework.Widget),
    labelStyle: dart.finalFieldType(dart.nullable(text_style.TextStyle)),
    labelPadding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    deleteIcon: dart.finalFieldType(framework.Widget),
    onDeleted: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    deleteIconColor: dart.finalFieldType(dart.nullable(ui.Color)),
    useDeleteButtonTooltip: dart.finalFieldType(core.bool),
    deleteButtonTooltipMessage: dart.finalFieldType(dart.nullable(core.String)),
    onSelected: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core.bool]))),
    onPressed: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, []))),
    pressElevation: dart.finalFieldType(dart.nullable(core.double)),
    selected: dart.finalFieldType(core.bool),
    isEnabled: dart.finalFieldType(core.bool),
    disabledColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedColor: dart.finalFieldType(dart.nullable(ui.Color)),
    tooltip: dart.finalFieldType(dart.nullable(core.String)),
    side: dart.finalFieldType(dart.nullable(borders.BorderSide)),
    shape: dart.finalFieldType(dart.nullable(borders.OutlinedBorder)),
    clipBehavior: dart.finalFieldType(ui.Clip),
    focusNode: dart.finalFieldType(dart.nullable(focus_manager.FocusNode)),
    autofocus: dart.finalFieldType(core.bool),
    backgroundColor: dart.finalFieldType(dart.nullable(ui.Color)),
    padding: dart.finalFieldType(dart.nullable(edge_insets.EdgeInsetsGeometry)),
    visualDensity: dart.finalFieldType(dart.nullable(theme_data.VisualDensity)),
    materialTapTargetSize: dart.finalFieldType(dart.nullable(theme_data.MaterialTapTargetSize)),
    elevation: dart.finalFieldType(dart.nullable(core.double)),
    shadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    selectedShadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    showCheckmark: dart.finalFieldType(dart.nullable(core.bool)),
    checkmarkColor: dart.finalFieldType(dart.nullable(ui.Color)),
    avatarBorder: dart.finalFieldType(borders.ShapeBorder),
    tapEnabled: dart.finalFieldType(core.bool)
  }));
  var ___RawChipState_selectController = dart.privateName(chip$, "_#_RawChipState#selectController");
  var ___RawChipState_avatarDrawerController = dart.privateName(chip$, "_#_RawChipState#avatarDrawerController");
  var ___RawChipState_deleteDrawerController = dart.privateName(chip$, "_#_RawChipState#deleteDrawerController");
  var ___RawChipState_enableController = dart.privateName(chip$, "_#_RawChipState#enableController");
  var ___RawChipState_checkmarkAnimation = dart.privateName(chip$, "_#_RawChipState#checkmarkAnimation");
  var ___RawChipState_avatarDrawerAnimation = dart.privateName(chip$, "_#_RawChipState#avatarDrawerAnimation");
  var ___RawChipState_deleteDrawerAnimation = dart.privateName(chip$, "_#_RawChipState#deleteDrawerAnimation");
  var ___RawChipState_enableAnimation = dart.privateName(chip$, "_#_RawChipState#enableAnimation");
  var ___RawChipState_selectionFade = dart.privateName(chip$, "_#_RawChipState#selectionFade");
  var _states = dart.privateName(chip$, "_states");
  var _isTapping = dart.privateName(chip$, "_isTapping");
  var _updateState = dart.privateName(chip$, "_updateState");
  var _handleTapDown = dart.privateName(chip$, "_handleTapDown");
  var _handleTapCancel = dart.privateName(chip$, "_handleTapCancel");
  var _handleTap = dart.privateName(chip$, "_handleTap");
  var _handleFocus = dart.privateName(chip$, "_handleFocus");
  var _handleHover = dart.privateName(chip$, "_handleHover");
  var _getShape = dart.privateName(chip$, "_getShape");
  var _wrapWithTooltip = dart.privateName(chip$, "_wrapWithTooltip");
  var _buildDeleteIcon = dart.privateName(chip$, "_buildDeleteIcon");
  var EdgeInsets_bottom = dart.privateName(edge_insets, "EdgeInsets.bottom");
  var EdgeInsets_right = dart.privateName(edge_insets, "EdgeInsets.right");
  var EdgeInsets_top = dart.privateName(edge_insets, "EdgeInsets.top");
  var EdgeInsets_left = dart.privateName(edge_insets, "EdgeInsets.left");
  var _name$0 = dart.privateName(theme_data, "_name");
  var BoxConstraints_maxHeight = dart.privateName(box$, "BoxConstraints.maxHeight");
  var BoxConstraints_minHeight = dart.privateName(box$, "BoxConstraints.minHeight");
  var BoxConstraints_maxWidth = dart.privateName(box$, "BoxConstraints.maxWidth");
  var BoxConstraints_minWidth = dart.privateName(box$, "BoxConstraints.minWidth");
  var Duration__duration = dart.privateName(core, "Duration._duration");
  const State_TickerProviderStateMixin$36 = class State_TickerProviderStateMixin extends framework.State$(chip$.RawChip) {};
  (State_TickerProviderStateMixin$36.new = function() {
    ticker_provider.TickerProviderStateMixin$(chip$.RawChip)[dart.mixinNew].call(this);
    State_TickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_TickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_TickerProviderStateMixin$36, ticker_provider.TickerProviderStateMixin$(chip$.RawChip));
  chip$._RawChipState = class _RawChipState extends State_TickerProviderStateMixin$36 {
    get selectController() {
      let t0;
      t0 = this[___RawChipState_selectController];
      return t0 == null ? dart.throw(new _internal.LateError.fieldNI("selectController")) : t0;
    }
    set selectController(t0) {
      this[___RawChipState_selectController] = t0;
    }
    get avatarDrawerController() {
      let t1;
      t1 = this[___RawChipState_avatarDrawerController];
      return t1 == null ? dart.throw(new _internal.LateError.fieldNI("avatarDrawerController")) : t1;
    }
    set avatarDrawerController(t1) {
      this[___RawChipState_avatarDrawerController] = t1;
    }
    get deleteDrawerController() {
      let t2;
      t2 = this[___RawChipState_deleteDrawerController];
      return t2 == null ? dart.throw(new _internal.LateError.fieldNI("deleteDrawerController")) : t2;
    }
    set deleteDrawerController(t2) {
      this[___RawChipState_deleteDrawerController] = t2;
    }
    get enableController() {
      let t3;
      t3 = this[___RawChipState_enableController];
      return t3 == null ? dart.throw(new _internal.LateError.fieldNI("enableController")) : t3;
    }
    set enableController(t3) {
      this[___RawChipState_enableController] = t3;
    }
    get checkmarkAnimation() {
      let t4;
      t4 = this[___RawChipState_checkmarkAnimation];
      return t4 == null ? dart.throw(new _internal.LateError.fieldNI("checkmarkAnimation")) : t4;
    }
    set checkmarkAnimation(t4) {
      this[___RawChipState_checkmarkAnimation] = t4;
    }
    set avatarDrawerAnimation(t5) {
      this[___RawChipState_avatarDrawerAnimation] = t5;
    }
    get avatarDrawerAnimation() {
      let t6;
      t6 = this[___RawChipState_avatarDrawerAnimation];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("avatarDrawerAnimation")) : t6;
    }
    get deleteDrawerAnimation() {
      let t6;
      t6 = this[___RawChipState_deleteDrawerAnimation];
      return t6 == null ? dart.throw(new _internal.LateError.fieldNI("deleteDrawerAnimation")) : t6;
    }
    set deleteDrawerAnimation(t6) {
      this[___RawChipState_deleteDrawerAnimation] = t6;
    }
    get enableAnimation() {
      let t7;
      t7 = this[___RawChipState_enableAnimation];
      return t7 == null ? dart.throw(new _internal.LateError.fieldNI("enableAnimation")) : t7;
    }
    set enableAnimation(t7) {
      this[___RawChipState_enableAnimation] = t7;
    }
    get selectionFade() {
      let t8;
      t8 = this[___RawChipState_selectionFade];
      return t8 == null ? dart.throw(new _internal.LateError.fieldNI("selectionFade")) : t8;
    }
    set selectionFade(t8) {
      this[___RawChipState_selectionFade] = t8;
    }
    get hasDeleteButton() {
      return this.widget.onDeleted != null;
    }
    get hasAvatar() {
      return this.widget.avatar != null;
    }
    get canTap() {
      return this.widget.isEnabled && this.widget.tapEnabled && (this.widget.onPressed != null || this.widget.onSelected != null);
    }
    get isTapping() {
      return this.canTap && this[_isTapping];
    }
    initState() {
      if (!(this.widget.onSelected == null || this.widget.onPressed == null)) dart.assertFailed(null, I[1], 1665, 12, "widget.onSelected == null || widget.onPressed == null");
      super.initState();
      this[_updateState](material_state.MaterialState.disabled, !this.widget.isEnabled);
      this[_updateState](material_state.MaterialState.selected, this.widget.selected);
      this.selectController = new animation_controller.AnimationController.new({duration: chip$._kSelectDuration, value: this.widget.selected === true ? 1.0 : 0.0, vsync: this});
      this.selectionFade = new animations.CurvedAnimation.new({parent: this.selectController, curve: curves.Curves.fastOutSlowIn});
      this.avatarDrawerController = new animation_controller.AnimationController.new({duration: chip$._kDrawerDuration, value: this.hasAvatar || this.widget.selected === true ? 1.0 : 0.0, vsync: this});
      this.deleteDrawerController = new animation_controller.AnimationController.new({duration: chip$._kDrawerDuration, value: this.hasDeleteButton ? 1.0 : 0.0, vsync: this});
      this.enableController = new animation_controller.AnimationController.new({duration: chip$._kDisableDuration, value: this.widget.isEnabled ? 1.0 : 0.0, vsync: this});
      let checkmarkPercentage = chip$._kCheckmarkDuration.inMilliseconds / chip$._kSelectDuration.inMilliseconds;
      let checkmarkReversePercentage = chip$._kCheckmarkReverseDuration.inMilliseconds / chip$._kSelectDuration.inMilliseconds;
      let avatarDrawerReversePercentage = chip$._kReverseDrawerDuration.inMilliseconds / chip$._kSelectDuration.inMilliseconds;
      this.checkmarkAnimation = new animations.CurvedAnimation.new({parent: this.selectController, curve: new curves.Interval.new(1.0 - checkmarkPercentage, 1.0, {curve: curves.Curves.fastOutSlowIn}), reverseCurve: new curves.Interval.new(1.0 - checkmarkReversePercentage, 1.0, {curve: curves.Curves.fastOutSlowIn})});
      this.deleteDrawerAnimation = new animations.CurvedAnimation.new({parent: this.deleteDrawerController, curve: curves.Curves.fastOutSlowIn});
      this.avatarDrawerAnimation = new animations.CurvedAnimation.new({parent: this.avatarDrawerController, curve: curves.Curves.fastOutSlowIn, reverseCurve: new curves.Interval.new(1.0 - avatarDrawerReversePercentage, 1.0, {curve: curves.Curves.fastOutSlowIn})});
      this.enableAnimation = new animations.CurvedAnimation.new({parent: this.enableController, curve: curves.Curves.fastOutSlowIn});
    }
    dispose() {
      this.selectController.dispose();
      this.avatarDrawerController.dispose();
      this.deleteDrawerController.dispose();
      this.enableController.dispose();
      super.dispose();
    }
    [_updateState](state, value) {
      value ? this[_states].add(state) : this[_states].remove(state);
    }
    [_handleTapDown](details) {
      if (!this.canTap) {
        return;
      }
      this.setState(dart.fn(() => {
        this[_isTapping] = true;
        this[_updateState](material_state.MaterialState.pressed, true);
      }, T.VoidTovoid()));
    }
    [_handleTapCancel]() {
      if (!this.canTap) {
        return;
      }
      this.setState(dart.fn(() => {
        this[_isTapping] = false;
        this[_updateState](material_state.MaterialState.pressed, false);
      }, T.VoidTovoid()));
    }
    [_handleTap]() {
      let t9, t9$;
      if (!this.canTap) {
        return;
      }
      this.setState(dart.fn(() => {
        this[_isTapping] = false;
        this[_updateState](material_state.MaterialState.pressed, false);
      }, T.VoidTovoid()));
      t9 = this.widget.onSelected;
      t9 == null ? null : t9(!this.widget.selected);
      t9$ = this.widget.onPressed;
      t9$ == null ? null : t9$();
    }
    [_handleFocus](isFocused) {
      this.setState(dart.fn(() => {
        this[_updateState](material_state.MaterialState.focused, isFocused);
      }, T.VoidTovoid()));
    }
    [_handleHover](isHovered) {
      this.setState(dart.fn(() => {
        this[_updateState](material_state.MaterialState.hovered, isHovered);
      }, T.VoidTovoid()));
    }
    [_getShape](theme) {
      let t9, t9$, t9$0;
      let resolvedSide = (t9 = material_state.MaterialStateProperty.resolveAs(T.BorderSideN(), this.widget.side, this[_states]), t9 == null ? material_state.MaterialStateProperty.resolveAs(T.BorderSideN(), theme.side, this[_states]) : t9);
      let resolvedShape = (t9$0 = (t9$ = material_state.MaterialStateProperty.resolveAs(T.OutlinedBorderN(), this.widget.shape, this[_states]), t9$ == null ? material_state.MaterialStateProperty.resolveAs(T.OutlinedBorderN(), theme.shape, this[_states]) : t9$), t9$0 == null ? C[141] || CT.C141 : t9$0);
      return resolvedShape.copyWith({side: resolvedSide});
    }
    getBackgroundColor(theme) {
      let t9, t9$, t9$0;
      let backgroundTween = new tween.ColorTween.new({begin: (t9 = this.widget.disabledColor, t9 == null ? theme.disabledColor : t9), end: (t9$ = this.widget.backgroundColor, t9$ == null ? theme.backgroundColor : t9$)});
      let selectTween = new tween.ColorTween.new({begin: backgroundTween.evaluate(this.enableController), end: (t9$0 = this.widget.selectedColor, t9$0 == null ? theme.selectedColor : t9$0)});
      return selectTween.evaluate(this.selectionFade);
    }
    didUpdateWidget(oldWidget) {
      chip$.RawChip.as(oldWidget);
      super.didUpdateWidget(oldWidget);
      if (oldWidget.isEnabled !== this.widget.isEnabled) {
        this.setState(dart.fn(() => {
          this[_updateState](material_state.MaterialState.disabled, !this.widget.isEnabled);
          if (this.widget.isEnabled) {
            this.enableController.forward();
          } else {
            this.enableController.reverse();
          }
        }, T.VoidTovoid()));
      }
      if (!dart.equals(oldWidget.avatar, this.widget.avatar) || oldWidget.selected !== this.widget.selected) {
        this.setState(dart.fn(() => {
          if (this.hasAvatar || this.widget.selected === true) {
            this.avatarDrawerController.forward();
          } else {
            this.avatarDrawerController.reverse();
          }
        }, T.VoidTovoid()));
      }
      if (oldWidget.selected !== this.widget.selected) {
        this.setState(dart.fn(() => {
          this[_updateState](material_state.MaterialState.selected, this.widget.selected);
          if (this.widget.selected === true) {
            this.selectController.forward();
          } else {
            this.selectController.reverse();
          }
        }, T.VoidTovoid()));
      }
      if (!dart.equals(oldWidget.onDeleted, this.widget.onDeleted)) {
        this.setState(dart.fn(() => {
          if (this.hasDeleteButton) {
            this.deleteDrawerController.forward();
          } else {
            this.deleteDrawerController.reverse();
          }
        }, T.VoidTovoid()));
      }
    }
    [_wrapWithTooltip](tooltip, callback, child) {
      if (!this.widget.useDeleteButtonTooltip) {
        return child;
      }
      if (child == null || callback == null || tooltip == null) {
        return child;
      }
      return new tooltip$.Tooltip.new({message: tooltip, child: child, $creationLocationd_0dea112b090073317d4: C[142] || CT.C142});
    }
    [_buildDeleteIcon](context, theme, chipTheme, deleteIconKey) {
      let t9, t9$;
      if (!this.hasDeleteButton) {
        return null;
      }
      return new basic.Semantics.new({container: true, button: true, child: this[_wrapWithTooltip]((t9 = this.widget.deleteButtonTooltipMessage, t9 == null ? material_localizations.MaterialLocalizations.of(context).deleteButtonTooltip : t9), this.widget.onDeleted, new gesture_detector.GestureDetector.new({key: deleteIconKey, behavior: proxy_box.HitTestBehavior.opaque, onTap: this.widget.isEnabled ? dart.fn(() => {
            feedback.Feedback.forTap(context);
            dart.nullCheck(this.widget.onDeleted)();
          }, T.VoidTovoid()) : null, child: new icon_theme.IconTheme.new({data: theme.iconTheme.copyWith({color: (t9$ = this.widget.deleteIconColor, t9$ == null ? chipTheme.deleteIconColor : t9$)}), child: this.widget.deleteIcon, $creationLocationd_0dea112b090073317d4: C[146] || CT.C146}), $creationLocationd_0dea112b090073317d4: C[150] || CT.C150})), $creationLocationd_0dea112b090073317d4: C[156] || CT.C156});
    }
    build(context) {
      let t9, t9$, t9$0, t9$1, t9$2, t9$3, t9$4, t9$5, t9$6, t9$7, t9$8, t9$9, t9$10, t9$11, t9$12, t9$13, t9$14;
      if (!debug.debugCheckHasMaterial(context)) dart.assertFailed(null, I[1], 1908, 12, "debugCheckHasMaterial(context)");
      if (!debug$.debugCheckHasMediaQuery(context)) dart.assertFailed(null, I[1], 1909, 12, "debugCheckHasMediaQuery(context)");
      if (!debug$.debugCheckHasDirectionality(context)) dart.assertFailed(null, I[1], 1910, 12, "debugCheckHasDirectionality(context)");
      if (!debug.debugCheckHasMaterialLocalizations(context)) dart.assertFailed(null, I[1], 1911, 12, "debugCheckHasMaterialLocalizations(context)");
      let _defaultLabelPadding = dart.nullCheck(edge_insets.EdgeInsets.lerp(C[161] || CT.C161, C[162] || CT.C162, (media_query.MediaQuery.of(context).textScaleFactor - 1.0)[$clamp](0.0, 1.0)));
      let theme = theme$.Theme.of(context);
      let chipTheme = chip_theme.ChipTheme.of(context);
      let textDirection = basic.Directionality.maybeOf(context);
      let resolvedShape = this[_getShape](chipTheme);
      let elevation = (t9$ = (t9 = this.widget.elevation, t9 == null ? chipTheme.elevation : t9), t9$ == null ? 0 : t9$);
      let pressElevation = (t9$1 = (t9$0 = this.widget.pressElevation, t9$0 == null ? chipTheme.pressElevation : t9$0), t9$1 == null ? 8 : t9$1);
      let shadowColor = (t9$3 = (t9$2 = this.widget.shadowColor, t9$2 == null ? chipTheme.shadowColor : t9$2), t9$3 == null ? chip$._RawChipState._defaultShadowColor : t9$3);
      let selectedShadowColor = (t9$5 = (t9$4 = this.widget.selectedShadowColor, t9$4 == null ? chipTheme.selectedShadowColor : t9$4), t9$5 == null ? chip$._RawChipState._defaultShadowColor : t9$5);
      let checkmarkColor = (t9$6 = this.widget.checkmarkColor, t9$6 == null ? chipTheme.checkmarkColor : t9$6);
      let showCheckmark = (t9$8 = (t9$7 = this.widget.showCheckmark, t9$7 == null ? chipTheme.showCheckmark : t9$7), t9$8 == null ? true : t9$8);
      let effectiveLabelStyle = chipTheme.labelStyle.merge(this.widget.labelStyle);
      let resolvedLabelColor = material_state.MaterialStateProperty.resolveAs(T.ColorN(), effectiveLabelStyle.color, this[_states]);
      let resolvedLabelStyle = effectiveLabelStyle.copyWith({color: resolvedLabelColor});
      let labelPadding = (t9$10 = (t9$9 = this.widget.labelPadding, t9$9 == null ? chipTheme.labelPadding : t9$9), t9$10 == null ? _defaultLabelPadding : t9$10);
      let result = new material.Material.new({elevation: this.isTapping ? pressElevation : elevation, shadowColor: this.widget.selected ? selectedShadowColor : shadowColor, animationDuration: chip$._RawChipState.pressedAnimationDuration, shape: resolvedShape, clipBehavior: this.widget.clipBehavior, child: new ink_well.InkWell.new({onFocusChange: dart.bind(this, _handleFocus), focusNode: this.widget.focusNode, autofocus: this.widget.autofocus, canRequestFocus: this.widget.isEnabled, onTap: this.canTap ? dart.bind(this, _handleTap) : null, onTapDown: this.canTap ? dart.bind(this, _handleTapDown) : null, onTapCancel: this.canTap ? dart.bind(this, _handleTapCancel) : null, onHover: this.canTap ? dart.bind(this, _handleHover) : null, splashFactory: new chip$._LocationAwareInkRippleFactory.new(this.hasDeleteButton, context, this.deleteIconKey), customBorder: resolvedShape, child: new transitions.AnimatedBuilder.new({animation: new change_notifier._MergingListenable.new(T.JSArrayOfListenable().of([this.selectController, this.enableController])), builder: dart.fn((context, child) => new container.Container.new({decoration: new shape_decoration.ShapeDecoration.new({shape: resolvedShape, color: this.getBackgroundColor(chipTheme)}), child: child, $creationLocationd_0dea112b090073317d4: C[163] || CT.C163}), T.BuildContextAndWidgetNToContainer()), child: this[_wrapWithTooltip](this.widget.tooltip, this.widget.onPressed, new chip$._ChipRenderWidget.new({theme: new chip$._ChipRenderTheme.new({label: new text.DefaultTextStyle.new({overflow: paragraph.TextOverflow.fade, textAlign: ui.TextAlign.start, maxLines: 1, softWrap: false, style: resolvedLabelStyle, child: this.widget.label, $creationLocationd_0dea112b090073317d4: C[167] || CT.C167}), avatar: new animated_switcher.AnimatedSwitcher.new({child: this.widget.avatar, duration: chip$._kDrawerDuration, switchInCurve: curves.Curves.fastOutSlowIn, $creationLocationd_0dea112b090073317d4: C[175] || CT.C175}), deleteIcon: new animated_switcher.AnimatedSwitcher.new({child: this[_buildDeleteIcon](context, theme, chipTheme, this.deleteIconKey), duration: chip$._kDrawerDuration, switchInCurve: curves.Curves.fastOutSlowIn, $creationLocationd_0dea112b090073317d4: C[180] || CT.C180}), brightness: chipTheme.brightness, padding: (t9$11 = this.widget.padding, t9$11 == null ? chipTheme.padding : t9$11).resolve(textDirection), visualDensity: (t9$12 = this.widget.visualDensity, t9$12 == null ? theme.visualDensity : t9$12), labelPadding: labelPadding.resolve(textDirection), showAvatar: this.hasAvatar, showCheckmark: showCheckmark, checkmarkColor: checkmarkColor, canTapBody: this.canTap}), value: this.widget.selected, checkmarkAnimation: this.checkmarkAnimation, enableAnimation: this.enableAnimation, avatarDrawerAnimation: this.avatarDrawerAnimation, deleteDrawerAnimation: this.deleteDrawerAnimation, isEnabled: this.widget.isEnabled, avatarBorder: this.widget.avatarBorder, $creationLocationd_0dea112b090073317d4: C[185] || CT.C185})), $creationLocationd_0dea112b090073317d4: C[195] || CT.C195}), $creationLocationd_0dea112b090073317d4: C[200] || CT.C200}), $creationLocationd_0dea112b090073317d4: C[213] || CT.C213});
      let constraints = null;
      let densityAdjustment = (t9$13 = this.widget.visualDensity, t9$13 == null ? theme.visualDensity : t9$13).baseSizeAdjustment;
      switch (t9$14 = this.widget.materialTapTargetSize, t9$14 == null ? theme.materialTapTargetSize : t9$14) {
        case C[221] || CT.C221:
        {
          constraints = new box$.BoxConstraints.new({minWidth: 48 + densityAdjustment.dx, minHeight: 48 + densityAdjustment.dy});
          break;
        }
        case C[223] || CT.C223:
        {
          constraints = C[222] || CT.C222;
          break;
        }
      }
      result = new chip$._ChipRedirectingHitDetectionWidget.new({constraints: constraints, child: new basic.Center.new({child: result, widthFactor: 1.0, heightFactor: 1.0, $creationLocationd_0dea112b090073317d4: C[224] || CT.C224}), $creationLocationd_0dea112b090073317d4: C[229] || CT.C229});
      return new basic.Semantics.new({button: this.widget.tapEnabled, container: true, selected: this.widget.selected, enabled: this.widget.tapEnabled ? this.canTap : null, child: result, $creationLocationd_0dea112b090073317d4: C[233] || CT.C233});
    }
  };
  (chip$._RawChipState.new = function() {
    this[___RawChipState_selectController] = null;
    this[___RawChipState_avatarDrawerController] = null;
    this[___RawChipState_deleteDrawerController] = null;
    this[___RawChipState_enableController] = null;
    this[___RawChipState_checkmarkAnimation] = null;
    this[___RawChipState_avatarDrawerAnimation] = null;
    this[___RawChipState_deleteDrawerAnimation] = null;
    this[___RawChipState_enableAnimation] = null;
    this[___RawChipState_selectionFade] = null;
    this[_states] = T.LinkedHashSetOfMaterialState().new();
    this.deleteIconKey = T.GlobalKeyOfStateOfStatefulWidget().new();
    this[_isTapping] = false;
    chip$._RawChipState.__proto__.new.call(this);
    ;
  }).prototype = chip$._RawChipState.prototype;
  dart.addTypeTests(chip$._RawChipState);
  dart.addTypeCaches(chip$._RawChipState);
  dart.setMethodSignature(chip$._RawChipState, () => ({
    __proto__: dart.getMethods(chip$._RawChipState.__proto__),
    [_updateState]: dart.fnType(dart.void, [material_state.MaterialState, core.bool]),
    [_handleTapDown]: dart.fnType(dart.void, [tap.TapDownDetails]),
    [_handleTapCancel]: dart.fnType(dart.void, []),
    [_handleTap]: dart.fnType(dart.void, []),
    [_handleFocus]: dart.fnType(dart.void, [core.bool]),
    [_handleHover]: dart.fnType(dart.void, [core.bool]),
    [_getShape]: dart.fnType(borders.OutlinedBorder, [chip_theme.ChipThemeData]),
    getBackgroundColor: dart.fnType(dart.nullable(ui.Color), [chip_theme.ChipThemeData]),
    [_wrapWithTooltip]: dart.fnType(dart.nullable(framework.Widget), [dart.nullable(core.String), dart.nullable(dart.fnType(dart.void, [])), dart.nullable(framework.Widget)]),
    [_buildDeleteIcon]: dart.fnType(dart.nullable(framework.Widget), [framework.BuildContext, theme_data.ThemeData, chip_theme.ChipThemeData, framework.GlobalKey$(framework.State$(framework.StatefulWidget))]),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(chip$._RawChipState, () => ({
    __proto__: dart.getGetters(chip$._RawChipState.__proto__),
    selectController: animation_controller.AnimationController,
    avatarDrawerController: animation_controller.AnimationController,
    deleteDrawerController: animation_controller.AnimationController,
    enableController: animation_controller.AnimationController,
    checkmarkAnimation: animation.Animation$(core.double),
    avatarDrawerAnimation: animation.Animation$(core.double),
    deleteDrawerAnimation: animation.Animation$(core.double),
    enableAnimation: animation.Animation$(core.double),
    selectionFade: animation.Animation$(core.double),
    hasDeleteButton: core.bool,
    hasAvatar: core.bool,
    canTap: core.bool,
    isTapping: core.bool
  }));
  dart.setSetterSignature(chip$._RawChipState, () => ({
    __proto__: dart.getSetters(chip$._RawChipState.__proto__),
    selectController: animation_controller.AnimationController,
    avatarDrawerController: animation_controller.AnimationController,
    deleteDrawerController: animation_controller.AnimationController,
    enableController: animation_controller.AnimationController,
    checkmarkAnimation: animation.Animation$(core.double),
    avatarDrawerAnimation: animation.Animation$(core.double),
    deleteDrawerAnimation: animation.Animation$(core.double),
    enableAnimation: animation.Animation$(core.double),
    selectionFade: animation.Animation$(core.double)
  }));
  dart.setLibraryUri(chip$._RawChipState, I[0]);
  dart.setFieldSignature(chip$._RawChipState, () => ({
    __proto__: dart.getFields(chip$._RawChipState.__proto__),
    [___RawChipState_selectController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___RawChipState_avatarDrawerController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___RawChipState_deleteDrawerController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___RawChipState_enableController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [___RawChipState_checkmarkAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___RawChipState_avatarDrawerAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___RawChipState_deleteDrawerAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___RawChipState_enableAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [___RawChipState_selectionFade]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [_states]: dart.finalFieldType(core.Set$(material_state.MaterialState)),
    deleteIconKey: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget))),
    [_isTapping]: dart.fieldType(core.bool)
  }));
  dart.defineLazy(chip$._RawChipState, {
    /*chip$._RawChipState.pressedAnimationDuration*/get pressedAnimationDuration() {
      return C[240] || CT.C240;
    },
    /*chip$._RawChipState._defaultElevation*/get _defaultElevation() {
      return 0;
    },
    /*chip$._RawChipState._defaultPressElevation*/get _defaultPressElevation() {
      return 8;
    },
    /*chip$._RawChipState._defaultShadowColor*/get _defaultShadowColor() {
      return C[28] || CT.C28;
    }
  }, false);
  var constraints$ = dart.privateName(chip$, "_ChipRedirectingHitDetectionWidget.constraints");
  chip$._ChipRedirectingHitDetectionWidget = class _ChipRedirectingHitDetectionWidget extends framework.SingleChildRenderObjectWidget {
    get constraints() {
      return this[constraints$];
    }
    set constraints(value) {
      super.constraints = value;
    }
    createRenderObject(context) {
      return new chip$._RenderChipRedirectingHitDetection.new(this.constraints);
    }
    updateRenderObject(context, renderObject) {
      chip$._RenderChipRedirectingHitDetection.as(renderObject);
      renderObject.additionalConstraints = this.constraints;
    }
  };
  (chip$._ChipRedirectingHitDetectionWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let child = opts && 'child' in opts ? opts.child : null;
    let constraints = opts && 'constraints' in opts ? opts.constraints : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[constraints$] = constraints;
    chip$._ChipRedirectingHitDetectionWidget.__proto__.new.call(this, {key: key, child: child, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = chip$._ChipRedirectingHitDetectionWidget.prototype;
  dart.addTypeTests(chip$._ChipRedirectingHitDetectionWidget);
  dart.addTypeCaches(chip$._ChipRedirectingHitDetectionWidget);
  dart.setMethodSignature(chip$._ChipRedirectingHitDetectionWidget, () => ({
    __proto__: dart.getMethods(chip$._ChipRedirectingHitDetectionWidget.__proto__),
    createRenderObject: dart.fnType(object.RenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(chip$._ChipRedirectingHitDetectionWidget, I[0]);
  dart.setFieldSignature(chip$._ChipRedirectingHitDetectionWidget, () => ({
    __proto__: dart.getFields(chip$._ChipRedirectingHitDetectionWidget.__proto__),
    constraints: dart.finalFieldType(box$.BoxConstraints)
  }));
  chip$._RenderChipRedirectingHitDetection = class _RenderChipRedirectingHitDetection extends proxy_box.RenderConstrainedBox {
    hitTest(result, opts) {
      let position = opts && 'position' in opts ? opts.position : null;
      if (!this.size.contains(position)) return false;
      let offset = new ui.Offset.new(position.dx, this.size.height / 2);
      return result.addWithRawTransform({transform: matrix_utils.MatrixUtils.forceToPoint(offset), position: position, hitTest: dart.fn((result, position) => {
          if (!dart.equals(position, offset)) dart.assertFailed(null, I[1], 2086, 16, "position == offset");
          return dart.nullCheck(this.child).hitTest(result, {position: offset});
        }, T.BoxHitTestResultAndOffsetNTobool())});
    }
  };
  (chip$._RenderChipRedirectingHitDetection.new = function(additionalConstraints) {
    chip$._RenderChipRedirectingHitDetection.__proto__.new.call(this, {additionalConstraints: additionalConstraints});
    ;
  }).prototype = chip$._RenderChipRedirectingHitDetection.prototype;
  dart.addTypeTests(chip$._RenderChipRedirectingHitDetection);
  dart.addTypeCaches(chip$._RenderChipRedirectingHitDetection);
  dart.setLibraryUri(chip$._RenderChipRedirectingHitDetection, I[0]);
  var theme$0 = dart.privateName(chip$, "_ChipRenderWidget.theme");
  var value$ = dart.privateName(chip$, "_ChipRenderWidget.value");
  var isEnabled$1 = dart.privateName(chip$, "_ChipRenderWidget.isEnabled");
  var checkmarkAnimation$ = dart.privateName(chip$, "_ChipRenderWidget.checkmarkAnimation");
  var avatarDrawerAnimation$ = dart.privateName(chip$, "_ChipRenderWidget.avatarDrawerAnimation");
  var deleteDrawerAnimation$ = dart.privateName(chip$, "_ChipRenderWidget.deleteDrawerAnimation");
  var enableAnimation$ = dart.privateName(chip$, "_ChipRenderWidget.enableAnimation");
  var avatarBorder$3 = dart.privateName(chip$, "_ChipRenderWidget.avatarBorder");
  chip$._ChipRenderWidget = class _ChipRenderWidget extends framework.RenderObjectWidget {
    get theme() {
      return this[theme$0];
    }
    set theme(value) {
      super.theme = value;
    }
    get value() {
      return this[value$];
    }
    set value(value) {
      super.value = value;
    }
    get isEnabled() {
      return this[isEnabled$1];
    }
    set isEnabled(value) {
      super.isEnabled = value;
    }
    get checkmarkAnimation() {
      return this[checkmarkAnimation$];
    }
    set checkmarkAnimation(value) {
      super.checkmarkAnimation = value;
    }
    get avatarDrawerAnimation() {
      return this[avatarDrawerAnimation$];
    }
    set avatarDrawerAnimation(value) {
      super.avatarDrawerAnimation = value;
    }
    get deleteDrawerAnimation() {
      return this[deleteDrawerAnimation$];
    }
    set deleteDrawerAnimation(value) {
      super.deleteDrawerAnimation = value;
    }
    get enableAnimation() {
      return this[enableAnimation$];
    }
    set enableAnimation(value) {
      super.enableAnimation = value;
    }
    get avatarBorder() {
      return this[avatarBorder$3];
    }
    set avatarBorder(value) {
      super.avatarBorder = value;
    }
    createElement() {
      return new chip$._RenderChipElement.new(this);
    }
    updateRenderObject(context, renderObject) {
      let t9;
      chip$._RenderChip.as(renderObject);
      t9 = renderObject;
      (() => {
        t9.theme = this.theme;
        t9.textDirection = basic.Directionality.of(context);
        t9.value = this.value;
        t9.isEnabled = this.isEnabled;
        t9.checkmarkAnimation = this.checkmarkAnimation;
        t9.avatarDrawerAnimation = this.avatarDrawerAnimation;
        t9.deleteDrawerAnimation = this.deleteDrawerAnimation;
        t9.enableAnimation = this.enableAnimation;
        t9.avatarBorder = this.avatarBorder;
        return t9;
      })();
    }
    createRenderObject(context) {
      return new chip$._RenderChip.new({theme: this.theme, textDirection: basic.Directionality.of(context), value: this.value, isEnabled: this.isEnabled, checkmarkAnimation: this.checkmarkAnimation, avatarDrawerAnimation: this.avatarDrawerAnimation, deleteDrawerAnimation: this.deleteDrawerAnimation, enableAnimation: this.enableAnimation, avatarBorder: this.avatarBorder});
    }
  };
  (chip$._ChipRenderWidget.new = function(opts) {
    let key = opts && 'key' in opts ? opts.key : null;
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let isEnabled = opts && 'isEnabled' in opts ? opts.isEnabled : null;
    let checkmarkAnimation = opts && 'checkmarkAnimation' in opts ? opts.checkmarkAnimation : null;
    let avatarDrawerAnimation = opts && 'avatarDrawerAnimation' in opts ? opts.avatarDrawerAnimation : null;
    let deleteDrawerAnimation = opts && 'deleteDrawerAnimation' in opts ? opts.deleteDrawerAnimation : null;
    let enableAnimation = opts && 'enableAnimation' in opts ? opts.enableAnimation : null;
    let avatarBorder = opts && 'avatarBorder' in opts ? opts.avatarBorder : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[theme$0] = theme;
    this[value$] = value;
    this[isEnabled$1] = isEnabled;
    this[checkmarkAnimation$] = checkmarkAnimation;
    this[avatarDrawerAnimation$] = avatarDrawerAnimation;
    this[deleteDrawerAnimation$] = deleteDrawerAnimation;
    this[enableAnimation$] = enableAnimation;
    this[avatarBorder$3] = avatarBorder;
    if (!(theme !== null)) dart.assertFailed(null, I[1], 2104, 15, "theme != null");
    chip$._ChipRenderWidget.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = chip$._ChipRenderWidget.prototype;
  dart.addTypeTests(chip$._ChipRenderWidget);
  dart.addTypeCaches(chip$._ChipRenderWidget);
  dart.setMethodSignature(chip$._ChipRenderWidget, () => ({
    __proto__: dart.getMethods(chip$._ChipRenderWidget.__proto__),
    createElement: dart.fnType(chip$._RenderChipElement, []),
    createRenderObject: dart.fnType(object.RenderObject, [framework.BuildContext])
  }));
  dart.setLibraryUri(chip$._ChipRenderWidget, I[0]);
  dart.setFieldSignature(chip$._ChipRenderWidget, () => ({
    __proto__: dart.getFields(chip$._ChipRenderWidget.__proto__),
    theme: dart.finalFieldType(chip$._ChipRenderTheme),
    value: dart.finalFieldType(dart.nullable(core.bool)),
    isEnabled: dart.finalFieldType(dart.nullable(core.bool)),
    checkmarkAnimation: dart.finalFieldType(animation.Animation$(core.double)),
    avatarDrawerAnimation: dart.finalFieldType(animation.Animation$(core.double)),
    deleteDrawerAnimation: dart.finalFieldType(animation.Animation$(core.double)),
    enableAnimation: dart.finalFieldType(animation.Animation$(core.double)),
    avatarBorder: dart.finalFieldType(dart.nullable(borders.ShapeBorder))
  }));
  var _name$1 = dart.privateName(chip$, "_name");
  chip$._ChipSlot = class _ChipSlot extends core.Object {
    toString() {
      return this[_name$1];
    }
  };
  (chip$._ChipSlot.new = function(index, _name) {
    this.index = index;
    this[_name$1] = _name;
    ;
  }).prototype = chip$._ChipSlot.prototype;
  dart.addTypeTests(chip$._ChipSlot);
  dart.addTypeCaches(chip$._ChipSlot);
  dart.setLibraryUri(chip$._ChipSlot, I[0]);
  dart.setFieldSignature(chip$._ChipSlot, () => ({
    __proto__: dart.getFields(chip$._ChipSlot.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$1]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(chip$._ChipSlot, ['toString']);
  chip$._ChipSlot.label = C[241] || CT.C241;
  chip$._ChipSlot.avatar = C[242] || CT.C242;
  chip$._ChipSlot.deleteIcon = C[243] || CT.C243;
  chip$._ChipSlot.values = C[244] || CT.C244;
  var _mountChild = dart.privateName(chip$, "_mountChild");
  var _updateChild = dart.privateName(chip$, "_updateChild");
  var _updateRenderObject = dart.privateName(chip$, "_updateRenderObject");
  chip$._RenderChipElement = class _RenderChipElement extends framework.RenderObjectElement {
    get widget() {
      return chip$._ChipRenderWidget.as(super.widget);
    }
    get renderObject() {
      return chip$._RenderChip.as(super.renderObject);
    }
    visitChildren(visitor) {
      this.slotToChild[$values][$forEach](visitor);
    }
    forgetChild(child) {
      if (!this.slotToChild[$containsValue](child)) dart.assertFailed(null, I[1], 2173, 12, "slotToChild.containsValue(child)");
      if (!chip$._ChipSlot.is(child.slot)) dart.assertFailed(null, I[1], 2174, 12, "child.slot is _ChipSlot");
      if (!this.slotToChild[$containsKey](child.slot)) dart.assertFailed(null, I[1], 2175, 12, "slotToChild.containsKey(child.slot)");
      this.slotToChild[$remove](child.slot);
      super.forgetChild(child);
    }
    [_mountChild](widget, slot) {
      let oldChild = this.slotToChild[$_get](slot);
      let newChild = this.updateChild(oldChild, widget, slot);
      if (oldChild != null) {
        this.slotToChild[$remove](slot);
      }
      if (newChild != null) {
        this.slotToChild[$_set](slot, newChild);
      }
    }
    mount(parent, newSlot) {
      super.mount(parent, newSlot);
      this[_mountChild](this.widget.theme.avatar, chip$._ChipSlot.avatar);
      this[_mountChild](this.widget.theme.deleteIcon, chip$._ChipSlot.deleteIcon);
      this[_mountChild](this.widget.theme.label, chip$._ChipSlot.label);
    }
    [_updateChild](widget, slot) {
      let oldChild = this.slotToChild[$_get](slot);
      let newChild = this.updateChild(oldChild, widget, slot);
      if (oldChild != null) {
        this.slotToChild[$remove](slot);
      }
      if (newChild != null) {
        this.slotToChild[$_set](slot, newChild);
      }
    }
    update(newWidget) {
      chip$._ChipRenderWidget.as(newWidget);
      super.update(newWidget);
      if (!this.widget._equals(newWidget)) dart.assertFailed(null, I[1], 2213, 12, "widget == newWidget");
      this[_updateChild](this.widget.theme.label, chip$._ChipSlot.label);
      this[_updateChild](this.widget.theme.avatar, chip$._ChipSlot.avatar);
      this[_updateChild](this.widget.theme.deleteIcon, chip$._ChipSlot.deleteIcon);
    }
    [_updateRenderObject](child, slot) {
      switch (slot) {
        case C[242] || CT.C242:
        {
          this.renderObject.avatar = T.RenderBoxN().as(child);
          break;
        }
        case C[241] || CT.C241:
        {
          this.renderObject.label = T.RenderBoxN().as(child);
          break;
        }
        case C[243] || CT.C243:
        {
          this.renderObject.deleteIcon = T.RenderBoxN().as(child);
          break;
        }
      }
    }
    insertRenderObjectChild(child, slot) {
      object.RenderObject.as(child);
      chip$._ChipSlot.as(slot);
      if (!box$.RenderBox.is(child)) dart.assertFailed(null, I[1], 2235, 12, "child is RenderBox");
      this[_updateRenderObject](child, slot);
      if (!this.renderObject.children[$keys][$contains](slot)) dart.assertFailed(null, I[1], 2237, 12, "renderObject.children.keys.contains(slot)");
    }
    removeRenderObjectChild(child, slot) {
      object.RenderObject.as(child);
      chip$._ChipSlot.as(slot);
      if (!box$.RenderBox.is(child)) dart.assertFailed(null, I[1], 2242, 12, "child is RenderBox");
      if (!dart.equals(this.renderObject.children[$_get](slot), child)) dart.assertFailed(null, I[1], 2243, 12, "renderObject.children[slot] == child");
      this[_updateRenderObject](null, slot);
      if (!!this.renderObject.children[$keys][$contains](slot)) dart.assertFailed(null, I[1], 2245, 12, "!renderObject.children.keys.contains(slot)");
    }
    moveRenderObjectChild(child, oldSlot, newSlot) {
      object.RenderObject.as(child);
      if (!false) dart.assertFailed("not reachable", I[1], 2250, 12, "false");
    }
  };
  (chip$._RenderChipElement.new = function(chip) {
    this.slotToChild = new (T.LinkedMapOf_ChipSlot$Element()).new();
    chip$._RenderChipElement.__proto__.new.call(this, chip);
    ;
  }).prototype = chip$._RenderChipElement.prototype;
  dart.addTypeTests(chip$._RenderChipElement);
  dart.addTypeCaches(chip$._RenderChipElement);
  dart.setMethodSignature(chip$._RenderChipElement, () => ({
    __proto__: dart.getMethods(chip$._RenderChipElement.__proto__),
    [_mountChild]: dart.fnType(dart.void, [framework.Widget, chip$._ChipSlot]),
    [_updateChild]: dart.fnType(dart.void, [framework.Widget, chip$._ChipSlot]),
    [_updateRenderObject]: dart.fnType(dart.void, [dart.nullable(object.RenderObject), chip$._ChipSlot])
  }));
  dart.setGetterSignature(chip$._RenderChipElement, () => ({
    __proto__: dart.getGetters(chip$._RenderChipElement.__proto__),
    widget: chip$._ChipRenderWidget,
    renderObject: chip$._RenderChip
  }));
  dart.setLibraryUri(chip$._RenderChipElement, I[0]);
  dart.setFieldSignature(chip$._RenderChipElement, () => ({
    __proto__: dart.getFields(chip$._RenderChipElement.__proto__),
    slotToChild: dart.finalFieldType(core.Map$(chip$._ChipSlot, framework.Element))
  }));
  var avatar$5 = dart.privateName(chip$, "_ChipRenderTheme.avatar");
  var label$5 = dart.privateName(chip$, "_ChipRenderTheme.label");
  var deleteIcon$2 = dart.privateName(chip$, "_ChipRenderTheme.deleteIcon");
  var brightness$ = dart.privateName(chip$, "_ChipRenderTheme.brightness");
  var padding$5 = dart.privateName(chip$, "_ChipRenderTheme.padding");
  var visualDensity$5 = dart.privateName(chip$, "_ChipRenderTheme.visualDensity");
  var labelPadding$5 = dart.privateName(chip$, "_ChipRenderTheme.labelPadding");
  var showAvatar$ = dart.privateName(chip$, "_ChipRenderTheme.showAvatar");
  var showCheckmark$2 = dart.privateName(chip$, "_ChipRenderTheme.showCheckmark");
  var checkmarkColor$2 = dart.privateName(chip$, "_ChipRenderTheme.checkmarkColor");
  var canTapBody$ = dart.privateName(chip$, "_ChipRenderTheme.canTapBody");
  chip$._ChipRenderTheme = class _ChipRenderTheme extends core.Object {
    get avatar() {
      return this[avatar$5];
    }
    set avatar(value) {
      super.avatar = value;
    }
    get label() {
      return this[label$5];
    }
    set label(value) {
      super.label = value;
    }
    get deleteIcon() {
      return this[deleteIcon$2];
    }
    set deleteIcon(value) {
      super.deleteIcon = value;
    }
    get brightness() {
      return this[brightness$];
    }
    set brightness(value) {
      super.brightness = value;
    }
    get padding() {
      return this[padding$5];
    }
    set padding(value) {
      super.padding = value;
    }
    get visualDensity() {
      return this[visualDensity$5];
    }
    set visualDensity(value) {
      super.visualDensity = value;
    }
    get labelPadding() {
      return this[labelPadding$5];
    }
    set labelPadding(value) {
      super.labelPadding = value;
    }
    get showAvatar() {
      return this[showAvatar$];
    }
    set showAvatar(value) {
      super.showAvatar = value;
    }
    get showCheckmark() {
      return this[showCheckmark$2];
    }
    set showCheckmark(value) {
      super.showCheckmark = value;
    }
    get checkmarkColor() {
      return this[checkmarkColor$2];
    }
    set checkmarkColor(value) {
      super.checkmarkColor = value;
    }
    get canTapBody() {
      return this[canTapBody$];
    }
    set canTapBody(value) {
      super.canTapBody = value;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!other[$runtimeType]._equals(this[$runtimeType])) {
        return false;
      }
      return chip$._ChipRenderTheme.is(other) && other.avatar._equals(this.avatar) && other.label._equals(this.label) && other.deleteIcon._equals(this.deleteIcon) && other.brightness === this.brightness && other.padding._equals(this.padding) && other.labelPadding._equals(this.labelPadding) && other.showAvatar === this.showAvatar && other.showCheckmark === this.showCheckmark && dart.equals(other.checkmarkColor, this.checkmarkColor) && other.canTapBody === this.canTapBody;
    }
    get hashCode() {
      return ui.hashValues(this.avatar, this.label, this.deleteIcon, this.brightness, this.padding, this.labelPadding, this.showAvatar, this.showCheckmark, this.checkmarkColor, this.canTapBody);
    }
  };
  (chip$._ChipRenderTheme.new = function(opts) {
    let avatar = opts && 'avatar' in opts ? opts.avatar : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let deleteIcon = opts && 'deleteIcon' in opts ? opts.deleteIcon : null;
    let brightness = opts && 'brightness' in opts ? opts.brightness : null;
    let padding = opts && 'padding' in opts ? opts.padding : null;
    let visualDensity = opts && 'visualDensity' in opts ? opts.visualDensity : null;
    let labelPadding = opts && 'labelPadding' in opts ? opts.labelPadding : null;
    let showAvatar = opts && 'showAvatar' in opts ? opts.showAvatar : null;
    let showCheckmark = opts && 'showCheckmark' in opts ? opts.showCheckmark : null;
    let checkmarkColor = opts && 'checkmarkColor' in opts ? opts.checkmarkColor : null;
    let canTapBody = opts && 'canTapBody' in opts ? opts.canTapBody : null;
    this[avatar$5] = avatar;
    this[label$5] = label;
    this[deleteIcon$2] = deleteIcon;
    this[brightness$] = brightness;
    this[padding$5] = padding;
    this[visualDensity$5] = visualDensity;
    this[labelPadding$5] = labelPadding;
    this[showAvatar$] = showAvatar;
    this[showCheckmark$2] = showCheckmark;
    this[checkmarkColor$2] = checkmarkColor;
    this[canTapBody$] = canTapBody;
    ;
  }).prototype = chip$._ChipRenderTheme.prototype;
  dart.addTypeTests(chip$._ChipRenderTheme);
  dart.addTypeCaches(chip$._ChipRenderTheme);
  dart.setLibraryUri(chip$._ChipRenderTheme, I[0]);
  dart.setFieldSignature(chip$._ChipRenderTheme, () => ({
    __proto__: dart.getFields(chip$._ChipRenderTheme.__proto__),
    avatar: dart.finalFieldType(framework.Widget),
    label: dart.finalFieldType(framework.Widget),
    deleteIcon: dart.finalFieldType(framework.Widget),
    brightness: dart.finalFieldType(ui.Brightness),
    padding: dart.finalFieldType(edge_insets.EdgeInsets),
    visualDensity: dart.finalFieldType(theme_data.VisualDensity),
    labelPadding: dart.finalFieldType(edge_insets.EdgeInsets),
    showAvatar: dart.finalFieldType(core.bool),
    showCheckmark: dart.finalFieldType(core.bool),
    checkmarkColor: dart.finalFieldType(dart.nullable(ui.Color)),
    canTapBody: dart.finalFieldType(core.bool)
  }));
  dart.defineExtensionMethods(chip$._ChipRenderTheme, ['_equals']);
  dart.defineExtensionAccessors(chip$._ChipRenderTheme, ['hashCode']);
  var ___RenderChip__deleteButtonRect = dart.privateName(chip$, "_#_RenderChip#_deleteButtonRect");
  var ___RenderChip__pressRect = dart.privateName(chip$, "_#_RenderChip#_pressRect");
  var _avatar = dart.privateName(chip$, "_avatar");
  var _deleteIcon = dart.privateName(chip$, "_deleteIcon");
  var _label = dart.privateName(chip$, "_label");
  var _theme = dart.privateName(chip$, "_theme");
  var _textDirection = dart.privateName(chip$, "_textDirection");
  var _deleteButtonRect = dart.privateName(chip$, "_deleteButtonRect");
  var _pressRect = dart.privateName(chip$, "_pressRect");
  var _children = dart.privateName(chip$, "_children");
  var _layoutLabel = dart.privateName(chip$, "_layoutLabel");
  var _layoutAvatar = dart.privateName(chip$, "_layoutAvatar");
  var _layoutDeleteIcon = dart.privateName(chip$, "_layoutDeleteIcon");
  var _computeSizes = dart.privateName(chip$, "_computeSizes");
  var _disabledColor = dart.privateName(chip$, "_disabledColor");
  var _paintCheck = dart.privateName(chip$, "_paintCheck");
  var _paintSelectionOverlay = dart.privateName(chip$, "_paintSelectionOverlay");
  var _paintAvatar = dart.privateName(chip$, "_paintAvatar");
  var _paintChild = dart.privateName(chip$, "_paintChild");
  chip$._RenderChip = class _RenderChip extends box$.RenderBox {
    set [_deleteButtonRect](t9) {
      this[___RenderChip__deleteButtonRect] = t9;
    }
    get [_deleteButtonRect]() {
      let t10;
      t10 = this[___RenderChip__deleteButtonRect];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_deleteButtonRect")) : t10;
    }
    get [_pressRect]() {
      let t10;
      t10 = this[___RenderChip__pressRect];
      return t10 == null ? dart.throw(new _internal.LateError.fieldNI("_pressRect")) : t10;
    }
    set [_pressRect](t10) {
      this[___RenderChip__pressRect] = t10;
    }
    [_updateChild](oldChild, newChild, slot) {
      if (oldChild != null) {
        this.dropChild(oldChild);
        this.children[$remove](slot);
      }
      if (newChild != null) {
        this.children[$_set](slot, newChild);
        this.adoptChild(newChild);
      }
      return newChild;
    }
    get avatar() {
      return this[_avatar];
    }
    set avatar(value) {
      this[_avatar] = this[_updateChild](this[_avatar], value, chip$._ChipSlot.avatar);
    }
    get deleteIcon() {
      return this[_deleteIcon];
    }
    set deleteIcon(value) {
      this[_deleteIcon] = this[_updateChild](this[_deleteIcon], value, chip$._ChipSlot.deleteIcon);
    }
    get label() {
      return this[_label];
    }
    set label(value) {
      this[_label] = this[_updateChild](this[_label], value, chip$._ChipSlot.label);
    }
    get theme() {
      return this[_theme];
    }
    set theme(value) {
      if (this[_theme]._equals(value)) {
        return;
      }
      this[_theme] = value;
      this.markNeedsLayout();
    }
    get textDirection() {
      return this[_textDirection];
    }
    set textDirection(value) {
      if (this[_textDirection] == value) {
        return;
      }
      this[_textDirection] = value;
      this.markNeedsLayout();
    }
    get [_children]() {
      return new (T.SyncIterableOfRenderBox()).new((function* _children() {
        if (this.avatar != null) {
          yield dart.nullCheck(this.avatar);
        }
        if (this.label != null) {
          yield dart.nullCheck(this.label);
        }
        if (this.deleteIcon != null) {
          yield dart.nullCheck(this.deleteIcon);
        }
      }).bind(this));
    }
    get isDrawingCheckmark() {
      return this.theme.showCheckmark && !this.checkmarkAnimation.isDismissed;
    }
    get deleteIconShowing() {
      return !this.deleteDrawerAnimation.isDismissed;
    }
    attach(owner) {
      object.PipelineOwner.as(owner);
      super.attach(owner);
      for (let child of this[_children]) {
        child.attach(owner);
      }
    }
    detach() {
      super.detach();
      for (let child of this[_children]) {
        child.detach();
      }
    }
    redepthChildren() {
      this[_children][$forEach](dart.bind(this, 'redepthChild'));
    }
    visitChildren(visitor) {
      this[_children][$forEach](visitor);
    }
    debugDescribeChildren() {
      let value = T.JSArrayOfDiagnosticsNode().of([]);
      function add(child, name) {
        if (child != null) {
          value[$add](child.toDiagnosticsNode({name: name}));
        }
      }
      dart.fn(add, T.RenderBoxNAndStringTovoid());
      add(this.avatar, "avatar");
      add(this.label, "label");
      add(this.deleteIcon, "deleteIcon");
      return value;
    }
    get sizedByParent() {
      return false;
    }
    static _minWidth(box, height) {
      return box == null ? 0.0 : box.getMinIntrinsicWidth(height);
    }
    static _maxWidth(box, height) {
      return box == null ? 0.0 : box.getMaxIntrinsicWidth(height);
    }
    static _minHeight(box, width) {
      return box == null ? 0.0 : box.getMinIntrinsicHeight(width);
    }
    static _boxSize(box) {
      return box == null ? ui.Size.zero : box.size;
    }
    static _boxRect(box) {
      return box == null ? ui.Rect.zero : chip$._RenderChip._boxParentData(box).offset['&'](box.size);
    }
    static _boxParentData(box) {
      return box$.BoxParentData.as(dart.nullCheck(box.parentData));
    }
    computeMinIntrinsicWidth(height) {
      let overallPadding = this.theme.padding.horizontal + this.theme.labelPadding.horizontal;
      return overallPadding + chip$._RenderChip._minWidth(this.avatar, height) + chip$._RenderChip._minWidth(this.label, height) + chip$._RenderChip._minWidth(this.deleteIcon, height);
    }
    computeMaxIntrinsicWidth(height) {
      let overallPadding = this.theme.padding.horizontal + this.theme.labelPadding.horizontal;
      return overallPadding + chip$._RenderChip._maxWidth(this.avatar, height) + chip$._RenderChip._maxWidth(this.label, height) + chip$._RenderChip._maxWidth(this.deleteIcon, height);
    }
    computeMinIntrinsicHeight(width) {
      return math.max(core.double, 32, this.theme.padding.vertical + this.theme.labelPadding.vertical + chip$._RenderChip._minHeight(this.label, width));
    }
    computeMaxIntrinsicHeight(width) {
      return this.computeMinIntrinsicHeight(width);
    }
    computeDistanceToActualBaseline(baseline) {
      return dart.nullCheck(this.label).getDistanceToActualBaseline(baseline);
    }
    [_layoutLabel](contentConstraints, iconSizes, size, rawSize, layoutChild = C[245] || CT.C245) {
      if (contentConstraints.maxWidth[$isFinite]) {
        let maxWidth = math.max(core.double, 0.0, contentConstraints.maxWidth - iconSizes - this.theme.labelPadding.horizontal - this.theme.padding.horizontal);
        let updatedSize = layoutChild(dart.nullCheck(this.label), new box$.BoxConstraints.new({minWidth: 0.0, maxWidth: maxWidth, minHeight: rawSize.height, maxHeight: size.height}));
        return new ui.Size.new(updatedSize.width + this.theme.labelPadding.horizontal, updatedSize.height + this.theme.labelPadding.vertical);
      }
      let updatedSize = layoutChild(dart.nullCheck(this.label), new box$.BoxConstraints.new({minHeight: rawSize.height, maxHeight: size.height, minWidth: 0.0, maxWidth: size.width}));
      return new ui.Size.new(updatedSize.width + this.theme.labelPadding.horizontal, updatedSize.height + this.theme.labelPadding.vertical);
    }
    [_layoutAvatar](contentConstraints, contentSize, layoutChild = C[245] || CT.C245) {
      let requestedSize = math.max(core.double, 0.0, contentSize);
      let avatarConstraints = new box$.BoxConstraints.tightFor({width: requestedSize, height: requestedSize});
      let avatarBoxSize = layoutChild(dart.nullCheck(this.avatar), avatarConstraints);
      if (!this.theme.showCheckmark && !this.theme.showAvatar) {
        return new ui.Size.new(0.0, contentSize);
      }
      let avatarWidth = 0.0;
      let avatarHeight = 0.0;
      if (this.theme.showAvatar) {
        avatarWidth = avatarWidth + this.avatarDrawerAnimation.value * avatarBoxSize.width;
      } else {
        avatarWidth = avatarWidth + this.avatarDrawerAnimation.value * contentSize;
      }
      avatarHeight = avatarHeight + avatarBoxSize.height;
      return new ui.Size.new(avatarWidth, avatarHeight);
    }
    [_layoutDeleteIcon](contentConstraints, contentSize, layoutChild = C[245] || CT.C245) {
      let requestedSize = math.max(core.double, 0.0, contentSize);
      let deleteIconConstraints = new box$.BoxConstraints.tightFor({width: requestedSize, height: requestedSize});
      let boxSize = layoutChild(dart.nullCheck(this.deleteIcon), deleteIconConstraints);
      if (!this.deleteIconShowing) {
        return new ui.Size.new(0.0, contentSize);
      }
      let deleteIconWidth = 0.0;
      let deleteIconHeight = 0.0;
      deleteIconWidth = deleteIconWidth + this.deleteDrawerAnimation.value * boxSize.width;
      deleteIconHeight = deleteIconHeight + boxSize.height;
      return new ui.Size.new(deleteIconWidth, deleteIconHeight);
    }
    hitTest(result, opts) {
      let t11, t11$, t11$0;
      let position = opts && 'position' in opts ? opts.position : null;
      if (!this.size.contains(position)) {
        return false;
      }
      let tapIsOnDeleteIcon = chip$._tapIsOnDeleteIcon({hasDeleteButton: this.deleteIcon != null, tapPosition: position, chipSize: this.size, textDirection: dart.nullCheck(this.textDirection)});
      let hitTestChild = tapIsOnDeleteIcon ? (t11$ = (t11 = this.deleteIcon, t11 == null ? this.label : t11), t11$ == null ? this.avatar : t11$) : (t11$0 = this.label, t11$0 == null ? this.avatar : t11$0);
      if (hitTestChild != null) {
        let center = hitTestChild.size.center(ui.Offset.zero);
        return result.addWithRawTransform({transform: matrix_utils.MatrixUtils.forceToPoint(center), position: position, hitTest: dart.fn((result, position) => {
            if (!dart.equals(position, center)) dart.assertFailed(null, I[1], 2623, 18, "position == center");
            return hitTestChild.hitTest(result, {position: center});
          }, T.BoxHitTestResultAndOffsetNTobool())});
      }
      return false;
    }
    computeDryLayout(constraints) {
      return this[_computeSizes](constraints, C[246] || CT.C246).size;
    }
    [_computeSizes](constraints, layoutChild) {
      let contentConstraints = constraints.loosen();
      let densityAdjustment = new ui.Offset.new(0.0, this.theme.visualDensity.baseSizeAdjustment.dy / 2.0);
      let rawLabelSize = layoutChild(dart.nullCheck(this.label), contentConstraints);
      let contentSize = math.max(core.double, 32 - this.theme.padding.vertical + this.theme.labelPadding.vertical, rawLabelSize.height + this.theme.labelPadding.vertical);
      let avatarSize = this[_layoutAvatar](contentConstraints, contentSize, layoutChild);
      let deleteIconSize = this[_layoutDeleteIcon](contentConstraints, contentSize, layoutChild);
      let labelSize = this[_layoutLabel](contentConstraints, avatarSize.width + deleteIconSize.width, new ui.Size.new(rawLabelSize.width, contentSize), rawLabelSize, layoutChild);
      let overallSize = new ui.Size.new(avatarSize.width + labelSize.width + deleteIconSize.width, contentSize)['+'](densityAdjustment);
      let paddedSize = new ui.Size.new(overallSize.width + this.theme.padding.horizontal, overallSize.height + this.theme.padding.vertical);
      return new chip$._ChipSizes.new({size: constraints.constrain(paddedSize), overall: overallSize, content: contentSize, densityAdjustment: densityAdjustment, avatar: avatarSize, label: labelSize, deleteIcon: deleteIconSize});
    }
    performLayout() {
      let sizes = this[_computeSizes](this.constraints, C[245] || CT.C245);
      let right = sizes.overall.width;
      const centerLayout = (boxSize, x) => {
        if (!(sizes.content >= boxSize.height)) dart.assertFailed(null, I[1], 2686, 14, "sizes.content >= boxSize.height");
        switch (dart.nullCheck(this.textDirection)) {
          case C[247] || CT.C247:
          {
            return new ui.Offset.new(x - boxSize.width, (sizes.content - boxSize.height + sizes.densityAdjustment.dy) / 2.0);
          }
          case C[248] || CT.C248:
          {
            return new ui.Offset.new(x, (sizes.content - boxSize.height + sizes.densityAdjustment.dy) / 2.0);
          }
        }
      };
      dart.fn(centerLayout, T.SizeAnddoubleToOffset());
      let avatarOffset = ui.Offset.zero;
      let labelOffset = ui.Offset.zero;
      let deleteIconOffset = ui.Offset.zero;
      switch (dart.nullCheck(this.textDirection)) {
        case C[247] || CT.C247:
        {
          let start = right;
          if (this.theme.showCheckmark || this.theme.showAvatar) {
            avatarOffset = centerLayout(sizes.avatar, start);
            start = start - sizes.avatar.width;
          }
          labelOffset = centerLayout(sizes.label, start);
          start = start - sizes.label.width;
          if (this.deleteIconShowing) {
            this[_deleteButtonRect] = new ui.Rect.fromLTWH(0.0, 0.0, sizes.deleteIcon.width + this.theme.padding.right, sizes.overall.height + this.theme.padding.vertical);
            deleteIconOffset = centerLayout(sizes.deleteIcon, start);
          } else {
            this[_deleteButtonRect] = ui.Rect.zero;
          }
          start = start - sizes.deleteIcon.width;
          if (this.theme.canTapBody) {
            this[_pressRect] = new ui.Rect.fromLTWH(this[_deleteButtonRect].width, 0.0, sizes.overall.width - this[_deleteButtonRect].width + this.theme.padding.horizontal, sizes.overall.height + this.theme.padding.vertical);
          } else {
            this[_pressRect] = ui.Rect.zero;
          }
          break;
        }
        case C[248] || CT.C248:
        {
          let start = 0;
          if (this.theme.showCheckmark || this.theme.showAvatar) {
            avatarOffset = centerLayout(sizes.avatar, start - chip$._RenderChip._boxSize(this.avatar).width + sizes.avatar.width);
            start = start + sizes.avatar.width;
          }
          labelOffset = centerLayout(sizes.label, start);
          start = start + sizes.label.width;
          if (this.theme.canTapBody) {
            this[_pressRect] = new ui.Rect.fromLTWH(0.0, 0.0, this.deleteIconShowing ? start + this.theme.padding.left : sizes.overall.width + this.theme.padding.horizontal, sizes.overall.height + this.theme.padding.vertical);
          } else {
            this[_pressRect] = ui.Rect.zero;
          }
          start = start - (chip$._RenderChip._boxSize(this.deleteIcon).width - sizes.deleteIcon.width);
          if (this.deleteIconShowing) {
            deleteIconOffset = centerLayout(sizes.deleteIcon, start);
            this[_deleteButtonRect] = new ui.Rect.fromLTWH(start + this.theme.padding.left, 0.0, sizes.deleteIcon.width + this.theme.padding.right, sizes.overall.height + this.theme.padding.vertical);
          } else {
            this[_deleteButtonRect] = ui.Rect.zero;
          }
          break;
        }
      }
      labelOffset = labelOffset['+'](new ui.Offset.new(0.0, (sizes.label.height - this.theme.labelPadding.vertical - chip$._RenderChip._boxSize(this.label).height) / 2.0));
      chip$._RenderChip._boxParentData(dart.nullCheck(this.avatar)).offset = this.theme.padding.topLeft['+'](avatarOffset);
      chip$._RenderChip._boxParentData(dart.nullCheck(this.label)).offset = this.theme.padding.topLeft['+'](labelOffset)['+'](this.theme.labelPadding.topLeft);
      chip$._RenderChip._boxParentData(dart.nullCheck(this.deleteIcon)).offset = this.theme.padding.topLeft['+'](deleteIconOffset);
      let paddedSize = new ui.Size.new(sizes.overall.width + this.theme.padding.horizontal, sizes.overall.height + this.theme.padding.vertical);
      this.size = this.constraints.constrain(paddedSize);
      if (!(this.size.height === this.constraints.constrainHeight(paddedSize.height))) dart.assertFailed("Constrained height " + dart.str(this.size.height) + " doesn't match expected height " + dart.str(this.constraints.constrainWidth(paddedSize.height)), I[1], 2782, 7, "size.height == constraints.constrainHeight(paddedSize.height)");
      if (!(this.size.width === this.constraints.constrainWidth(paddedSize.width))) dart.assertFailed("Constrained width " + dart.str(this.size.width) + " doesn't match expected width " + dart.str(this.constraints.constrainWidth(paddedSize.width)), I[1], 2787, 7, "size.width == constraints.constrainWidth(paddedSize.width)");
    }
    get [_disabledColor]() {
      if (this.enableAnimation === null || this.enableAnimation.isCompleted) {
        return colors.Colors.white;
      }
      let enableTween = null;
      switch (this.theme.brightness) {
        case C[249] || CT.C249:
        {
          enableTween = new tween.ColorTween.new({begin: colors.Colors.white.withAlpha(97), end: colors.Colors.white});
          break;
        }
        case C[250] || CT.C250:
        {
          enableTween = new tween.ColorTween.new({begin: colors.Colors.black.withAlpha(97), end: colors.Colors.black});
          break;
        }
      }
      return dart.nullCheck(enableTween.evaluate(this.enableAnimation));
    }
    [_paintCheck](canvas, origin, size) {
      let t11;
      let paintColor = null;
      if (this.theme.checkmarkColor != null) {
        paintColor = this.theme.checkmarkColor;
      } else {
        switch (this.theme.brightness) {
          case C[249] || CT.C249:
          {
            paintColor = this.theme.showAvatar ? colors.Colors.white : colors.Colors.black.withAlpha(222);
            break;
          }
          case C[250] || CT.C250:
          {
            paintColor = this.theme.showAvatar ? colors.Colors.black : colors.Colors.white.withAlpha(222);
            break;
          }
        }
      }
      let fadeTween = new tween.ColorTween.new({begin: colors.Colors.transparent, end: paintColor});
      paintColor = this.checkmarkAnimation.status === animation.AnimationStatus.reverse ? fadeTween.evaluate(this.checkmarkAnimation) : paintColor;
      let paint = (t11 = ui.Paint.new(), (() => {
        t11.color = dart.nullCheck(paintColor);
        t11.style = ui.PaintingStyle.stroke;
        t11.strokeWidth = 2 * (this.avatar != null ? dart.nullCheck(this.avatar).size.height / 24.0 : 1.0);
        return t11;
      })());
      let t = this.checkmarkAnimation.status === animation.AnimationStatus.reverse ? 1.0 : this.checkmarkAnimation.value;
      if (t === 0.0) {
        return;
      }
      if (!(t > 0.0 && t <= 1.0)) dart.assertFailed(null, I[1], 2852, 12, "t > 0.0 && t <= 1.0");
      let path = ui.Path.new();
      let start = new ui.Offset.new(size * 0.15, size * 0.45);
      let mid = new ui.Offset.new(size * 0.4, size * 0.7);
      let end = new ui.Offset.new(size * 0.85, size * 0.25);
      if (t < 0.5) {
        let strokeT = t * 2.0;
        let drawMid = dart.nullCheck(ui.Offset.lerp(start, mid, strokeT));
        path.moveTo(origin.dx + start.dx, origin.dy + start.dy);
        path.lineTo(origin.dx + drawMid.dx, origin.dy + drawMid.dy);
      } else {
        let strokeT = (t - 0.5) * 2.0;
        let drawEnd = dart.nullCheck(ui.Offset.lerp(mid, end, strokeT));
        path.moveTo(origin.dx + start.dx, origin.dy + start.dy);
        path.lineTo(origin.dx + mid.dx, origin.dy + mid.dy);
        path.lineTo(origin.dx + drawEnd.dx, origin.dy + drawEnd.dy);
      }
      canvas.drawPath(path, paint);
    }
    [_paintSelectionOverlay](context, offset) {
      let t11;
      if (this.isDrawingCheckmark) {
        if (this.theme.showAvatar) {
          let avatarRect = chip$._RenderChip._boxRect(this.avatar).shift(offset);
          let darkenPaint = (t11 = ui.Paint.new(), (() => {
            t11.color = dart.nullCheck(chip$._RenderChip.selectionScrimTween.evaluate(this.checkmarkAnimation));
            t11.blendMode = ui.BlendMode.srcATop;
            return t11;
          })());
          let path = dart.nullCheck(this.avatarBorder).getOuterPath(avatarRect);
          context.canvas.drawPath(path, darkenPaint);
        }
        let checkSize = dart.nullCheck(this.avatar).size.height * 0.75;
        let checkOffset = chip$._RenderChip._boxParentData(dart.nullCheck(this.avatar)).offset['+'](new ui.Offset.new(dart.nullCheck(this.avatar).size.height * 0.125, dart.nullCheck(this.avatar).size.height * 0.125));
        this[_paintCheck](context.canvas, offset['+'](checkOffset), checkSize);
      }
    }
    [_paintAvatar](context, offset) {
      let t11;
      const paintWithOverlay = (context, offset) => {
        context.paintChild(dart.nullCheck(this.avatar), chip$._RenderChip._boxParentData(dart.nullCheck(this.avatar)).offset['+'](offset));
        this[_paintSelectionOverlay](context, offset);
      };
      dart.fn(paintWithOverlay, T.PaintingContextAndOffsetTovoid());
      if (this.theme.showAvatar === false && this.avatarDrawerAnimation.isDismissed) {
        return;
      }
      let disabledColor = this[_disabledColor];
      let disabledColorAlpha = disabledColor.alpha;
      if (this.needsCompositing) {
        context.pushLayer(new layer.OpacityLayer.new({alpha: disabledColorAlpha}), paintWithOverlay, offset);
      } else {
        if (disabledColorAlpha !== 255) {
          context.canvas.saveLayer(chip$._RenderChip._boxRect(this.avatar).shift(offset).inflate(20.0), (t11 = ui.Paint.new(), (() => {
            t11.color = disabledColor;
            return t11;
          })()));
        }
        paintWithOverlay(context, offset);
        if (disabledColorAlpha !== 255) {
          context.canvas.restore();
        }
      }
    }
    [_paintChild](context, offset, child, isEnabled) {
      let t11;
      if (child == null) {
        return;
      }
      let disabledColorAlpha = this[_disabledColor].alpha;
      if (!this.enableAnimation.isCompleted) {
        if (this.needsCompositing) {
          context.pushLayer(new layer.OpacityLayer.new({alpha: disabledColorAlpha}), dart.fn((context, offset) => {
            context.paintChild(child, chip$._RenderChip._boxParentData(child).offset['+'](offset));
          }, T.PaintingContextAndOffsetTovoid()), offset);
        } else {
          let childRect = chip$._RenderChip._boxRect(child).shift(offset);
          context.canvas.saveLayer(childRect.inflate(20.0), (t11 = ui.Paint.new(), (() => {
            t11.color = this[_disabledColor];
            return t11;
          })()));
          context.paintChild(child, chip$._RenderChip._boxParentData(child).offset['+'](offset));
          context.canvas.restore();
        }
      } else {
        context.paintChild(child, chip$._RenderChip._boxParentData(child).offset['+'](offset));
      }
    }
    paint(context, offset) {
      this[_paintAvatar](context, offset);
      if (this.deleteIconShowing) {
        this[_paintChild](context, offset, this.deleteIcon, this.isEnabled);
      }
      this[_paintChild](context, offset, this.label, this.isEnabled);
    }
    debugPaint(context, offset) {
      if (!(!false || dart.fn(() => {
        let t11, t11$;
        let outlinePaint = (t11 = ui.Paint.new(), (() => {
          t11.color = C[251] || CT.C251;
          t11.strokeWidth = 1.0;
          t11.style = ui.PaintingStyle.stroke;
          return t11;
        })());
        if (this.deleteIconShowing) {
          context.canvas.drawRect(this[_deleteButtonRect].shift(offset), outlinePaint);
        }
        context.canvas.drawRect(this[_pressRect].shift(offset), (t11$ = outlinePaint, (() => {
          t11$.color = C[252] || CT.C252;
          return t11$;
        })()));
        return true;
      }, T.VoidTobool())())) dart.assertFailed(null, I[1], 2959, 12, "!_debugShowTapTargetOutlines || () {\r\n      // Draws a rect around the tap targets to help with visualizing where\r\n      // they really are.\r\n      final Paint outlinePaint = Paint()\r\n        ..color = const Color(0xff800000)\r\n        ..strokeWidth = 1.0\r\n        ..style = PaintingStyle.stroke;\r\n      if (deleteIconShowing) {\r\n        context.canvas.drawRect(_deleteButtonRect.shift(offset), outlinePaint);\r\n      }\r\n      context.canvas.drawRect(\r\n        _pressRect.shift(offset),\r\n        outlinePaint..color = const Color(0xff008000),\r\n      );\r\n      return true;\r\n    }()");
    }
    hitTestSelf(position) {
      return this[_deleteButtonRect].contains(position) || this[_pressRect].contains(position);
    }
  };
  (chip$._RenderChip.new = function(opts) {
    let theme = opts && 'theme' in opts ? opts.theme : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let value = opts && 'value' in opts ? opts.value : null;
    let isEnabled = opts && 'isEnabled' in opts ? opts.isEnabled : null;
    let checkmarkAnimation = opts && 'checkmarkAnimation' in opts ? opts.checkmarkAnimation : null;
    let avatarDrawerAnimation = opts && 'avatarDrawerAnimation' in opts ? opts.avatarDrawerAnimation : null;
    let deleteDrawerAnimation = opts && 'deleteDrawerAnimation' in opts ? opts.deleteDrawerAnimation : null;
    let enableAnimation = opts && 'enableAnimation' in opts ? opts.enableAnimation : null;
    let avatarBorder = opts && 'avatarBorder' in opts ? opts.avatarBorder : null;
    this.children = new (T.LinkedMapOf_ChipSlot$RenderBox()).new();
    this[___RenderChip__deleteButtonRect] = null;
    this[___RenderChip__pressRect] = null;
    this[_avatar] = null;
    this[_deleteIcon] = null;
    this[_label] = null;
    this.value = value;
    this.isEnabled = isEnabled;
    this.checkmarkAnimation = checkmarkAnimation;
    this.avatarDrawerAnimation = avatarDrawerAnimation;
    this.deleteDrawerAnimation = deleteDrawerAnimation;
    this.enableAnimation = enableAnimation;
    this.avatarBorder = avatarBorder;
    if (!(theme !== null)) dart.assertFailed(null, I[1], 2331, 15, "theme != null");
    if (!(textDirection !== null)) dart.assertFailed(null, I[1], 2332, 15, "textDirection != null");
    this[_theme] = theme;
    this[_textDirection] = textDirection;
    chip$._RenderChip.__proto__.new.call(this);
    this.checkmarkAnimation.addListener(dart.bind(this, 'markNeedsPaint'));
    this.avatarDrawerAnimation.addListener(dart.bind(this, 'markNeedsLayout'));
    this.deleteDrawerAnimation.addListener(dart.bind(this, 'markNeedsLayout'));
    this.enableAnimation.addListener(dart.bind(this, 'markNeedsPaint'));
  }).prototype = chip$._RenderChip.prototype;
  dart.addTypeTests(chip$._RenderChip);
  dart.addTypeCaches(chip$._RenderChip);
  dart.setMethodSignature(chip$._RenderChip, () => ({
    __proto__: dart.getMethods(chip$._RenderChip.__proto__),
    [_updateChild]: dart.fnType(dart.nullable(box$.RenderBox), [dart.nullable(box$.RenderBox), dart.nullable(box$.RenderBox), chip$._ChipSlot]),
    [_layoutLabel]: dart.fnType(ui.Size, [box$.BoxConstraints, core.double, ui.Size, ui.Size], [dart.fnType(ui.Size, [box$.RenderBox, box$.BoxConstraints])]),
    [_layoutAvatar]: dart.fnType(ui.Size, [box$.BoxConstraints, core.double], [dart.fnType(ui.Size, [box$.RenderBox, box$.BoxConstraints])]),
    [_layoutDeleteIcon]: dart.fnType(ui.Size, [box$.BoxConstraints, core.double], [dart.fnType(ui.Size, [box$.RenderBox, box$.BoxConstraints])]),
    [_computeSizes]: dart.fnType(chip$._ChipSizes, [box$.BoxConstraints, dart.fnType(ui.Size, [box$.RenderBox, box$.BoxConstraints])]),
    [_paintCheck]: dart.fnType(dart.void, [ui.Canvas, ui.Offset, core.double]),
    [_paintSelectionOverlay]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset]),
    [_paintAvatar]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset]),
    [_paintChild]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset, dart.nullable(box$.RenderBox), dart.nullable(core.bool)])
  }));
  dart.setGetterSignature(chip$._RenderChip, () => ({
    __proto__: dart.getGetters(chip$._RenderChip.__proto__),
    [_deleteButtonRect]: ui.Rect,
    [_pressRect]: ui.Rect,
    avatar: dart.nullable(box$.RenderBox),
    deleteIcon: dart.nullable(box$.RenderBox),
    label: dart.nullable(box$.RenderBox),
    theme: chip$._ChipRenderTheme,
    textDirection: dart.nullable(ui.TextDirection),
    [_children]: core.Iterable$(box$.RenderBox),
    isDrawingCheckmark: core.bool,
    deleteIconShowing: core.bool,
    [_disabledColor]: ui.Color
  }));
  dart.setSetterSignature(chip$._RenderChip, () => ({
    __proto__: dart.getSetters(chip$._RenderChip.__proto__),
    [_deleteButtonRect]: ui.Rect,
    [_pressRect]: ui.Rect,
    avatar: dart.nullable(box$.RenderBox),
    deleteIcon: dart.nullable(box$.RenderBox),
    label: dart.nullable(box$.RenderBox),
    theme: chip$._ChipRenderTheme,
    textDirection: dart.nullable(ui.TextDirection)
  }));
  dart.setLibraryUri(chip$._RenderChip, I[0]);
  dart.setFieldSignature(chip$._RenderChip, () => ({
    __proto__: dart.getFields(chip$._RenderChip.__proto__),
    children: dart.finalFieldType(core.Map$(chip$._ChipSlot, box$.RenderBox)),
    value: dart.fieldType(dart.nullable(core.bool)),
    isEnabled: dart.fieldType(dart.nullable(core.bool)),
    [___RenderChip__deleteButtonRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [___RenderChip__pressRect]: dart.fieldType(dart.nullable(ui.Rect)),
    checkmarkAnimation: dart.fieldType(animation.Animation$(core.double)),
    avatarDrawerAnimation: dart.fieldType(animation.Animation$(core.double)),
    deleteDrawerAnimation: dart.fieldType(animation.Animation$(core.double)),
    enableAnimation: dart.fieldType(animation.Animation$(core.double)),
    avatarBorder: dart.fieldType(dart.nullable(borders.ShapeBorder)),
    [_avatar]: dart.fieldType(dart.nullable(box$.RenderBox)),
    [_deleteIcon]: dart.fieldType(dart.nullable(box$.RenderBox)),
    [_label]: dart.fieldType(dart.nullable(box$.RenderBox)),
    [_theme]: dart.fieldType(chip$._ChipRenderTheme),
    [_textDirection]: dart.fieldType(dart.nullable(ui.TextDirection))
  }));
  dart.defineLazy(chip$._RenderChip, {
    /*chip$._RenderChip.selectionScrimTween*/get selectionScrimTween() {
      return new tween.ColorTween.new({begin: colors.Colors.transparent, end: chip$._kSelectScrimColor});
    },
    /*chip$._RenderChip._debugShowTapTargetOutlines*/get _debugShowTapTargetOutlines() {
      return false;
    }
  }, false);
  chip$._ChipSizes = class _ChipSizes extends core.Object {};
  (chip$._ChipSizes.new = function(opts) {
    let size = opts && 'size' in opts ? opts.size : null;
    let overall = opts && 'overall' in opts ? opts.overall : null;
    let content = opts && 'content' in opts ? opts.content : null;
    let avatar = opts && 'avatar' in opts ? opts.avatar : null;
    let label = opts && 'label' in opts ? opts.label : null;
    let deleteIcon = opts && 'deleteIcon' in opts ? opts.deleteIcon : null;
    let densityAdjustment = opts && 'densityAdjustment' in opts ? opts.densityAdjustment : null;
    this.size = size;
    this.overall = overall;
    this.content = content;
    this.avatar = avatar;
    this.label = label;
    this.deleteIcon = deleteIcon;
    this.densityAdjustment = densityAdjustment;
    ;
  }).prototype = chip$._ChipSizes.prototype;
  dart.addTypeTests(chip$._ChipSizes);
  dart.addTypeCaches(chip$._ChipSizes);
  dart.setLibraryUri(chip$._ChipSizes, I[0]);
  dart.setFieldSignature(chip$._ChipSizes, () => ({
    __proto__: dart.getFields(chip$._ChipSizes.__proto__),
    size: dart.finalFieldType(ui.Size),
    overall: dart.finalFieldType(ui.Size),
    content: dart.finalFieldType(core.double),
    avatar: dart.finalFieldType(ui.Size),
    label: dart.finalFieldType(ui.Size),
    deleteIcon: dart.finalFieldType(ui.Size),
    densityAdjustment: dart.finalFieldType(ui.Offset)
  }));
  var hasDeleteButton$ = dart.privateName(chip$, "_LocationAwareInkRippleFactory.hasDeleteButton");
  var chipContext$ = dart.privateName(chip$, "_LocationAwareInkRippleFactory.chipContext");
  var deleteIconKey$ = dart.privateName(chip$, "_LocationAwareInkRippleFactory.deleteIconKey");
  chip$._LocationAwareInkRippleFactory = class _LocationAwareInkRippleFactory extends ink_well.InteractiveInkFeatureFactory {
    get hasDeleteButton() {
      return this[hasDeleteButton$];
    }
    set hasDeleteButton(value) {
      super.hasDeleteButton = value;
    }
    get chipContext() {
      return this[chipContext$];
    }
    set chipContext(value) {
      super.chipContext = value;
    }
    get deleteIconKey() {
      return this[deleteIconKey$];
    }
    set deleteIconKey(value) {
      super.deleteIconKey = value;
    }
    create(opts) {
      let controller = opts && 'controller' in opts ? opts.controller : null;
      let referenceBox = opts && 'referenceBox' in opts ? opts.referenceBox : null;
      let position = opts && 'position' in opts ? opts.position : null;
      let color = opts && 'color' in opts ? opts.color : null;
      let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
      let containedInkWell = opts && 'containedInkWell' in opts ? opts.containedInkWell : false;
      let rectCallback = opts && 'rectCallback' in opts ? opts.rectCallback : null;
      let borderRadius = opts && 'borderRadius' in opts ? opts.borderRadius : null;
      let customBorder = opts && 'customBorder' in opts ? opts.customBorder : null;
      let radius = opts && 'radius' in opts ? opts.radius : null;
      let onRemoved = opts && 'onRemoved' in opts ? opts.onRemoved : null;
      let tapIsOnDeleteIcon = chip$._tapIsOnDeleteIcon({hasDeleteButton: this.hasDeleteButton, tapPosition: position, chipSize: dart.nullCheck(this.chipContext.size), textDirection: textDirection});
      let splashContext = tapIsOnDeleteIcon ? dart.nullCheck(this.deleteIconKey.currentContext) : this.chipContext;
      let splashFactory = theme$.Theme.of(splashContext).splashFactory;
      if (tapIsOnDeleteIcon) {
        let currentBox = referenceBox;
        referenceBox = box$.RenderBox.as(dart.nullCheck(dart.nullCheck(this.deleteIconKey.currentContext).findRenderObject()));
        position = referenceBox.globalToLocal(currentBox.localToGlobal(position));
        containedInkWell = false;
      }
      return splashFactory.create({controller: controller, referenceBox: referenceBox, position: position, color: color, textDirection: textDirection, containedInkWell: containedInkWell, rectCallback: rectCallback, borderRadius: borderRadius, customBorder: customBorder, radius: radius, onRemoved: onRemoved});
    }
  };
  (chip$._LocationAwareInkRippleFactory.new = function(hasDeleteButton, chipContext, deleteIconKey) {
    this[hasDeleteButton$] = hasDeleteButton;
    this[chipContext$] = chipContext;
    this[deleteIconKey$] = deleteIconKey;
    chip$._LocationAwareInkRippleFactory.__proto__.new.call(this);
    ;
  }).prototype = chip$._LocationAwareInkRippleFactory.prototype;
  dart.addTypeTests(chip$._LocationAwareInkRippleFactory);
  dart.addTypeCaches(chip$._LocationAwareInkRippleFactory);
  dart.setMethodSignature(chip$._LocationAwareInkRippleFactory, () => ({
    __proto__: dart.getMethods(chip$._LocationAwareInkRippleFactory.__proto__),
    create: dart.fnType(ink_well.InteractiveInkFeature, [], {borderRadius: dart.nullable(border_radius.BorderRadius), containedInkWell: core.bool, customBorder: dart.nullable(borders.ShapeBorder), onRemoved: dart.nullable(dart.fnType(dart.void, [])), radius: dart.nullable(core.double), rectCallback: dart.nullable(dart.fnType(ui.Rect, []))}, {color: ui.Color, controller: material.MaterialInkController, position: ui.Offset, referenceBox: box$.RenderBox, textDirection: ui.TextDirection})
  }));
  dart.setLibraryUri(chip$._LocationAwareInkRippleFactory, I[0]);
  dart.setFieldSignature(chip$._LocationAwareInkRippleFactory, () => ({
    __proto__: dart.getFields(chip$._LocationAwareInkRippleFactory.__proto__),
    hasDeleteButton: dart.finalFieldType(core.bool),
    chipContext: dart.finalFieldType(framework.BuildContext),
    deleteIconKey: dart.finalFieldType(framework.GlobalKey$(framework.State$(framework.StatefulWidget)))
  }));
  chip$._tapIsOnDeleteIcon = function _tapIsOnDeleteIcon(opts) {
    let hasDeleteButton = opts && 'hasDeleteButton' in opts ? opts.hasDeleteButton : null;
    let tapPosition = opts && 'tapPosition' in opts ? opts.tapPosition : null;
    let chipSize = opts && 'chipSize' in opts ? opts.chipSize : null;
    let textDirection = opts && 'textDirection' in opts ? opts.textDirection : null;
    let tapIsOnDeleteIcon = null;
    if (!hasDeleteButton) {
      tapIsOnDeleteIcon = false;
    } else {
      switch (textDirection) {
        case C[248] || CT.C248:
        {
          tapIsOnDeleteIcon = tapPosition.dx / chipSize.width > 0.66;
          break;
        }
        case C[247] || CT.C247:
        {
          tapIsOnDeleteIcon = tapPosition.dx / chipSize.width < 0.33;
          break;
        }
      }
    }
    return tapIsOnDeleteIcon;
  };
  var Widget__location = dart.privateName(framework, "Widget._location");
  var Widget_key = dart.privateName(framework, "Widget.key");
  var Icon_textDirection = dart.privateName(icon, "Icon.textDirection");
  var Icon_semanticLabel = dart.privateName(icon, "Icon.semanticLabel");
  var Icon_color = dart.privateName(icon, "Icon.color");
  var Icon_size = dart.privateName(icon, "Icon.size");
  var IconData_matchTextDirection = dart.privateName(icon_data, "IconData.matchTextDirection");
  var IconData_fontPackage = dart.privateName(icon_data, "IconData.fontPackage");
  var IconData_fontFamily = dart.privateName(icon_data, "IconData.fontFamily");
  var IconData_codePoint = dart.privateName(icon_data, "IconData.codePoint");
  var Icon_icon = dart.privateName(icon, "Icon.icon");
  dart.defineLazy(chip$, {
    /*chip$._kChipHeight*/get _kChipHeight() {
      return 32;
    },
    /*chip$._kDeleteIconSize*/get _kDeleteIconSize() {
      return 18;
    },
    /*chip$._kCheckmarkAlpha*/get _kCheckmarkAlpha() {
      return 222;
    },
    /*chip$._kDisabledAlpha*/get _kDisabledAlpha() {
      return 97;
    },
    /*chip$._kCheckmarkStrokeWidth*/get _kCheckmarkStrokeWidth() {
      return 2;
    },
    /*chip$._kSelectDuration*/get _kSelectDuration() {
      return C[253] || CT.C253;
    },
    /*chip$._kCheckmarkDuration*/get _kCheckmarkDuration() {
      return C[254] || CT.C254;
    },
    /*chip$._kCheckmarkReverseDuration*/get _kCheckmarkReverseDuration() {
      return C[255] || CT.C255;
    },
    /*chip$._kDrawerDuration*/get _kDrawerDuration() {
      return C[254] || CT.C254;
    },
    /*chip$._kReverseDrawerDuration*/get _kReverseDrawerDuration() {
      return C[256] || CT.C256;
    },
    /*chip$._kDisableDuration*/get _kDisableDuration() {
      return C[240] || CT.C240;
    },
    /*chip$._kSelectScrimColor*/get _kSelectScrimColor() {
      return C[257] || CT.C257;
    },
    /*chip$._kDefaultDeleteIcon*/get _kDefaultDeleteIcon() {
      return C[258] || CT.C258;
    }
  }, false);
  dart.trackLibraries("packages/flutter/src/material/chip.dart", {
    "package:flutter/src/material/chip.dart": chip$
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["chip.dart"],"names":[],"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","file":"../../../../../../packages/flutter/src/material/chip.dart.lib.js"}');
  // Exports:
  return {
    src__material__chip: chip$
  };
}));

//# sourceMappingURL=chip.dart.lib.js.map
